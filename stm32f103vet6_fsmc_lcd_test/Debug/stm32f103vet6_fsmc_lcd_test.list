
stm32f103vet6_fsmc_lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000363c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf0  08003cf0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf0  08003cf0  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf0  08003cf0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200000a0  08003d98  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003d98  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149a0  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300f  00000000  00000000  00034a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00037a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  000384f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c50f  00000000  00000000  00038e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c0b  00000000  00000000  0005532f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095403  00000000  00000000  00067f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd33d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac4  00000000  00000000  000fd390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000a0 	.word	0x200000a0
 8000200:	00000000 	.word	0x00000000
 8000204:	08003808 	.word	0x08003808

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000a4 	.word	0x200000a4
 8000220:	08003808 	.word	0x08003808

08000224 <apInit>:




 void apInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	 ;
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr

08000230 <apBoardLedTest>:



#ifdef BOARD_LED_TEST
void apBoardLedTest(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

  while(1)
  {

    ledToggle(_DEF_LED1);
 8000234:	2000      	movs	r0, #0
 8000236:	f000 ff39 	bl	80010ac <ledToggle>
    ledToggle(_DEF_LED2);
 800023a:	2001      	movs	r0, #1
 800023c:	f000 ff36 	bl	80010ac <ledToggle>
    delay_ms(100);
 8000240:	2064      	movs	r0, #100	; 0x64
 8000242:	f000 f8bd 	bl	80003c0 <delay_ms>
    ledToggle(_DEF_LED1);
 8000246:	e7f5      	b.n	8000234 <apBoardLedTest+0x4>

08000248 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	80fb      	strh	r3, [r7, #6]
 if (GPIO_Pin == T_PEN_Pin)
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000258:	d12a      	bne.n	80002b0 <HAL_GPIO_EXTI_Callback+0x68>
 {
	 if (tempIgnoralEXTI || isCalbriating) return;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <HAL_GPIO_EXTI_Callback+0x70>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d125      	bne.n	80002ae <HAL_GPIO_EXTI_Callback+0x66>
 8000262:	4b16      	ldr	r3, [pc, #88]	; (80002bc <HAL_GPIO_EXTI_Callback+0x74>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d121      	bne.n	80002ae <HAL_GPIO_EXTI_Callback+0x66>

	  if(XPT2046_TouchPressed())
 800026a:	f001 f8e3 	bl	8001434 <XPT2046_TouchPressed>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d01d      	beq.n	80002b0 <HAL_GPIO_EXTI_Callback+0x68>
	  {
		  tempIgnoralEXTI=1;
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
		  XPT2046_TouchGetCoordinates(&cx, &cy);
 800027a:	4911      	ldr	r1, [pc, #68]	; (80002c0 <HAL_GPIO_EXTI_Callback+0x78>)
 800027c:	4811      	ldr	r0, [pc, #68]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800027e:	f001 f8f1 	bl	8001464 <XPT2046_TouchGetCoordinates>

		  if (menuActived)
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d012      	beq.n	80002b0 <HAL_GPIO_EXTI_Callback+0x68>
		  {
			  uint8_t i=getTouchMenItem(cx, cy);
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000290:	8812      	ldrh	r2, [r2, #0]
 8000292:	4611      	mov	r1, r2
 8000294:	4618      	mov	r0, r3
 8000296:	f000 ffe7 	bl	8001268 <getTouchMenItem>
 800029a:	4603      	mov	r3, r0
 800029c:	73fb      	strb	r3, [r7, #15]
			  if (i > 0)
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d005      	beq.n	80002b0 <HAL_GPIO_EXTI_Callback+0x68>
			  {
				 showMenu(i);
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 ff1c 	bl	80010e4 <showMenu>
 80002ac:	e000      	b.n	80002b0 <HAL_GPIO_EXTI_Callback+0x68>
	 if (tempIgnoralEXTI || isCalbriating) return;
 80002ae:	bf00      	nop
		  tempIgnoralEXTI=0;
#endif /* LCD_TOUCH_MENU_TEST */

	  }
   }
}
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000bc 	.word	0x200000bc
 80002bc:	2000023a 	.word	0x2000023a
 80002c0:	200000c0 	.word	0x200000c0
 80002c4:	200000be 	.word	0x200000be
 80002c8:	20000238 	.word	0x20000238

080002cc <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	; 0x28
 80002d0:	af00      	add	r7, sp, #0
	  HAL_Init();
 80002d2:	f001 f985 	bl	80015e0 <HAL_Init>
	  SystemClock_Config();
 80002d6:	f000 f87e 	bl	80003d6 <SystemClock_Config>

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]

	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e8:	4b31      	ldr	r3, [pc, #196]	; (80003b0 <bspInit+0xe4>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a30      	ldr	r2, [pc, #192]	; (80003b0 <bspInit+0xe4>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b2e      	ldr	r3, [pc, #184]	; (80003b0 <bspInit+0xe4>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0310 	and.w	r3, r3, #16
 80002fc:	617b      	str	r3, [r7, #20]
 80002fe:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000300:	4b2b      	ldr	r3, [pc, #172]	; (80003b0 <bspInit+0xe4>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a2a      	ldr	r2, [pc, #168]	; (80003b0 <bspInit+0xe4>)
 8000306:	f043 0304 	orr.w	r3, r3, #4
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <bspInit+0xe4>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0304 	and.w	r3, r3, #4
 8000314:	613b      	str	r3, [r7, #16]
 8000316:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000318:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <bspInit+0xe4>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a24      	ldr	r2, [pc, #144]	; (80003b0 <bspInit+0xe4>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <bspInit+0xe4>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0308 	and.w	r3, r3, #8
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000330:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <bspInit+0xe4>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a1e      	ldr	r2, [pc, #120]	; (80003b0 <bspInit+0xe4>)
 8000336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <bspInit+0xe4>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <bspInit+0xe4>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <bspInit+0xe4>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <bspInit+0xe4>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0320 	and.w	r3, r3, #32
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]

	// LCD Backlight Contorl Pin  &  SPI2 CS(NSS) Pin Configure
	GPIO_InitStruct.Pin = LCD_BL_Pin|SPI2_CS_Pin;
 8000360:	f241 0301 	movw	r3, #4097	; 0x1001
 8000364:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800036a:	2301      	movs	r3, #1
 800036c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2302      	movs	r3, #2
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	4619      	mov	r1, r3
 8000378:	480e      	ldr	r0, [pc, #56]	; (80003b4 <bspInit+0xe8>)
 800037a:	f001 fac5 	bl	8001908 <HAL_GPIO_Init>

	// XPT2046 : PEN (Touch screen interrupt detection pin) Configure
    GPIO_InitStruct.Pin = T_PEN_Pin;
 800037e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000382:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <bspInit+0xec>)
 8000386:	61fb      	str	r3, [r7, #28]
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000388:	2301      	movs	r3, #1
 800038a:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0318 	add.w	r3, r7, #24
 8000390:	4619      	mov	r1, r3
 8000392:	480a      	ldr	r0, [pc, #40]	; (80003bc <bspInit+0xf0>)
 8000394:	f001 fab8 	bl	8001908 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2100      	movs	r1, #0
 800039c:	2017      	movs	r0, #23
 800039e:	f001 fa7c 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003a2:	2017      	movs	r0, #23
 80003a4:	f001 fa95 	bl	80018d2 <HAL_NVIC_EnableIRQ>

}
 80003a8:	bf00      	nop
 80003aa:	3728      	adds	r7, #40	; 0x28
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010c00 	.word	0x40010c00
 80003b8:	10210000 	.word	0x10210000
 80003bc:	40010800 	.word	0x40010800

080003c0 <delay_ms>:


void delay_ms(uint32_t ms)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f001 f96b 	bl	80016a4 <HAL_Delay>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b090      	sub	sp, #64	; 0x40
 80003da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003dc:	f107 0318 	add.w	r3, r7, #24
 80003e0:	2228      	movs	r2, #40	; 0x28
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f002 fdcd 	bl	8002f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000400:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000406:	2301      	movs	r3, #1
 8000408:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040a:	2302      	movs	r3, #2
 800040c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800040e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000412:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000414:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000418:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f107 0318 	add.w	r3, r7, #24
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fc66 	bl	8001cf0 <HAL_RCC_OscConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800042a:	f000 f819 	bl	8000460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042e:	230f      	movs	r3, #15
 8000430:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000432:	2302      	movs	r3, #2
 8000434:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2102      	movs	r1, #2
 8000448:	4618      	mov	r0, r3
 800044a:	f001 fed1 	bl	80021f0 <HAL_RCC_ClockConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000454:	f000 f804 	bl	8000460 <Error_Handler>
  }
}
 8000458:	bf00      	nop
 800045a:	3740      	adds	r7, #64	; 0x40
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x8>
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <HAL_MspInit+0x5c>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x5c>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <HAL_MspInit+0x60>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <HAL_MspInit+0x60>)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010000 	.word	0x40010000

080004d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <NMI_Handler+0x4>

080004d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <MemManage_Handler+0x4>

080004e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <UsageFault_Handler+0x4>

080004ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000516:	f001 f8a9 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}

0800051e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000522:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000526:	f001 fbcb 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <_sbrk+0x5c>)
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <_sbrk+0x60>)
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <_sbrk+0x64>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <_sbrk+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	429a      	cmp	r2, r3
 800055e:	d207      	bcs.n	8000570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000560:	f002 fce6 	bl	8002f30 <__errno>
 8000564:	4603      	mov	r3, r0
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	e009      	b.n	8000584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <_sbrk+0x64>)
 8000580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20010000 	.word	0x20010000
 8000590:	00000400 	.word	0x00000400
 8000594:	200000c4 	.word	0x200000c4
 8000598:	20000298 	.word	0x20000298

0800059c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005aa:	e003      	b.n	80005b4 <LoopCopyDataInit>

080005ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005b2:	3104      	adds	r1, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005bc:	d3f6      	bcc.n	80005ac <CopyDataInit>
  ldr r2, =_sbss
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005c0:	e002      	b.n	80005c8 <LoopFillZerobss>

080005c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005c4:	f842 3b04 	str.w	r3, [r2], #4

080005c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005cc:	d3f9      	bcc.n	80005c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ce:	f7ff ffe5 	bl	800059c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005d2:	f002 fcb3 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f002 fc9f 	bl	8002f18 <main>
  bx lr
 80005da:	4770      	bx	lr
  ldr r3, =_sidata
 80005dc:	08003cf8 	.word	0x08003cf8
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005e4:	200000a0 	.word	0x200000a0
  ldr r2, =_sbss
 80005e8:	200000a0 	.word	0x200000a0
  ldr r3, = _ebss
 80005ec:	20000298 	.word	0x20000298

080005f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC1_2_IRQHandler>
	...

080005f4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]
 800060a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_FSMC_Init+0xbc>)
 800060e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000612:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_FSMC_Init+0xbc>)
 8000616:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <MX_FSMC_Init+0xc0>)
 8000618:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <MX_FSMC_Init+0xbc>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_FSMC_Init+0xbc>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_FSMC_Init+0xbc>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_FSMC_Init+0xbc>)
 800062e:	2210      	movs	r2, #16
 8000630:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_FSMC_Init+0xbc>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_FSMC_Init+0xbc>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_FSMC_Init+0xbc>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_FSMC_Init+0xbc>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_FSMC_Init+0xbc>)
 800064c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_FSMC_Init+0xbc>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_FSMC_Init+0xbc>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_FSMC_Init+0xbc>)
 8000660:	2200      	movs	r2, #0
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_FSMC_Init+0xbc>)
 8000666:	2200      	movs	r2, #0
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800066a:	230f      	movs	r3, #15
 800066c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800066e:	230f      	movs	r3, #15
 8000670:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000672:	23ff      	movs	r3, #255	; 0xff
 8000674:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000676:	230f      	movs	r3, #15
 8000678:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800067a:	2310      	movs	r3, #16
 800067c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800067e:	2311      	movs	r3, #17
 8000680:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	4619      	mov	r1, r3
 800068c:	4808      	ldr	r0, [pc, #32]	; (80006b0 <MX_FSMC_Init+0xbc>)
 800068e:	f002 fb1f 	bl	8002cd0 <HAL_SRAM_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000698:	f7ff fee2 	bl	8000460 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_FSMC_Init+0xc4>)
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <MX_FSMC_Init+0xc4>)
 80006a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006a6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000023c 	.word	0x2000023c
 80006b4:	a0000104 	.word	0xa0000104
 80006b8:	40010000 	.word	0x40010000

080006bc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_FSMC_MspInit+0x78>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d129      	bne.n	800072c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_FSMC_MspInit+0x78>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <HAL_FSMC_MspInit+0x7c>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <HAL_FSMC_MspInit+0x7c>)
 80006e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_FSMC_MspInit+0x7c>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006f6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80006fa:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4619      	mov	r1, r3
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <HAL_FSMC_MspInit+0x80>)
 800070c:	f001 f8fc 	bl	8001908 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000710:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000714:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4619      	mov	r1, r3
 8000724:	4806      	ldr	r0, [pc, #24]	; (8000740 <HAL_FSMC_MspInit+0x84>)
 8000726:	f001 f8ef 	bl	8001908 <HAL_GPIO_Init>
 800072a:	e000      	b.n	800072e <HAL_FSMC_MspInit+0x72>
    return;
 800072c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */
/* USER CODE END FSMC_MspInit 1 */
}
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000c8 	.word	0x200000c8
 8000738:	40021000 	.word	0x40021000
 800073c:	40011800 	.word	0x40011800
 8000740:	40011400 	.word	0x40011400

08000744 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800074c:	f7ff ffb6 	bl	80006bc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af02      	add	r7, sp, #8
  MX_FSMC_Init();
 800075e:	f7ff ff49 	bl	80005f4 <MX_FSMC_Init>
  HAL_SRAM_MspInit(&hsram1);
 8000762:	48b7      	ldr	r0, [pc, #732]	; (8000a40 <lcdInit+0x2e8>)
 8000764:	f7ff ffee 	bl	8000744 <HAL_SRAM_MspInit>


  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8000768:	2300      	movs	r3, #0
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	2301      	movs	r3, #1
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2300      	movs	r3, #0
 8000772:	2200      	movs	r2, #0
 8000774:	2101      	movs	r1, #1
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fc00 	bl	8000f7c <lcdBuildMemoryAccessControlConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4bb0      	ldr	r3, [pc, #704]	; (8000a44 <lcdInit+0x2ec>)
 8000782:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8000784:	2300      	movs	r3, #0
 8000786:	9301      	str	r3, [sp, #4]
 8000788:	2301      	movs	r3, #1
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2300      	movs	r3, #0
 800078e:	2201      	movs	r2, #1
 8000790:	2100      	movs	r1, #0
 8000792:	2000      	movs	r0, #0
 8000794:	f000 fbf2 	bl	8000f7c <lcdBuildMemoryAccessControlConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4baa      	ldr	r3, [pc, #680]	; (8000a48 <lcdInit+0x2f0>)
 800079e:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007a0:	2300      	movs	r3, #0
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	2301      	movs	r3, #1
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2300      	movs	r3, #0
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2001      	movs	r0, #1
 80007b0:	f000 fbe4 	bl	8000f7c <lcdBuildMemoryAccessControlConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	4ba4      	ldr	r3, [pc, #656]	; (8000a4c <lcdInit+0x2f4>)
 80007ba:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007bc:	2300      	movs	r3, #0
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	2301      	movs	r3, #1
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	2201      	movs	r2, #1
 80007c8:	2101      	movs	r1, #1
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fbd6 	bl	8000f7c <lcdBuildMemoryAccessControlConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b9e      	ldr	r3, [pc, #632]	; (8000a50 <lcdInit+0x2f8>)
 80007d6:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80007d8:	f000 fba6 	bl	8000f28 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80007dc:	2028      	movs	r0, #40	; 0x28
 80007de:	f000 fbad 	bl	8000f3c <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80007e2:	20cf      	movs	r0, #207	; 0xcf
 80007e4:	f000 fbaa 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x00);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fbb7 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x83);
 80007ee:	2083      	movs	r0, #131	; 0x83
 80007f0:	f000 fbb4 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x30);
 80007f4:	2030      	movs	r0, #48	; 0x30
 80007f6:	f000 fbb1 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(0xED);
 80007fa:	20ed      	movs	r0, #237	; 0xed
 80007fc:	f000 fb9e 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x64);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f000 fbab 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x03);
 8000806:	2003      	movs	r0, #3
 8000808:	f000 fba8 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x12);
 800080c:	2012      	movs	r0, #18
 800080e:	f000 fba5 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x81);
 8000812:	2081      	movs	r0, #129	; 0x81
 8000814:	f000 fba2 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(0xE8);
 8000818:	20e8      	movs	r0, #232	; 0xe8
 800081a:	f000 fb8f 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x85);
 800081e:	2085      	movs	r0, #133	; 0x85
 8000820:	f000 fb9c 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x01);
 8000824:	2001      	movs	r0, #1
 8000826:	f000 fb99 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x79);
 800082a:	2079      	movs	r0, #121	; 0x79
 800082c:	f000 fb96 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(0xCB);
 8000830:	20cb      	movs	r0, #203	; 0xcb
 8000832:	f000 fb83 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x39);
 8000836:	2039      	movs	r0, #57	; 0x39
 8000838:	f000 fb90 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x2C);
 800083c:	202c      	movs	r0, #44	; 0x2c
 800083e:	f000 fb8d 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x00);
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fb8a 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x34);
 8000848:	2034      	movs	r0, #52	; 0x34
 800084a:	f000 fb87 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x02);
 800084e:	2002      	movs	r0, #2
 8000850:	f000 fb84 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(0xF7);
 8000854:	20f7      	movs	r0, #247	; 0xf7
 8000856:	f000 fb71 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x20);
 800085a:	2020      	movs	r0, #32
 800085c:	f000 fb7e 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(0xEA);
 8000860:	20ea      	movs	r0, #234	; 0xea
 8000862:	f000 fb6b 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x00);
 8000866:	2000      	movs	r0, #0
 8000868:	f000 fb78 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x00);
 800086c:	2000      	movs	r0, #0
 800086e:	f000 fb75 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000872:	20c0      	movs	r0, #192	; 0xc0
 8000874:	f000 fb62 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x26);
 8000878:	2026      	movs	r0, #38	; 0x26
 800087a:	f000 fb6f 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 800087e:	20c1      	movs	r0, #193	; 0xc1
 8000880:	f000 fb5c 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x11);
 8000884:	2011      	movs	r0, #17
 8000886:	f000 fb69 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 800088a:	20c5      	movs	r0, #197	; 0xc5
 800088c:	f000 fb56 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x35);
 8000890:	2035      	movs	r0, #53	; 0x35
 8000892:	f000 fb63 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x3E);
 8000896:	203e      	movs	r0, #62	; 0x3e
 8000898:	f000 fb60 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 800089c:	20c7      	movs	r0, #199	; 0xc7
 800089e:	f000 fb4d 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0xBE);
 80008a2:	20be      	movs	r0, #190	; 0xbe
 80008a4:	f000 fb5a 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 80008a8:	2036      	movs	r0, #54	; 0x36
 80008aa:	f000 fb47 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 80008ae:	4b65      	ldr	r3, [pc, #404]	; (8000a44 <lcdInit+0x2ec>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fb51 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80008ba:	203a      	movs	r0, #58	; 0x3a
 80008bc:	f000 fb3e 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x55);
 80008c0:	2055      	movs	r0, #85	; 0x55
 80008c2:	f000 fb4b 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80008c6:	20b1      	movs	r0, #177	; 0xb1
 80008c8:	f000 fb38 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x00);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 fb45 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x1B);
 80008d2:	201b      	movs	r0, #27
 80008d4:	f000 fb42 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(0xF2);
 80008d8:	20f2      	movs	r0, #242	; 0xf2
 80008da:	f000 fb2f 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x08);
 80008de:	2008      	movs	r0, #8
 80008e0:	f000 fb3c 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80008e4:	2026      	movs	r0, #38	; 0x26
 80008e6:	f000 fb29 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x01);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 fb36 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80008f0:	20e0      	movs	r0, #224	; 0xe0
 80008f2:	f000 fb23 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x1F);
 80008f6:	201f      	movs	r0, #31
 80008f8:	f000 fb30 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x1A);
 80008fc:	201a      	movs	r0, #26
 80008fe:	f000 fb2d 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x18);
 8000902:	2018      	movs	r0, #24
 8000904:	f000 fb2a 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x0A);
 8000908:	200a      	movs	r0, #10
 800090a:	f000 fb27 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x0F);
 800090e:	200f      	movs	r0, #15
 8000910:	f000 fb24 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x06);
 8000914:	2006      	movs	r0, #6
 8000916:	f000 fb21 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x45);
 800091a:	2045      	movs	r0, #69	; 0x45
 800091c:	f000 fb1e 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x87);
 8000920:	2087      	movs	r0, #135	; 0x87
 8000922:	f000 fb1b 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x32);
 8000926:	2032      	movs	r0, #50	; 0x32
 8000928:	f000 fb18 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x0A);
 800092c:	200a      	movs	r0, #10
 800092e:	f000 fb15 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x07);
 8000932:	2007      	movs	r0, #7
 8000934:	f000 fb12 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x02);
 8000938:	2002      	movs	r0, #2
 800093a:	f000 fb0f 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x07);
 800093e:	2007      	movs	r0, #7
 8000940:	f000 fb0c 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x05);
 8000944:	2005      	movs	r0, #5
 8000946:	f000 fb09 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x00);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 fb06 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000950:	20e1      	movs	r0, #225	; 0xe1
 8000952:	f000 faf3 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x00);
 8000956:	2000      	movs	r0, #0
 8000958:	f000 fb00 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x25);
 800095c:	2025      	movs	r0, #37	; 0x25
 800095e:	f000 fafd 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x27);
 8000962:	2027      	movs	r0, #39	; 0x27
 8000964:	f000 fafa 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x05);
 8000968:	2005      	movs	r0, #5
 800096a:	f000 faf7 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x10);
 800096e:	2010      	movs	r0, #16
 8000970:	f000 faf4 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x09);
 8000974:	2009      	movs	r0, #9
 8000976:	f000 faf1 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x3A);
 800097a:	203a      	movs	r0, #58	; 0x3a
 800097c:	f000 faee 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x78);
 8000980:	2078      	movs	r0, #120	; 0x78
 8000982:	f000 faeb 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x4D);
 8000986:	204d      	movs	r0, #77	; 0x4d
 8000988:	f000 fae8 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x05);
 800098c:	2005      	movs	r0, #5
 800098e:	f000 fae5 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x18);
 8000992:	2018      	movs	r0, #24
 8000994:	f000 fae2 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x0D);
 8000998:	200d      	movs	r0, #13
 800099a:	f000 fadf 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x38);
 800099e:	2038      	movs	r0, #56	; 0x38
 80009a0:	f000 fadc 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x3A);
 80009a4:	203a      	movs	r0, #58	; 0x3a
 80009a6:	f000 fad9 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x1F);
 80009aa:	201f      	movs	r0, #31
 80009ac:	f000 fad6 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 80009b0:	202a      	movs	r0, #42	; 0x2a
 80009b2:	f000 fac3 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x00);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 fad0 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x00);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 facd 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x00);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 faca 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0xEF);
 80009c8:	20ef      	movs	r0, #239	; 0xef
 80009ca:	f000 fac7 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80009ce:	202b      	movs	r0, #43	; 0x2b
 80009d0:	f000 fab4 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x00);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 fac1 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x00);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 fabe 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x01);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 fabb 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x3F);
 80009e6:	203f      	movs	r0, #63	; 0x3f
 80009e8:	f000 fab8 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80009ec:	20b7      	movs	r0, #183	; 0xb7
 80009ee:	f000 faa5 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x07);
 80009f2:	2007      	movs	r0, #7
 80009f4:	f000 fab2 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80009f8:	20b6      	movs	r0, #182	; 0xb6
 80009fa:	f000 fa9f 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData(0x0A);
 80009fe:	200a      	movs	r0, #10
 8000a00:	f000 faac 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x82);
 8000a04:	2082      	movs	r0, #130	; 0x82
 8000a06:	f000 faa9 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x27);
 8000a0a:	2027      	movs	r0, #39	; 0x27
 8000a0c:	f000 faa6 	bl	8000f5c <lcdWriteData>
  lcdWriteData(0x00);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 faa3 	bl	8000f5c <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8000a16:	2011      	movs	r0, #17
 8000a18:	f000 fa90 	bl	8000f3c <lcdWriteCommand>
  HAL_Delay(100);
 8000a1c:	2064      	movs	r0, #100	; 0x64
 8000a1e:	f000 fe41 	bl	80016a4 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000a22:	2029      	movs	r0, #41	; 0x29
 8000a24:	f000 fa8a 	bl	8000f3c <lcdWriteCommand>
  HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f000 fe3b 	bl	80016a4 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000a2e:	202c      	movs	r0, #44	; 0x2c
 8000a30:	f000 fa84 	bl	8000f3c <lcdWriteCommand>

  lcdBacklightOn();
 8000a34:	f000 fa6c 	bl	8000f10 <lcdBacklightOn>
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000023c 	.word	0x2000023c
 8000a44:	200000d0 	.word	0x200000d0
 8000a48:	200000d1 	.word	0x200000d1
 8000a4c:	200000d2 	.word	0x200000d2
 8000a50:	200000d3 	.word	0x200000d3

08000a54 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <lcdDrawPixel+0x44>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	88fa      	ldrh	r2, [r7, #6]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d20f      	bcs.n	8000a90 <lcdDrawPixel+0x3c>
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <lcdDrawPixel+0x44>)
 8000a72:	885b      	ldrh	r3, [r3, #2]
 8000a74:	88ba      	ldrh	r2, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d20a      	bcs.n	8000a90 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	88fa      	ldrh	r2, [r7, #6]
 8000a7e:	88b9      	ldrh	r1, [r7, #4]
 8000a80:	88f8      	ldrh	r0, [r7, #6]
 8000a82:	f000 f9f9 	bl	8000e78 <lcdSetWindow>
    lcdWriteData(color);
 8000a86:	887b      	ldrh	r3, [r7, #2]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fa67 	bl	8000f5c <lcdWriteData>
 8000a8e:	e000      	b.n	8000a92 <lcdDrawPixel+0x3e>
        return;
 8000a90:	bf00      	nop
}
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000000c 	.word	0x2000000c

08000a9c <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4623      	mov	r3, r4
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80bb      	strh	r3, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	807b      	strh	r3, [r7, #2]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000aba:	88ba      	ldrh	r2, [r7, #4]
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d205      	bcs.n	8000ace <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	817b      	strh	r3, [r7, #10]
 8000ac6:	88bb      	ldrh	r3, [r7, #4]
 8000ac8:	80fb      	strh	r3, [r7, #6]
 8000aca:	897b      	ldrh	r3, [r7, #10]
 8000acc:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <lcdDrawHLine+0x88>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	88ba      	ldrh	r2, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d303      	bcc.n	8000ae0 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <lcdDrawHLine+0x88>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <lcdDrawHLine+0x88>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	88fa      	ldrh	r2, [r7, #6]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d303      	bcc.n	8000af2 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <lcdDrawHLine+0x88>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	88ba      	ldrh	r2, [r7, #4]
 8000af6:	8879      	ldrh	r1, [r7, #2]
 8000af8:	88f8      	ldrh	r0, [r7, #6]
 8000afa:	f000 f9bd 	bl	8000e78 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e006      	b.n	8000b12 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8000b04:	883b      	ldrh	r3, [r7, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fa28 	bl	8000f5c <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	88bb      	ldrh	r3, [r7, #4]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	ddf4      	ble.n	8000b04 <lcdDrawHLine+0x68>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	2000000c 	.word	0x2000000c

08000b28 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	4611      	mov	r1, r2
 8000b34:	461a      	mov	r2, r3
 8000b36:	4623      	mov	r3, r4
 8000b38:	80fb      	strh	r3, [r7, #6]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80bb      	strh	r3, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	807b      	strh	r3, [r7, #2]
 8000b42:	4613      	mov	r3, r2
 8000b44:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8000b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4a:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <lcdFillRect+0xb4>)
 8000b4c:	8812      	ldrh	r2, [r2, #0]
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	da3f      	bge.n	8000bd2 <lcdFillRect+0xaa>
 8000b52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b56:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <lcdFillRect+0xb4>)
 8000b58:	8852      	ldrh	r2, [r2, #2]
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	da39      	bge.n	8000bd2 <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8000b5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <lcdFillRect+0xb4>)
 8000b6a:	8812      	ldrh	r2, [r2, #0]
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	dd05      	ble.n	8000b7c <lcdFillRect+0x54>
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <lcdFillRect+0xb4>)
 8000b72:	881a      	ldrh	r2, [r3, #0]
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8000b7c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b80:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <lcdFillRect+0xb4>)
 8000b88:	8852      	ldrh	r2, [r2, #2]
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	dd05      	ble.n	8000b9a <lcdFillRect+0x72>
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <lcdFillRect+0xb4>)
 8000b90:	885a      	ldrh	r2, [r3, #2]
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8000b9a:	88bb      	ldrh	r3, [r7, #4]
 8000b9c:	81fb      	strh	r3, [r7, #14]
 8000b9e:	e00e      	b.n	8000bbe <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8000ba0:	88f8      	ldrh	r0, [r7, #6]
 8000ba2:	88fa      	ldrh	r2, [r7, #6]
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b299      	uxth	r1, r3
 8000baa:	89fa      	ldrh	r2, [r7, #14]
 8000bac:	8c3b      	ldrh	r3, [r7, #32]
 8000bae:	f7ff ff75 	bl	8000a9c <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8000bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	81fb      	strh	r3, [r7, #14]
 8000bbe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000bc2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bca:	440b      	add	r3, r1
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dde7      	ble.n	8000ba0 <lcdFillRect+0x78>
 8000bd0:	e000      	b.n	8000bd4 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8000bd2:	bf00      	nop
	}
}
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd90      	pop	{r4, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000000c 	.word	0x2000000c

08000be0 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4604      	mov	r4, r0
 8000be8:	4608      	mov	r0, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	4623      	mov	r3, r4
 8000bf0:	80fb      	strh	r3, [r7, #6]
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80bb      	strh	r3, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	70fb      	strb	r3, [r7, #3]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c02:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <lcdDrawChar+0x14c>)
 8000c04:	8812      	ldrh	r2, [r2, #0]
 8000c06:	4293      	cmp	r3, r2
 8000c08:	f280 808c 	bge.w	8000d24 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000c0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c10:	4a46      	ldr	r2, [pc, #280]	; (8000d2c <lcdDrawChar+0x14c>)
 8000c12:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000c14:	4293      	cmp	r3, r2
 8000c16:	f280 8085 	bge.w	8000d24 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1e:	4a44      	ldr	r2, [pc, #272]	; (8000d30 <lcdDrawChar+0x150>)
 8000c20:	6892      	ldr	r2, [r2, #8]
 8000c22:	8892      	ldrh	r2, [r2, #4]
 8000c24:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db7c      	blt.n	8000d24 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000c2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c2e:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <lcdDrawChar+0x150>)
 8000c30:	6892      	ldr	r2, [r2, #8]
 8000c32:	88d2      	ldrh	r2, [r2, #6]
 8000c34:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db74      	blt.n	8000d24 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000c3a:	4b3d      	ldr	r3, [pc, #244]	; (8000d30 <lcdDrawChar+0x150>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	88db      	ldrh	r3, [r3, #6]
 8000c40:	08db      	lsrs	r3, r3, #3
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73bb      	strb	r3, [r7, #14]
 8000c4e:	e061      	b.n	8000d14 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	733b      	strb	r3, [r7, #12]
 8000c54:	e055      	b.n	8000d02 <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000c56:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <lcdDrawChar+0x150>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	78fa      	ldrb	r2, [r7, #3]
 8000c5e:	3a20      	subs	r2, #32
 8000c60:	4933      	ldr	r1, [pc, #204]	; (8000d30 <lcdDrawChar+0x150>)
 8000c62:	6889      	ldr	r1, [r1, #8]
 8000c64:	88c9      	ldrh	r1, [r1, #6]
 8000c66:	fb01 f202 	mul.w	r2, r1, r2
 8000c6a:	7ab9      	ldrb	r1, [r7, #10]
 8000c6c:	fb01 f102 	mul.w	r1, r1, r2
 8000c70:	7bba      	ldrb	r2, [r7, #14]
 8000c72:	7ab8      	ldrb	r0, [r7, #10]
 8000c74:	fb00 f202 	mul.w	r2, r0, r2
 8000c78:	4411      	add	r1, r2
 8000c7a:	7b3a      	ldrb	r2, [r7, #12]
 8000c7c:	440a      	add	r2, r1
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	72fb      	strb	r3, [r7, #11]
 8000c88:	e032      	b.n	8000cf0 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8000c8a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	da12      	bge.n	8000cb8 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000c92:	7afb      	ldrb	r3, [r7, #11]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b298      	uxth	r0, r3
 8000ca4:	7bbb      	ldrb	r3, [r7, #14]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	883a      	ldrh	r2, [r7, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f7ff fecf 	bl	8000a54 <lcdDrawPixel>
 8000cb6:	e015      	b.n	8000ce4 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8000cb8:	8c3a      	ldrh	r2, [r7, #32]
 8000cba:	883b      	ldrh	r3, [r7, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d011      	beq.n	8000ce4 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4413      	add	r3, r2
 8000cd0:	b298      	uxth	r0, r3
 8000cd2:	7bbb      	ldrb	r3, [r7, #14]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	88bb      	ldrh	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	8c3a      	ldrh	r2, [r7, #32]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff feb8 	bl	8000a54 <lcdDrawPixel>
				}
				line <<= 1;
 8000ce4:	7b7b      	ldrb	r3, [r7, #13]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000cea:	7afb      	ldrb	r3, [r7, #11]
 8000cec:	3301      	adds	r3, #1
 8000cee:	72fb      	strb	r3, [r7, #11]
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d9c9      	bls.n	8000c8a <lcdDrawChar+0xaa>
			}

			xP += 8;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3308      	adds	r3, #8
 8000cfa:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000cfc:	7b3b      	ldrb	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	733b      	strb	r3, [r7, #12]
 8000d02:	7b3a      	ldrb	r2, [r7, #12]
 8000d04:	7abb      	ldrb	r3, [r7, #10]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3a5      	bcc.n	8000c56 <lcdDrawChar+0x76>
		}

		xP = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000d0e:	7bbb      	ldrb	r3, [r7, #14]
 8000d10:	3301      	adds	r3, #1
 8000d12:	73bb      	strb	r3, [r7, #14]
 8000d14:	7bbb      	ldrb	r3, [r7, #14]
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <lcdDrawChar+0x150>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	88db      	ldrh	r3, [r3, #6]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d396      	bcc.n	8000c50 <lcdDrawChar+0x70>
 8000d22:	e000      	b.n	8000d26 <lcdDrawChar+0x146>
		return;
 8000d24:	bf00      	nop
	}
}
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	2000000c 	.word	0x2000000c
 8000d30:	20000014 	.word	0x20000014

08000d34 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8000d34:	b40f      	push	{r0, r1, r2, r3}
 8000d36:	b590      	push	{r4, r7, lr}
 8000d38:	b085      	sub	sp, #20
 8000d3a:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	69b9      	ldr	r1, [r7, #24]
 8000d46:	483d      	ldr	r0, [pc, #244]	; (8000e3c <lcdPrintf+0x108>)
 8000d48:	f002 f9f0 	bl	800312c <vsiprintf>
	va_end(lst);

	p = buf;
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <lcdPrintf+0x108>)
 8000d4e:	607b      	str	r3, [r7, #4]
	while (*p)
 8000d50:	e067      	b.n	8000e22 <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b0a      	cmp	r3, #10
 8000d58:	d10c      	bne.n	8000d74 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <lcdPrintf+0x10c>)
 8000d5c:	885a      	ldrh	r2, [r3, #2]
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <lcdPrintf+0x110>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	88db      	ldrh	r3, [r3, #6]
 8000d64:	4413      	add	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <lcdPrintf+0x10c>)
 8000d6a:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8000d6c:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <lcdPrintf+0x10c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	801a      	strh	r2, [r3, #0]
 8000d72:	e04a      	b.n	8000e0a <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b0d      	cmp	r3, #13
 8000d7a:	d046      	beq.n	8000e0a <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	d10b      	bne.n	8000d9c <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000d84:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <lcdPrintf+0x10c>)
 8000d86:	881a      	ldrh	r2, [r3, #0]
 8000d88:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <lcdPrintf+0x110>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	889b      	ldrh	r3, [r3, #4]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	4413      	add	r3, r2
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <lcdPrintf+0x10c>)
 8000d98:	801a      	strh	r2, [r3, #0]
 8000d9a:	e036      	b.n	8000e0a <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <lcdPrintf+0x10c>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	b218      	sxth	r0, r3
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <lcdPrintf+0x10c>)
 8000da4:	885b      	ldrh	r3, [r3, #2]
 8000da6:	b219      	sxth	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <lcdPrintf+0x110>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	b29c      	uxth	r4, r3
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <lcdPrintf+0x110>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	4623      	mov	r3, r4
 8000dbc:	f7ff ff10 	bl	8000be0 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <lcdPrintf+0x10c>)
 8000dc2:	881a      	ldrh	r2, [r3, #0]
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <lcdPrintf+0x110>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	889b      	ldrh	r3, [r3, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <lcdPrintf+0x10c>)
 8000dd0:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <lcdPrintf+0x110>)
 8000dd4:	7b1b      	ldrb	r3, [r3, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d017      	beq.n	8000e0a <lcdPrintf+0xd6>
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <lcdPrintf+0x10c>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <lcdPrintf+0x114>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <lcdPrintf+0x110>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	889b      	ldrh	r3, [r3, #4]
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	429a      	cmp	r2, r3
 8000df0:	dd0b      	ble.n	8000e0a <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <lcdPrintf+0x10c>)
 8000df4:	885a      	ldrh	r2, [r3, #2]
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <lcdPrintf+0x110>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	88db      	ldrh	r3, [r3, #6]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <lcdPrintf+0x10c>)
 8000e02:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <lcdPrintf+0x10c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <lcdPrintf+0x10c>)
 8000e12:	885a      	ldrh	r2, [r3, #2]
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <lcdPrintf+0x114>)
 8000e16:	885b      	ldrh	r3, [r3, #2]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d302      	bcc.n	8000e22 <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <lcdPrintf+0x10c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	805a      	strh	r2, [r3, #2]
	while (*p)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d193      	bne.n	8000d52 <lcdPrintf+0x1e>
		}
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e36:	b004      	add	sp, #16
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	200000d4 	.word	0x200000d4
 8000e40:	200000cc 	.word	0x200000cc
 8000e44:	20000014 	.word	0x20000014
 8000e48:	2000000c 	.word	0x2000000c

08000e4c <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	460a      	mov	r2, r1
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <lcdSetTextColor+0x28>)
 8000e60:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8000e62:	88bb      	ldrh	r3, [r7, #4]
 8000e64:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <lcdSetTextColor+0x28>)
 8000e66:	6053      	str	r3, [r2, #4]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000014 	.word	0x20000014

08000e78 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	4611      	mov	r1, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4623      	mov	r3, r4
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
 8000e92:	4613      	mov	r3, r2
 8000e94:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8000e96:	202a      	movs	r0, #42	; 0x2a
 8000e98:	f000 f850 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f85a 	bl	8000f5c <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f854 	bl	8000f5c <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	0a1b      	lsrs	r3, r3, #8
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f84e 	bl	8000f5c <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8000ec0:	887b      	ldrh	r3, [r7, #2]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f848 	bl	8000f5c <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8000ecc:	202b      	movs	r0, #43	; 0x2b
 8000ece:	f000 f835 	bl	8000f3c <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f83f 	bl	8000f5c <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8000ede:	88bb      	ldrh	r3, [r7, #4]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f839 	bl	8000f5c <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8000eea:	883b      	ldrh	r3, [r7, #0]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f833 	bl	8000f5c <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8000ef6:	883b      	ldrh	r3, [r7, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f82d 	bl	8000f5c <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000f02:	202c      	movs	r0, #44	; 0x2c
 8000f04:	f000 f81a 	bl	8000f3c <lcdWriteCommand>
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd90      	pop	{r4, r7, pc}

08000f10 <lcdBacklightOn>:
{
	LCD_BL_OFF();
}

void lcdBacklightOn(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	LCD_BL_ON();
 8000f14:	2201      	movs	r2, #1
 8000f16:	2101      	movs	r1, #1
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <lcdBacklightOn+0x14>)
 8000f1a:	f000 fea0 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010c00 	.word	0x40010c00

08000f28 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 f805 	bl	8000f3c <lcdWriteCommand>
	HAL_Delay(50);
 8000f32:	2032      	movs	r0, #50	; 0x32
 8000f34:	f000 fbb6 	bl	80016a4 <HAL_Delay>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8000f46:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f4a:	79fa      	ldrb	r2, [r7, #7]
 8000f4c:	b292      	uxth	r2, r2
 8000f4e:	801a      	strh	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
	...

08000f5c <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <lcdWriteData+0x1c>)
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	8013      	strh	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	60020000 	.word	0x60020000

08000f7c <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8000f7c:	b490      	push	{r4, r7}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4604      	mov	r4, r0
 8000f84:	4608      	mov	r0, r1
 8000f86:	4611      	mov	r1, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	717b      	strb	r3, [r7, #5]
 8000f96:	4613      	mov	r3, r2
 8000f98:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8000f9e:	7f3b      	ldrb	r3, [r7, #28]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <lcdBuildMemoryAccessControlConfig+0x30>
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8000fac:	7e3b      	ldrb	r3, [r7, #24]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <lcdBuildMemoryAccessControlConfig+0x3e>
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8000fba:	793b      	ldrb	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <lcdBuildMemoryAccessControlConfig+0x4c>
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8000fc8:	797b      	ldrb	r3, [r7, #5]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <lcdBuildMemoryAccessControlConfig+0x5a>
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <lcdBuildMemoryAccessControlConfig+0x68>
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe2:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <lcdBuildMemoryAccessControlConfig+0x76>
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff0:	73fb      	strb	r3, [r7, #15]
  return value;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc90      	pop	{r4, r7}
 8000ffc:	4770      	bx	lr
	...

08001000 <ledInit>:




bool ledInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
	bool ret = true;
 8001006:	2301      	movs	r3, #1
 8001008:	74fb      	strb	r3, [r7, #19]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2302      	movs	r3, #2
 8001020:	60fb      	str	r3, [r7, #12]


	  for (int i =0; i<LED_MAX_CH; i++)
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e016      	b.n	8001056 <ledInit+0x56>
	  {

		  GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <ledInit+0x68>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4413      	add	r3, r2
 8001030:	889b      	ldrh	r3, [r3, #4]
 8001032:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <ledInit+0x68>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800103c:	463a      	mov	r2, r7
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fc61 	bl	8001908 <HAL_GPIO_Init>

		  ledOff(i);
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f80e 	bl	800106c <ledOff>
	  for (int i =0; i<LED_MAX_CH; i++)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b01      	cmp	r3, #1
 800105a:	dde5      	ble.n	8001028 <ledInit+0x28>

	  }
	return ret;
 800105c:	7cfb      	ldrb	r3, [r7, #19]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000024 	.word	0x20000024

0800106c <ledOff>:
}



void ledOff(uint8_t ch)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d811      	bhi.n	80010a0 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <ledOff+0x3c>)
 8001080:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <ledOff+0x3c>)
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	8899      	ldrh	r1, [r3, #4]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <ledOff+0x3c>)
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	79db      	ldrb	r3, [r3, #7]
 8001098:	461a      	mov	r2, r3
 800109a:	f000 fde0 	bl	8001c5e <HAL_GPIO_WritePin>
 800109e:	e000      	b.n	80010a2 <ledOff+0x36>
	if (ch >= LED_MAX_CH) return;
 80010a0:	bf00      	nop

}
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000024 	.word	0x20000024

080010ac <ledToggle>:



void ledToggle(uint8_t ch)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d80d      	bhi.n	80010d8 <ledToggle+0x2c>
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <ledToggle+0x34>)
 80010c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4906      	ldr	r1, [pc, #24]	; (80010e0 <ledToggle+0x34>)
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	889b      	ldrh	r3, [r3, #4]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4610      	mov	r0, r2
 80010d2:	f000 fddc 	bl	8001c8e <HAL_GPIO_TogglePin>
 80010d6:	e000      	b.n	80010da <ledToggle+0x2e>
	if (ch >= LED_MAX_CH) return;
 80010d8:	bf00      	nop

}
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000024 	.word	0x20000024

080010e4 <showMenu>:
#endif /* LCD_TOUCH_BOARD_LED_TEST */
}


void showMenu(uint8_t selectedIndex)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
#ifdef LCD_TOUCH_BOARD_LED_TEST
	lcdSetTextFont(&Font20);
#endif /* LCD_TOUCH_BOARD_LED_TEST */


	if (selectedIndex > 0 && selectedIndex <= MENU_ITEMS)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d06f      	beq.n	80011d4 <showMenu+0xf0>
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d16c      	bne.n	80011d4 <showMenu+0xf0>
	{
		if (activedMenuItem > 0 && activedMenuItem <= MENU_ITEMS)
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <showMenu+0x170>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d036      	beq.n	8001170 <showMenu+0x8c>
 8001102:	4b54      	ldr	r3, [pc, #336]	; (8001254 <showMenu+0x170>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d132      	bne.n	8001170 <showMenu+0x8c>
		{
			int ti=activedMenuItem-1;
 800110a:	4b52      	ldr	r3, [pc, #328]	; (8001254 <showMenu+0x170>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	3b01      	subs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
			lcdSetTextColor(COLOR_WHITE, menuBGColor[ti]);
 8001112:	4a51      	ldr	r2, [pc, #324]	; (8001258 <showMenu+0x174>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800111a:	4619      	mov	r1, r3
 800111c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001120:	f7ff fe94 	bl	8000e4c <lcdSetTextColor>
			lcdFillRect(menuColordinate[ti][0], menuColordinate[ti][1], menuColordinate[ti][2], menuColordinate[ti][3], menuBGColor[ti]);
 8001124:	4a4d      	ldr	r2, [pc, #308]	; (800125c <showMenu+0x178>)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800112c:	b218      	sxth	r0, r3
 800112e:	4a4b      	ldr	r2, [pc, #300]	; (800125c <showMenu+0x178>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	885b      	ldrh	r3, [r3, #2]
 8001138:	b219      	sxth	r1, r3
 800113a:	4a48      	ldr	r2, [pc, #288]	; (800125c <showMenu+0x178>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	889b      	ldrh	r3, [r3, #4]
 8001144:	b21a      	sxth	r2, r3
 8001146:	4c45      	ldr	r4, [pc, #276]	; (800125c <showMenu+0x178>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4423      	add	r3, r4
 800114e:	88db      	ldrh	r3, [r3, #6]
 8001150:	b21c      	sxth	r4, r3
 8001152:	4d41      	ldr	r5, [pc, #260]	; (8001258 <showMenu+0x174>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	4623      	mov	r3, r4
 800115e:	f7ff fce3 	bl	8000b28 <lcdFillRect>

#ifdef LCD_TOUCH_BOARD_LED_TEST
			lcdSetCursor(menuColordinate[ti][0]+13, menuColordinate[ti][1]+40); //텍스트 위치 커서 조정
#endif /* LCD_TOUCH_BOARD_LED_TEST */

			lcdPrintf(menuText[ti]);
 8001162:	4a3f      	ldr	r2, [pc, #252]	; (8001260 <showMenu+0x17c>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fde2 	bl	8000d34 <lcdPrintf>
		}

		activedMenuItem=selectedIndex;
 8001170:	4a38      	ldr	r2, [pc, #224]	; (8001254 <showMenu+0x170>)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	7013      	strb	r3, [r2, #0]
		selectedIndex--;
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	3b01      	subs	r3, #1
 800117a:	71fb      	strb	r3, [r7, #7]
		lcdSetTextColor(COLOR_WHITE, selmenuBGColor);
 800117c:	4b39      	ldr	r3, [pc, #228]	; (8001264 <showMenu+0x180>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001186:	f7ff fe61 	bl	8000e4c <lcdSetTextColor>
		lcdFillRect(menuColordinate[selectedIndex][0], menuColordinate[selectedIndex][1], menuColordinate[selectedIndex][2], menuColordinate[selectedIndex][3], selmenuBGColor);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4a33      	ldr	r2, [pc, #204]	; (800125c <showMenu+0x178>)
 800118e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8001192:	b218      	sxth	r0, r3
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4a31      	ldr	r2, [pc, #196]	; (800125c <showMenu+0x178>)
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	885b      	ldrh	r3, [r3, #2]
 800119e:	b219      	sxth	r1, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a2e      	ldr	r2, [pc, #184]	; (800125c <showMenu+0x178>)
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	4c2b      	ldr	r4, [pc, #172]	; (800125c <showMenu+0x178>)
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4423      	add	r3, r4
 80011b4:	88db      	ldrh	r3, [r3, #6]
 80011b6:	b21c      	sxth	r4, r3
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <showMenu+0x180>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	4623      	mov	r3, r4
 80011c0:	f7ff fcb2 	bl	8000b28 <lcdFillRect>

#ifdef LCD_TOUCH_BOARD_LED_TEST
		lcdSetCursor(menuColordinate[selectedIndex][0]+13, menuColordinate[selectedIndex][1]+40); //텍스트 위치 커서 조정
#endif /* LCD_TOUCH_BOARD_LED_TEST */

		lcdPrintf(menuText[selectedIndex]);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4a26      	ldr	r2, [pc, #152]	; (8001260 <showMenu+0x17c>)
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fdb1 	bl	8000d34 <lcdPrintf>
 80011d2:	e03b      	b.n	800124c <showMenu+0x168>
	{
#ifdef LCD_TOUCH_MENU_TEST
		hideMenu();
#endif /* LCD_TOUCH_MENU_TEST */

		activedMenuItem=0;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <showMenu+0x170>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<MENU_ITEMS;i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e031      	b.n	8001244 <showMenu+0x160>
		{
			lcdSetTextColor(COLOR_WHITE, menuBGColor[i]);
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <showMenu+0x174>)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011ee:	f7ff fe2d 	bl	8000e4c <lcdSetTextColor>
			lcdFillRect(menuColordinate[i][0], menuColordinate[i][1], menuColordinate[i][2], menuColordinate[i][3], menuBGColor[i]);
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <showMenu+0x178>)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80011fa:	b218      	sxth	r0, r3
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <showMenu+0x178>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	885b      	ldrh	r3, [r3, #2]
 8001206:	b219      	sxth	r1, r3
 8001208:	4a14      	ldr	r2, [pc, #80]	; (800125c <showMenu+0x178>)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4413      	add	r3, r2
 8001210:	889b      	ldrh	r3, [r3, #4]
 8001212:	b21a      	sxth	r2, r3
 8001214:	4c11      	ldr	r4, [pc, #68]	; (800125c <showMenu+0x178>)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4423      	add	r3, r4
 800121c:	88db      	ldrh	r3, [r3, #6]
 800121e:	b21c      	sxth	r4, r3
 8001220:	4d0d      	ldr	r5, [pc, #52]	; (8001258 <showMenu+0x174>)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4623      	mov	r3, r4
 800122c:	f7ff fc7c 	bl	8000b28 <lcdFillRect>

#ifdef LCD_TOUCH_BOARD_LED_TEST
			lcdSetCursor(menuColordinate[i][0]+13, menuColordinate[i][1]+40); //텍스트 위치 커서 조정
#endif /* LCD_TOUCH_BOARD_LED_TEST */

			lcdPrintf(menuText[i]);
 8001230:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <showMenu+0x17c>)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd7b 	bl	8000d34 <lcdPrintf>
		for (int i=0;i<MENU_ITEMS;i++)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dbca      	blt.n	80011e0 <showMenu+0xfc>
		}
	}
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bdb0      	pop	{r4, r5, r7, pc}
 8001254:	20000239 	.word	0x20000239
 8001258:	200001d4 	.word	0x200001d4
 800125c:	200001d4 	.word	0x200001d4
 8001260:	200001d4 	.word	0x200001d4
 8001264:	200001d4 	.word	0x200001d4

08001268 <getTouchMenItem>:


uint8_t getTouchMenItem(uint16_t x, uint16_t y)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	80fb      	strh	r3, [r7, #6]
 8001274:	4613      	mov	r3, r2
 8001276:	80bb      	strh	r3, [r7, #4]
	uint8_t ret = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<MENU_ITEMS;i++)
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	e033      	b.n	80012ea <getTouchMenItem+0x82>
	{     //                       x                            x                     w
		if (x > menuColordinate[i][0] && x < menuColordinate[i][0] + menuColordinate[i][2] &&
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <getTouchMenItem+0x94>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	429a      	cmp	r2, r3
 800128e:	d929      	bls.n	80012e4 <getTouchMenItem+0x7c>
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	491a      	ldr	r1, [pc, #104]	; (80012fc <getTouchMenItem+0x94>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800129a:	4618      	mov	r0, r3
 800129c:	4917      	ldr	r1, [pc, #92]	; (80012fc <getTouchMenItem+0x94>)
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	4403      	add	r3, r0
 80012a8:	429a      	cmp	r2, r3
 80012aa:	da1b      	bge.n	80012e4 <getTouchMenItem+0x7c>
				y > menuColordinate[i][1] && y < menuColordinate[i][1] + menuColordinate[i][3])
 80012ac:	4a13      	ldr	r2, [pc, #76]	; (80012fc <getTouchMenItem+0x94>)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4413      	add	r3, r2
 80012b4:	885b      	ldrh	r3, [r3, #2]
		if (x > menuColordinate[i][0] && x < menuColordinate[i][0] + menuColordinate[i][2] &&
 80012b6:	88ba      	ldrh	r2, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d913      	bls.n	80012e4 <getTouchMenItem+0x7c>
				y > menuColordinate[i][1] && y < menuColordinate[i][1] + menuColordinate[i][3])
 80012bc:	88ba      	ldrh	r2, [r7, #4]
 80012be:	490f      	ldr	r1, [pc, #60]	; (80012fc <getTouchMenItem+0x94>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	885b      	ldrh	r3, [r3, #2]
 80012c8:	4618      	mov	r0, r3
 80012ca:	490c      	ldr	r1, [pc, #48]	; (80012fc <getTouchMenItem+0x94>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	88db      	ldrh	r3, [r3, #6]
 80012d4:	4403      	add	r3, r0
 80012d6:	429a      	cmp	r2, r3
 80012d8:	da04      	bge.n	80012e4 <getTouchMenItem+0x7c>
		 //                            y                            y                     h
		{
			ret = i+1;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
			break;
 80012e2:	e005      	b.n	80012f0 <getTouchMenItem+0x88>
	for (int i=0;i<MENU_ITEMS;i++)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3301      	adds	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dbc8      	blt.n	8001282 <getTouchMenItem+0x1a>
		}
	}
	return ret;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	200001d4 	.word	0x200001d4

08001300 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI2_Init+0x64>)
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <MX_SPI2_Init+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_SPI2_Init+0x64>)
 800130c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001310:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI2_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI2_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI2_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI2_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_SPI2_Init+0x64>)
 800132c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001330:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI2_Init+0x64>)
 8001334:	2228      	movs	r2, #40	; 0x28
 8001336:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_SPI2_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI2_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_SPI2_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI2_Init+0x64>)
 800134c:	220a      	movs	r2, #10
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_SPI2_Init+0x64>)
 8001352:	f001 f8b5 	bl	80024c0 <HAL_SPI_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800135c:	f7ff f880 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200001e0 	.word	0x200001e0
 8001368:	40003800 	.word	0x40003800

0800136c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <HAL_SPI_MspInit+0x8c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d131      	bne.n	80013f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_SPI_MspInit+0x90>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <HAL_SPI_MspInit+0x90>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001396:	61d3      	str	r3, [r2, #28]
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_SPI_MspInit+0x90>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_SPI_MspInit+0x90>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <HAL_SPI_MspInit+0x90>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_SPI_MspInit+0x90>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80013bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80013c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <HAL_SPI_MspInit+0x94>)
 80013d2:	f000 fa99 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4619      	mov	r1, r3
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_SPI_MspInit+0x94>)
 80013ec:	f000 fa8c 	bl	8001908 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40003800 	.word	0x40003800
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010c00 	.word	0x40010c00

08001404 <XPT2046_TouchSelect>:
uint16_t cRawY_min = XPT2046_MIN_RAW_Y;
uint16_t cRawY_max = XPT2046_MAX_RAW_Y;


static void XPT2046_TouchSelect()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140e:	4802      	ldr	r0, [pc, #8]	; (8001418 <XPT2046_TouchSelect+0x14>)
 8001410:	f000 fc25 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40010c00 	.word	0x40010c00

0800141c <XPT2046_TouchUnselect>:

void XPT2046_TouchUnselect()
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001426:	4802      	ldr	r0, [pc, #8]	; (8001430 <XPT2046_TouchUnselect+0x14>)
 8001428:	f000 fc19 	bl	8001c5e <HAL_GPIO_WritePin>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010c00 	.word	0x40010c00

08001434 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 8001438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <XPT2046_TouchPressed+0x20>)
 800143e:	f000 fbf7 	bl	8001c30 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40010800 	.word	0x40010800

08001458 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	MX_SPI2_Init();
 800145c:	f7ff ff50 	bl	8001300 <MX_SPI2_Init>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af02      	add	r7, sp, #8
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };


    XPT2046_TouchSelect();
 800146e:	f7ff ffc9 	bl	8001404 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 800147e:	2300      	movs	r3, #0
 8001480:	77bb      	strb	r3, [r7, #30]
 8001482:	e03f      	b.n	8001504 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8001484:	f7ff ffd6 	bl	8001434 <XPT2046_TouchPressed>
 8001488:	4603      	mov	r3, r0
 800148a:	f083 0301 	eor.w	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d13b      	bne.n	800150c <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8001494:	7ffb      	ldrb	r3, [r7, #31]
 8001496:	3301      	adds	r3, #1
 8001498:	77fb      	strb	r3, [r7, #31]

        uint8_t y_raw[2];
        uint8_t x_raw[2];


        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	2201      	movs	r2, #1
 80014a0:	4943      	ldr	r1, [pc, #268]	; (80015b0 <XPT2046_TouchGetCoordinates+0x14c>)
 80014a2:	4844      	ldr	r0, [pc, #272]	; (80015b4 <XPT2046_TouchGetCoordinates+0x150>)
 80014a4:	f001 f890 	bl	80025c8 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 80014a8:	f107 0210 	add.w	r2, r7, #16
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2302      	movs	r3, #2
 80014b4:	4940      	ldr	r1, [pc, #256]	; (80015b8 <XPT2046_TouchGetCoordinates+0x154>)
 80014b6:	483f      	ldr	r0, [pc, #252]	; (80015b4 <XPT2046_TouchGetCoordinates+0x150>)
 80014b8:	f001 f9c2 	bl	8002840 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	2201      	movs	r2, #1
 80014c2:	493e      	ldr	r1, [pc, #248]	; (80015bc <XPT2046_TouchGetCoordinates+0x158>)
 80014c4:	483b      	ldr	r0, [pc, #236]	; (80015b4 <XPT2046_TouchGetCoordinates+0x150>)
 80014c6:	f001 f87f 	bl	80025c8 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 80014ca:	f107 020c 	add.w	r2, r7, #12
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2302      	movs	r3, #2
 80014d6:	4938      	ldr	r1, [pc, #224]	; (80015b8 <XPT2046_TouchGetCoordinates+0x154>)
 80014d8:	4836      	ldr	r0, [pc, #216]	; (80015b4 <XPT2046_TouchGetCoordinates+0x150>)
 80014da:	f001 f9b1 	bl	8002840 <HAL_SPI_TransmitReceive>


        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 80014de:	7b3b      	ldrb	r3, [r7, #12]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	7b7a      	ldrb	r2, [r7, #13]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	461a      	mov	r2, r3
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	4413      	add	r3, r2
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 80014ee:	7c3b      	ldrb	r3, [r7, #16]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	7c7a      	ldrb	r2, [r7, #17]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	461a      	mov	r2, r3
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	4413      	add	r3, r2
 80014fc:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 80014fe:	7fbb      	ldrb	r3, [r7, #30]
 8001500:	3301      	adds	r3, #1
 8001502:	77bb      	strb	r3, [r7, #30]
 8001504:	7fbb      	ldrb	r3, [r7, #30]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	d9bc      	bls.n	8001484 <XPT2046_TouchGetCoordinates+0x20>
 800150a:	e000      	b.n	800150e <XPT2046_TouchGetCoordinates+0xaa>
            break;
 800150c:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800150e:	f7ff ff85 	bl	800141c <XPT2046_TouchUnselect>

    if(nsamples < 16)
 8001512:	7ffb      	ldrb	r3, [r7, #31]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d801      	bhi.n	800151c <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8001518:	2300      	movs	r3, #0
 800151a:	e045      	b.n	80015a8 <XPT2046_TouchGetCoordinates+0x144>

    uint32_t raw_x = (avg_x / 16);
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001528:	d202      	bcs.n	8001530 <XPT2046_TouchGetCoordinates+0xcc>
 800152a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800152e:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f247 5230 	movw	r2, #30000	; 0x7530
 8001536:	4293      	cmp	r3, r2
 8001538:	d902      	bls.n	8001540 <XPT2046_TouchGetCoordinates+0xdc>
 800153a:	f247 5330 	movw	r3, #30000	; 0x7530
 800153e:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f240 52db 	movw	r2, #1499	; 0x5db
 800154c:	4293      	cmp	r3, r2
 800154e:	d802      	bhi.n	8001556 <XPT2046_TouchGetCoordinates+0xf2>
 8001550:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001554:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f247 1248 	movw	r2, #29000	; 0x7148
 800155c:	4293      	cmp	r3, r2
 800155e:	d902      	bls.n	8001566 <XPT2046_TouchGetCoordinates+0x102>
 8001560:	f247 1348 	movw	r3, #29000	; 0x7148
 8001564:	617b      	str	r3, [r7, #20]

    // Uncomment this line to calibrate touchscreen:
    //printf("raw_x = %d, raw_y = %d\r\n", (int) raw_x, (int) raw_y);

    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4613      	mov	r3, r2
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	f5a3 23ea 	sub.w	r3, r3, #479232	; 0x75000
 8001574:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8001578:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <XPT2046_TouchGetCoordinates+0x15c>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0b9b      	lsrs	r3, r3, #14
 8001580:	b29a      	uxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	801a      	strh	r2, [r3, #0]
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	019b      	lsls	r3, r3, #6
 8001590:	f5a3 23ea 	sub.w	r3, r3, #479232	; 0x75000
 8001594:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <XPT2046_TouchGetCoordinates+0x160>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	0b9b      	lsrs	r3, r3, #14
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	801a      	strh	r2, [r3, #0]

    return true;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08003cb4 	.word	0x08003cb4
 80015b4:	200001e0 	.word	0x200001e0
 80015b8:	08003cb8 	.word	0x08003cb8
 80015bc:	08003cbc 	.word	0x08003cbc
 80015c0:	95cbec1b 	.word	0x95cbec1b
 80015c4:	98852841 	.word	0x98852841

080015c8 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	bspInit();
 80015cc:	f7fe fe7e 	bl	80002cc <bspInit>

	//TODO: HW 초기화 설정 (3)
//	MX_FSMC_Init();
//	MX_SPI2_Init();
	lcdInit();
 80015d0:	f7ff f8c2 	bl	8000758 <lcdInit>
	XPT2046_Init();
 80015d4:	f7ff ff40 	bl	8001458 <XPT2046_Init>
	ledInit();
 80015d8:	f7ff fd12 	bl	8001000 <ledInit>

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_Init+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_Init+0x28>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 f947 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f808 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7fe ff36 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f95f 	bl	80018ee <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 f927 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_InitTick+0x5c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000000 	.word	0x20000000
 8001664:	20000038 	.word	0x20000038
 8001668:	20000034 	.word	0x20000034

0800166c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x1c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_IncTick+0x20>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <HAL_IncTick+0x20>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	20000038 	.word	0x20000038
 800168c:	20000284 	.word	0x20000284

08001690 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_GetTick+0x10>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20000284 	.word	0x20000284

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff fff0 	bl	8001690 <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_Delay+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffe0 	bl	8001690 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000038 	.word	0x20000038

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4906      	ldr	r1, [pc, #24]	; (8001784 <__NVIC_EnableIRQ+0x34>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff90 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff2d 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff42 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff90 	bl	80017dc <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5f 	bl	8001788 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff35 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b08b      	sub	sp, #44	; 0x2c
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	e179      	b.n	8001c10 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800191c:	2201      	movs	r2, #1
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8168 	bne.w	8001c0a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4aa0      	ldr	r2, [pc, #640]	; (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d05e      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001944:	4a9e      	ldr	r2, [pc, #632]	; (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d875      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800194a:	4a9e      	ldr	r2, [pc, #632]	; (8001bc4 <HAL_GPIO_Init+0x2bc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d058      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001950:	4a9c      	ldr	r2, [pc, #624]	; (8001bc4 <HAL_GPIO_Init+0x2bc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d86f      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001956:	4a9c      	ldr	r2, [pc, #624]	; (8001bc8 <HAL_GPIO_Init+0x2c0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d052      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 800195c:	4a9a      	ldr	r2, [pc, #616]	; (8001bc8 <HAL_GPIO_Init+0x2c0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d869      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001962:	4a9a      	ldr	r2, [pc, #616]	; (8001bcc <HAL_GPIO_Init+0x2c4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d04c      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001968:	4a98      	ldr	r2, [pc, #608]	; (8001bcc <HAL_GPIO_Init+0x2c4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d863      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800196e:	4a98      	ldr	r2, [pc, #608]	; (8001bd0 <HAL_GPIO_Init+0x2c8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d046      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001974:	4a96      	ldr	r2, [pc, #600]	; (8001bd0 <HAL_GPIO_Init+0x2c8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d85d      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800197a:	2b12      	cmp	r3, #18
 800197c:	d82a      	bhi.n	80019d4 <HAL_GPIO_Init+0xcc>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d859      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001982:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <HAL_GPIO_Init+0x80>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	08001a03 	.word	0x08001a03
 800198c:	080019dd 	.word	0x080019dd
 8001990:	080019ef 	.word	0x080019ef
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a37 	.word	0x08001a37
 800199c:	08001a37 	.word	0x08001a37
 80019a0:	08001a37 	.word	0x08001a37
 80019a4:	08001a37 	.word	0x08001a37
 80019a8:	08001a37 	.word	0x08001a37
 80019ac:	08001a37 	.word	0x08001a37
 80019b0:	08001a37 	.word	0x08001a37
 80019b4:	08001a37 	.word	0x08001a37
 80019b8:	08001a37 	.word	0x08001a37
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a37 	.word	0x08001a37
 80019c4:	08001a37 	.word	0x08001a37
 80019c8:	08001a37 	.word	0x08001a37
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	080019f9 	.word	0x080019f9
 80019d4:	4a7f      	ldr	r2, [pc, #508]	; (8001bd4 <HAL_GPIO_Init+0x2cc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019da:	e02c      	b.n	8001a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e029      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	3304      	adds	r3, #4
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e024      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	3308      	adds	r3, #8
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e01f      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	330c      	adds	r3, #12
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e01a      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e013      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	611a      	str	r2, [r3, #16]
          break;
 8001a22:	e009      	b.n	8001a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a24:	2308      	movs	r3, #8
 8001a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	615a      	str	r2, [r3, #20]
          break;
 8001a2e:	e003      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          break;
 8001a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d801      	bhi.n	8001a42 <HAL_GPIO_Init+0x13a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_Init+0x13e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3304      	adds	r3, #4
 8001a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2bff      	cmp	r3, #255	; 0xff
 8001a4c:	d802      	bhi.n	8001a54 <HAL_GPIO_Init+0x14c>
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	e002      	b.n	8001a5a <HAL_GPIO_Init+0x152>
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	3b08      	subs	r3, #8
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	210f      	movs	r1, #15
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	6a39      	ldr	r1, [r7, #32]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80c1 	beq.w	8001c0a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a88:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	; (8001bdc <HAL_GPIO_Init+0x2d4>)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a46      	ldr	r2, [pc, #280]	; (8001be0 <HAL_GPIO_Init+0x2d8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d01f      	beq.n	8001b0c <HAL_GPIO_Init+0x204>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a45      	ldr	r2, [pc, #276]	; (8001be4 <HAL_GPIO_Init+0x2dc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d019      	beq.n	8001b08 <HAL_GPIO_Init+0x200>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a44      	ldr	r2, [pc, #272]	; (8001be8 <HAL_GPIO_Init+0x2e0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d013      	beq.n	8001b04 <HAL_GPIO_Init+0x1fc>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a43      	ldr	r2, [pc, #268]	; (8001bec <HAL_GPIO_Init+0x2e4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_GPIO_Init+0x1f8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a42      	ldr	r2, [pc, #264]	; (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x1f4>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a41      	ldr	r2, [pc, #260]	; (8001bf4 <HAL_GPIO_Init+0x2ec>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d101      	bne.n	8001af8 <HAL_GPIO_Init+0x1f0>
 8001af4:	2305      	movs	r3, #5
 8001af6:	e00a      	b.n	8001b0e <HAL_GPIO_Init+0x206>
 8001af8:	2306      	movs	r3, #6
 8001afa:	e008      	b.n	8001b0e <HAL_GPIO_Init+0x206>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e006      	b.n	8001b0e <HAL_GPIO_Init+0x206>
 8001b00:	2303      	movs	r3, #3
 8001b02:	e004      	b.n	8001b0e <HAL_GPIO_Init+0x206>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x206>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_GPIO_Init+0x206>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b10:	f002 0203 	and.w	r2, r2, #3
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	4093      	lsls	r3, r2
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b1e:	492f      	ldr	r1, [pc, #188]	; (8001bdc <HAL_GPIO_Init+0x2d4>)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b38:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	492e      	ldr	r1, [pc, #184]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	492a      	ldr	r1, [pc, #168]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4924      	ldr	r1, [pc, #144]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4920      	ldr	r1, [pc, #128]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	491a      	ldr	r1, [pc, #104]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d025      	beq.n	8001bfc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	4910      	ldr	r1, [pc, #64]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60cb      	str	r3, [r1, #12]
 8001bbc:	e025      	b.n	8001c0a <HAL_GPIO_Init+0x302>
 8001bbe:	bf00      	nop
 8001bc0:	10320000 	.word	0x10320000
 8001bc4:	10310000 	.word	0x10310000
 8001bc8:	10220000 	.word	0x10220000
 8001bcc:	10210000 	.word	0x10210000
 8001bd0:	10120000 	.word	0x10120000
 8001bd4:	10110000 	.word	0x10110000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40010800 	.word	0x40010800
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	40011000 	.word	0x40011000
 8001bec:	40011400 	.word	0x40011400
 8001bf0:	40011800 	.word	0x40011800
 8001bf4:	40011c00 	.word	0x40011c00
 8001bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_GPIO_Init+0x324>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4909      	ldr	r1, [pc, #36]	; (8001c2c <HAL_GPIO_Init+0x324>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f ae7e 	bne.w	800191c <HAL_GPIO_Init+0x14>
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	372c      	adds	r7, #44	; 0x2c
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e001      	b.n	8001c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c6e:	787b      	ldrb	r3, [r7, #1]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c74:	887a      	ldrh	r2, [r7, #2]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c7a:	e003      	b.n	8001c84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	041a      	lsls	r2, r3, #16
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	611a      	str	r2, [r3, #16]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca0:	887a      	ldrh	r2, [r7, #2]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	041a      	lsls	r2, r3, #16
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	400b      	ands	r3, r1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fab2 	bl	8000248 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e26c      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8087 	beq.w	8001e1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d10:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d00c      	beq.n	8001d36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d1c:	4b8f      	ldr	r3, [pc, #572]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d112      	bne.n	8001d4e <HAL_RCC_OscConfig+0x5e>
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d10b      	bne.n	8001d4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d36:	4b89      	ldr	r3, [pc, #548]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d06c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x12c>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d168      	bne.n	8001e1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e246      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x76>
 8001d58:	4b80      	ldr	r3, [pc, #512]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a7f      	ldr	r2, [pc, #508]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e02e      	b.n	8001dc4 <HAL_RCC_OscConfig+0xd4>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x98>
 8001d6e:	4b7b      	ldr	r3, [pc, #492]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7a      	ldr	r2, [pc, #488]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b78      	ldr	r3, [pc, #480]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a77      	ldr	r2, [pc, #476]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e01d      	b.n	8001dc4 <HAL_RCC_OscConfig+0xd4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0xbc>
 8001d92:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a71      	ldr	r2, [pc, #452]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0xd4>
 8001dac:	4b6b      	ldr	r3, [pc, #428]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a6a      	ldr	r2, [pc, #424]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b68      	ldr	r3, [pc, #416]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a67      	ldr	r2, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fc60 	bl	8001690 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fc5c 	bl	8001690 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1fa      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b5d      	ldr	r3, [pc, #372]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xe4>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fc4c 	bl	8001690 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fc48 	bl	8001690 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1e6      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x10c>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d063      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2a:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e36:	4b49      	ldr	r3, [pc, #292]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d11c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x18c>
 8001e42:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d116      	bne.n	8001e7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	4b43      	ldr	r3, [pc, #268]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x176>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e1ba      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4939      	ldr	r1, [pc, #228]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	e03a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e84:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fc01 	bl	8001690 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e92:	f7ff fbfd 	bl	8001690 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e19b      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4927      	ldr	r1, [pc, #156]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec6:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fbe0 	bl	8001690 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fbdc 	bl	8001690 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e17a      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d03a      	beq.n	8001f74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d019      	beq.n	8001f3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_RCC_OscConfig+0x274>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fbc0 	bl	8001690 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff fbbc 	bl	8001690 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e15a      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f32:	2001      	movs	r0, #1
 8001f34:	f000 faa6 	bl	8002484 <RCC_Delay>
 8001f38:	e01c      	b.n	8001f74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f40:	f7ff fba6 	bl	8001690 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f46:	e00f      	b.n	8001f68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff fba2 	bl	8001690 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d908      	bls.n	8001f68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e140      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	42420000 	.word	0x42420000
 8001f64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	4b9e      	ldr	r3, [pc, #632]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e9      	bne.n	8001f48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80a6 	beq.w	80020ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f86:	4b97      	ldr	r3, [pc, #604]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10d      	bne.n	8001fae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	4b94      	ldr	r3, [pc, #592]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a93      	ldr	r2, [pc, #588]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	61d3      	str	r3, [r2, #28]
 8001f9e:	4b91      	ldr	r3, [pc, #580]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001faa:	2301      	movs	r3, #1
 8001fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b8e      	ldr	r3, [pc, #568]	; (80021e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d118      	bne.n	8001fec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fba:	4b8b      	ldr	r3, [pc, #556]	; (80021e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a8a      	ldr	r2, [pc, #552]	; (80021e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fb63 	bl	8001690 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fce:	f7ff fb5f 	bl	8001690 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b64      	cmp	r3, #100	; 0x64
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0fd      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4b81      	ldr	r3, [pc, #516]	; (80021e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_OscConfig+0x312>
 8001ff4:	4b7b      	ldr	r3, [pc, #492]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4a7a      	ldr	r2, [pc, #488]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6213      	str	r3, [r2, #32]
 8002000:	e02d      	b.n	800205e <HAL_RCC_OscConfig+0x36e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x334>
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a75      	ldr	r2, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	4b73      	ldr	r3, [pc, #460]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a72      	ldr	r2, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	f023 0304 	bic.w	r3, r3, #4
 8002020:	6213      	str	r3, [r2, #32]
 8002022:	e01c      	b.n	800205e <HAL_RCC_OscConfig+0x36e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b05      	cmp	r3, #5
 800202a:	d10c      	bne.n	8002046 <HAL_RCC_OscConfig+0x356>
 800202c:	4b6d      	ldr	r3, [pc, #436]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a6c      	ldr	r2, [pc, #432]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a69      	ldr	r2, [pc, #420]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6213      	str	r3, [r2, #32]
 8002044:	e00b      	b.n	800205e <HAL_RCC_OscConfig+0x36e>
 8002046:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a66      	ldr	r2, [pc, #408]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	4b64      	ldr	r3, [pc, #400]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a63      	ldr	r2, [pc, #396]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d015      	beq.n	8002092 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff fb13 	bl	8001690 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff fb0f 	bl	8001690 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0ab      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002084:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ee      	beq.n	800206e <HAL_RCC_OscConfig+0x37e>
 8002090:	e014      	b.n	80020bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002092:	f7ff fafd 	bl	8001690 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7ff faf9 	bl	8001690 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e095      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b0:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ee      	bne.n	800209a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d105      	bne.n	80020ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c2:	4b48      	ldr	r3, [pc, #288]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4a47      	ldr	r2, [pc, #284]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8081 	beq.w	80021da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d8:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d061      	beq.n	80021a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d146      	bne.n	800217a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ec:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <HAL_RCC_OscConfig+0x4fc>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff facd 	bl	8001690 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fa:	f7ff fac9 	bl	8001690 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e067      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210c:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d108      	bne.n	8002134 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	492d      	ldr	r1, [pc, #180]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a19      	ldr	r1, [r3, #32]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	430b      	orrs	r3, r1
 8002146:	4927      	ldr	r1, [pc, #156]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_OscConfig+0x4fc>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7ff fa9d 	bl	8001690 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215a:	f7ff fa99 	bl	8001690 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e037      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x46a>
 8002178:	e02f      	b.n	80021da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_RCC_OscConfig+0x4fc>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fa86 	bl	8001690 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff fa82 	bl	8001690 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e020      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x498>
 80021a6:	e018      	b.n	80021da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e013      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000
 80021ec:	42420060 	.word	0x42420060

080021f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0d0      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d910      	bls.n	8002234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b67      	ldr	r3, [pc, #412]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4965      	ldr	r1, [pc, #404]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002256:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800226e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d040      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d115      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e073      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06b      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4936      	ldr	r1, [pc, #216]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7ff f9d6 	bl	8001690 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7ff f9d2 	bl	8001690 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e053      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d210      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4922      	ldr	r1, [pc, #136]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f821 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	490a      	ldr	r1, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	5ccb      	ldrb	r3, [r1, r3]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1cc>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1d0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f934 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08003830 	.word	0x08003830
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000034 	.word	0x20000034

080023c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b490      	push	{r4, r7}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023cc:	1d3c      	adds	r4, r7, #4
 80023ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023d4:	f240 2301 	movw	r3, #513	; 0x201
 80023d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d002      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x40>
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d003      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0x46>
 8002402:	e02d      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002406:	623b      	str	r3, [r7, #32]
      break;
 8002408:	e02d      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	0c9b      	lsrs	r3, r3, #18
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002416:	4413      	add	r3, r2
 8002418:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800241c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_RCC_GetSysClockFreq+0xb4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0c5b      	lsrs	r3, r3, #17
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002436:	4413      	add	r3, r2
 8002438:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800243c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	4a0e      	ldr	r2, [pc, #56]	; (800247c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002442:	fb02 f203 	mul.w	r2, r2, r3
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
 800244e:	e004      	b.n	800245a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002454:	fb02 f303 	mul.w	r3, r2, r3
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	623b      	str	r3, [r7, #32]
      break;
 800245e:	e002      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002462:	623b      	str	r3, [r7, #32]
      break;
 8002464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002466:	6a3b      	ldr	r3, [r7, #32]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bc90      	pop	{r4, r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	08003820 	.word	0x08003820
 8002478:	40021000 	.word	0x40021000
 800247c:	007a1200 	.word	0x007a1200
 8002480:	003d0900 	.word	0x003d0900

08002484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <RCC_Delay+0x34>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <RCC_Delay+0x38>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0a5b      	lsrs	r3, r3, #9
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024a0:	bf00      	nop
  }
  while (Delay --);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	60fa      	str	r2, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f9      	bne.n	80024a0 <RCC_Delay+0x1c>
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	20000000 	.word	0x20000000
 80024bc:	10624dd3 	.word	0x10624dd3

080024c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e076      	b.n	80025c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d108      	bne.n	80024ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e2:	d009      	beq.n	80024f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
 80024ea:	e005      	b.n	80024f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe ff2a 	bl	800136c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257c:	ea42 0103 	orr.w	r1, r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	0c1a      	lsrs	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f002 0204 	and.w	r2, r2, #4
 800259e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_SPI_Transmit+0x22>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e126      	b.n	8002838 <HAL_SPI_Transmit+0x270>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025f2:	f7ff f84d 	bl	8001690 <HAL_GetTick>
 80025f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d002      	beq.n	800260e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002608:	2302      	movs	r3, #2
 800260a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800260c:	e10b      	b.n	8002826 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_SPI_Transmit+0x52>
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800261e:	e102      	b.n	8002826 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2203      	movs	r2, #3
 8002624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	88fa      	ldrh	r2, [r7, #6]
 8002638:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	88fa      	ldrh	r2, [r7, #6]
 800263e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002666:	d10f      	bne.n	8002688 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002676:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002686:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d007      	beq.n	80026a6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ae:	d14b      	bne.n	8002748 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_SPI_Transmit+0xf6>
 80026b8:	8afb      	ldrh	r3, [r7, #22]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d13e      	bne.n	800273c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	881a      	ldrh	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	1c9a      	adds	r2, r3, #2
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026e2:	e02b      	b.n	800273c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d112      	bne.n	8002718 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	1c9a      	adds	r2, r3, #2
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	86da      	strh	r2, [r3, #54]	; 0x36
 8002716:	e011      	b.n	800273c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002718:	f7fe ffba 	bl	8001690 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d803      	bhi.n	8002730 <HAL_SPI_Transmit+0x168>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d102      	bne.n	8002736 <HAL_SPI_Transmit+0x16e>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	77fb      	strb	r3, [r7, #31]
          goto error;
 800273a:	e074      	b.n	8002826 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ce      	bne.n	80026e4 <HAL_SPI_Transmit+0x11c>
 8002746:	e04c      	b.n	80027e2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_SPI_Transmit+0x18e>
 8002750:	8afb      	ldrh	r3, [r7, #22]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d140      	bne.n	80027d8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	330c      	adds	r3, #12
 8002760:	7812      	ldrb	r2, [r2, #0]
 8002762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800277c:	e02c      	b.n	80027d8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d113      	bne.n	80027b4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80027b2:	e011      	b.n	80027d8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027b4:	f7fe ff6c 	bl	8001690 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d803      	bhi.n	80027cc <HAL_SPI_Transmit+0x204>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ca:	d102      	bne.n	80027d2 <HAL_SPI_Transmit+0x20a>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027d6:	e026      	b.n	8002826 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1cd      	bne.n	800277e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa54 	bl	8002c94 <SPI_EndRxTxTransaction>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	77fb      	strb	r3, [r7, #31]
 8002822:	e000      	b.n	8002826 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002824:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002836:	7ffb      	ldrb	r3, [r7, #31]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3720      	adds	r7, #32
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08c      	sub	sp, #48	; 0x30
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800284e:	2301      	movs	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_SPI_TransmitReceive+0x26>
 8002862:	2302      	movs	r3, #2
 8002864:	e18a      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x33c>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800286e:	f7fe ff0f 	bl	8001690 <HAL_GetTick>
 8002872:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800287a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800288c:	2b01      	cmp	r3, #1
 800288e:	d00f      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x70>
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002896:	d107      	bne.n	80028a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <HAL_SPI_TransmitReceive+0x68>
 80028a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d003      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
 80028aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028ae:	e15b      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0x82>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0x82>
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028c8:	e14e      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d003      	beq.n	80028de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2205      	movs	r2, #5
 80028da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	887a      	ldrh	r2, [r7, #2]
 80028ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	887a      	ldrh	r2, [r7, #2]
 8002906:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d007      	beq.n	8002932 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293a:	d178      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_SPI_TransmitReceive+0x10a>
 8002944:	8b7b      	ldrh	r3, [r7, #26]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d166      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	881a      	ldrh	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	1c9a      	adds	r2, r3, #2
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296e:	e053      	b.n	8002a18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d11b      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x176>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d016      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x176>
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	2b01      	cmp	r3, #1
 800298c:	d113      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1c9a      	adds	r2, r3, #2
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d119      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x1b8>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d014      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	b292      	uxth	r2, r2
 80029da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	1c9a      	adds	r2, r3, #2
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029f8:	f7fe fe4a 	bl	8001690 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d807      	bhi.n	8002a18 <HAL_SPI_TransmitReceive+0x1d8>
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d003      	beq.n	8002a18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a16:	e0a7      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1a6      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x130>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1a1      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x130>
 8002a2c:	e07c      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x1fc>
 8002a36:	8b7b      	ldrh	r3, [r7, #26]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d16b      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a62:	e057      	b.n	8002b14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d11c      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x26c>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d017      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x26c>
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d114      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	7812      	ldrb	r2, [r2, #0]
 8002a8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d119      	bne.n	8002aee <HAL_SPI_TransmitReceive+0x2ae>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d014      	beq.n	8002aee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aea:	2301      	movs	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aee:	f7fe fdcf 	bl	8001690 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d803      	bhi.n	8002b06 <HAL_SPI_TransmitReceive+0x2c6>
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d102      	bne.n	8002b0c <HAL_SPI_TransmitReceive+0x2cc>
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b12:	e029      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1a2      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x224>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d19d      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f8b1 	bl	8002c94 <SPI_EndRxTxTransaction>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b44:	e010      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10b      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	e000      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3730      	adds	r7, #48	; 0x30
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b94:	f7fe fd7c 	bl	8001690 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ba4:	f7fe fd74 	bl	8001690 <HAL_GetTick>
 8002ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	015b      	lsls	r3, r3, #5
 8002bb0:	0d1b      	lsrs	r3, r3, #20
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bba:	e054      	b.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d050      	beq.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bc4:	f7fe fd64 	bl	8001690 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d902      	bls.n	8002bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d13d      	bne.n	8002c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bf2:	d111      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfc:	d004      	beq.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c06:	d107      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c20:	d10f      	bne.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e017      	b.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d19b      	bne.n	8002bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000000 	.word	0x20000000

08002c94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff ff6a 	bl	8002b84 <SPI_WaitFlagStateUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e000      	b.n	8002cc8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_SRAM_Init+0x1c>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cea:	d101      	bne.n	8002cf0 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e038      	b.n	8002d62 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7fd fd1d 	bl	8000744 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3308      	adds	r3, #8
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f000 f829 	bl	8002d6c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	f000 f88b 	bl	8002e40 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6858      	ldr	r0, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	f000 f8b6 	bl	8002ea8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	6892      	ldr	r2, [r2, #8]
 8002d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	6892      	ldr	r2, [r2, #8]
 8002d50:	f041 0101 	orr.w	r1, r1, #1
 8002d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f023 0101 	bic.w	r1, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d102      	bne.n	8002d9c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002d96:	2340      	movs	r3, #64	; 0x40
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e001      	b.n	8002da0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002dac:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002db2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002db8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002dbe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002dc4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002dca:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002dd0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002dd6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002ddc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <FSMC_NORSRAM_Init+0xd0>)
 8002dfc:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e04:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002e0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	ea02 0103 	and.w	r1, r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4319      	orrs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	0008fb7f 	.word	0x0008fb7f

08002e40 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e56:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	041b      	lsls	r3, r3, #16
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	051b      	lsls	r3, r3, #20
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	3b02      	subs	r3, #2
 8002e86:	061b      	lsls	r3, r3, #24
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	3201      	adds	r2, #1
 8002e94:	4319      	orrs	r1, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ebc:	d11d      	bne.n	8002efa <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	6811      	ldr	r1, [r2, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	6852      	ldr	r2, [r2, #4]
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	4311      	orrs	r1, r2
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	0212      	lsls	r2, r2, #8
 8002edc:	4311      	orrs	r1, r2
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	6992      	ldr	r2, [r2, #24]
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	68d2      	ldr	r2, [r2, #12]
 8002ee8:	0412      	lsls	r2, r2, #16
 8002eea:	430a      	orrs	r2, r1
 8002eec:	ea43 0102 	orr.w	r1, r3, r2
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002ef8:	e005      	b.n	8002f06 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	cff00000 	.word	0xcff00000

08002f18 <main>:
#include "main.h"



int main(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	hwInit();
 8002f1c:	f7fe fb54 	bl	80015c8 <hwInit>
	apInit();
 8002f20:	f7fd f980 	bl	8000224 <apInit>

#ifdef BOARD_LED_TEST
 	apBoardLedTest();
 8002f24:	f7fd f984 	bl	8000230 <apBoardLedTest>
#ifdef LCD_TOUCH_BOARD_LED_TEST
	apLcdTouchBoardLedTest();
#endif /* LCD_TOUCH_BOARD_LED_TEST */


	return 0;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <__errno>:
 8002f30:	4b01      	ldr	r3, [pc, #4]	; (8002f38 <__errno+0x8>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	2000003c 	.word	0x2000003c

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2600      	movs	r6, #0
 8002f40:	4d0c      	ldr	r5, [pc, #48]	; (8002f74 <__libc_init_array+0x38>)
 8002f42:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <__libc_init_array+0x3c>)
 8002f44:	1b64      	subs	r4, r4, r5
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	42a6      	cmp	r6, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	f000 fc5c 	bl	8003808 <_init>
 8002f50:	2600      	movs	r6, #0
 8002f52:	4d0a      	ldr	r5, [pc, #40]	; (8002f7c <__libc_init_array+0x40>)
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <__libc_init_array+0x44>)
 8002f56:	1b64      	subs	r4, r4, r5
 8002f58:	10a4      	asrs	r4, r4, #2
 8002f5a:	42a6      	cmp	r6, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f64:	4798      	blx	r3
 8002f66:	3601      	adds	r6, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6e:	4798      	blx	r3
 8002f70:	3601      	adds	r6, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	08003cf0 	.word	0x08003cf0
 8002f78:	08003cf0 	.word	0x08003cf0
 8002f7c:	08003cf0 	.word	0x08003cf0
 8002f80:	08003cf4 	.word	0x08003cf4

08002f84 <memset>:
 8002f84:	4603      	mov	r3, r0
 8002f86:	4402      	add	r2, r0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d100      	bne.n	8002f8e <memset+0xa>
 8002f8c:	4770      	bx	lr
 8002f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f92:	e7f9      	b.n	8002f88 <memset+0x4>

08002f94 <_free_r>:
 8002f94:	b538      	push	{r3, r4, r5, lr}
 8002f96:	4605      	mov	r5, r0
 8002f98:	2900      	cmp	r1, #0
 8002f9a:	d043      	beq.n	8003024 <_free_r+0x90>
 8002f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa0:	1f0c      	subs	r4, r1, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bfb8      	it	lt
 8002fa6:	18e4      	addlt	r4, r4, r3
 8002fa8:	f000 f8ca 	bl	8003140 <__malloc_lock>
 8002fac:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <_free_r+0x94>)
 8002fae:	6813      	ldr	r3, [r2, #0]
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	b933      	cbnz	r3, 8002fc2 <_free_r+0x2e>
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	6014      	str	r4, [r2, #0]
 8002fb8:	4628      	mov	r0, r5
 8002fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fbe:	f000 b8c5 	b.w	800314c <__malloc_unlock>
 8002fc2:	42a3      	cmp	r3, r4
 8002fc4:	d90a      	bls.n	8002fdc <_free_r+0x48>
 8002fc6:	6821      	ldr	r1, [r4, #0]
 8002fc8:	1862      	adds	r2, r4, r1
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	bf01      	itttt	eq
 8002fce:	681a      	ldreq	r2, [r3, #0]
 8002fd0:	685b      	ldreq	r3, [r3, #4]
 8002fd2:	1852      	addeq	r2, r2, r1
 8002fd4:	6022      	streq	r2, [r4, #0]
 8002fd6:	6063      	str	r3, [r4, #4]
 8002fd8:	6004      	str	r4, [r0, #0]
 8002fda:	e7ed      	b.n	8002fb8 <_free_r+0x24>
 8002fdc:	461a      	mov	r2, r3
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	b10b      	cbz	r3, 8002fe6 <_free_r+0x52>
 8002fe2:	42a3      	cmp	r3, r4
 8002fe4:	d9fa      	bls.n	8002fdc <_free_r+0x48>
 8002fe6:	6811      	ldr	r1, [r2, #0]
 8002fe8:	1850      	adds	r0, r2, r1
 8002fea:	42a0      	cmp	r0, r4
 8002fec:	d10b      	bne.n	8003006 <_free_r+0x72>
 8002fee:	6820      	ldr	r0, [r4, #0]
 8002ff0:	4401      	add	r1, r0
 8002ff2:	1850      	adds	r0, r2, r1
 8002ff4:	4283      	cmp	r3, r0
 8002ff6:	6011      	str	r1, [r2, #0]
 8002ff8:	d1de      	bne.n	8002fb8 <_free_r+0x24>
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4401      	add	r1, r0
 8003000:	6011      	str	r1, [r2, #0]
 8003002:	6053      	str	r3, [r2, #4]
 8003004:	e7d8      	b.n	8002fb8 <_free_r+0x24>
 8003006:	d902      	bls.n	800300e <_free_r+0x7a>
 8003008:	230c      	movs	r3, #12
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	e7d4      	b.n	8002fb8 <_free_r+0x24>
 800300e:	6820      	ldr	r0, [r4, #0]
 8003010:	1821      	adds	r1, r4, r0
 8003012:	428b      	cmp	r3, r1
 8003014:	bf01      	itttt	eq
 8003016:	6819      	ldreq	r1, [r3, #0]
 8003018:	685b      	ldreq	r3, [r3, #4]
 800301a:	1809      	addeq	r1, r1, r0
 800301c:	6021      	streq	r1, [r4, #0]
 800301e:	6063      	str	r3, [r4, #4]
 8003020:	6054      	str	r4, [r2, #4]
 8003022:	e7c9      	b.n	8002fb8 <_free_r+0x24>
 8003024:	bd38      	pop	{r3, r4, r5, pc}
 8003026:	bf00      	nop
 8003028:	200001d8 	.word	0x200001d8

0800302c <_malloc_r>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	1ccd      	adds	r5, r1, #3
 8003030:	f025 0503 	bic.w	r5, r5, #3
 8003034:	3508      	adds	r5, #8
 8003036:	2d0c      	cmp	r5, #12
 8003038:	bf38      	it	cc
 800303a:	250c      	movcc	r5, #12
 800303c:	2d00      	cmp	r5, #0
 800303e:	4606      	mov	r6, r0
 8003040:	db01      	blt.n	8003046 <_malloc_r+0x1a>
 8003042:	42a9      	cmp	r1, r5
 8003044:	d903      	bls.n	800304e <_malloc_r+0x22>
 8003046:	230c      	movs	r3, #12
 8003048:	6033      	str	r3, [r6, #0]
 800304a:	2000      	movs	r0, #0
 800304c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800304e:	f000 f877 	bl	8003140 <__malloc_lock>
 8003052:	4921      	ldr	r1, [pc, #132]	; (80030d8 <_malloc_r+0xac>)
 8003054:	680a      	ldr	r2, [r1, #0]
 8003056:	4614      	mov	r4, r2
 8003058:	b99c      	cbnz	r4, 8003082 <_malloc_r+0x56>
 800305a:	4f20      	ldr	r7, [pc, #128]	; (80030dc <_malloc_r+0xb0>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b923      	cbnz	r3, 800306a <_malloc_r+0x3e>
 8003060:	4621      	mov	r1, r4
 8003062:	4630      	mov	r0, r6
 8003064:	f000 f83c 	bl	80030e0 <_sbrk_r>
 8003068:	6038      	str	r0, [r7, #0]
 800306a:	4629      	mov	r1, r5
 800306c:	4630      	mov	r0, r6
 800306e:	f000 f837 	bl	80030e0 <_sbrk_r>
 8003072:	1c43      	adds	r3, r0, #1
 8003074:	d123      	bne.n	80030be <_malloc_r+0x92>
 8003076:	230c      	movs	r3, #12
 8003078:	4630      	mov	r0, r6
 800307a:	6033      	str	r3, [r6, #0]
 800307c:	f000 f866 	bl	800314c <__malloc_unlock>
 8003080:	e7e3      	b.n	800304a <_malloc_r+0x1e>
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	1b5b      	subs	r3, r3, r5
 8003086:	d417      	bmi.n	80030b8 <_malloc_r+0x8c>
 8003088:	2b0b      	cmp	r3, #11
 800308a:	d903      	bls.n	8003094 <_malloc_r+0x68>
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	441c      	add	r4, r3
 8003090:	6025      	str	r5, [r4, #0]
 8003092:	e004      	b.n	800309e <_malloc_r+0x72>
 8003094:	6863      	ldr	r3, [r4, #4]
 8003096:	42a2      	cmp	r2, r4
 8003098:	bf0c      	ite	eq
 800309a:	600b      	streq	r3, [r1, #0]
 800309c:	6053      	strne	r3, [r2, #4]
 800309e:	4630      	mov	r0, r6
 80030a0:	f000 f854 	bl	800314c <__malloc_unlock>
 80030a4:	f104 000b 	add.w	r0, r4, #11
 80030a8:	1d23      	adds	r3, r4, #4
 80030aa:	f020 0007 	bic.w	r0, r0, #7
 80030ae:	1ac2      	subs	r2, r0, r3
 80030b0:	d0cc      	beq.n	800304c <_malloc_r+0x20>
 80030b2:	1a1b      	subs	r3, r3, r0
 80030b4:	50a3      	str	r3, [r4, r2]
 80030b6:	e7c9      	b.n	800304c <_malloc_r+0x20>
 80030b8:	4622      	mov	r2, r4
 80030ba:	6864      	ldr	r4, [r4, #4]
 80030bc:	e7cc      	b.n	8003058 <_malloc_r+0x2c>
 80030be:	1cc4      	adds	r4, r0, #3
 80030c0:	f024 0403 	bic.w	r4, r4, #3
 80030c4:	42a0      	cmp	r0, r4
 80030c6:	d0e3      	beq.n	8003090 <_malloc_r+0x64>
 80030c8:	1a21      	subs	r1, r4, r0
 80030ca:	4630      	mov	r0, r6
 80030cc:	f000 f808 	bl	80030e0 <_sbrk_r>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d1dd      	bne.n	8003090 <_malloc_r+0x64>
 80030d4:	e7cf      	b.n	8003076 <_malloc_r+0x4a>
 80030d6:	bf00      	nop
 80030d8:	200001d8 	.word	0x200001d8
 80030dc:	200001dc 	.word	0x200001dc

080030e0 <_sbrk_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	2300      	movs	r3, #0
 80030e4:	4d05      	ldr	r5, [pc, #20]	; (80030fc <_sbrk_r+0x1c>)
 80030e6:	4604      	mov	r4, r0
 80030e8:	4608      	mov	r0, r1
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	f7fd fa20 	bl	8000530 <_sbrk>
 80030f0:	1c43      	adds	r3, r0, #1
 80030f2:	d102      	bne.n	80030fa <_sbrk_r+0x1a>
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	b103      	cbz	r3, 80030fa <_sbrk_r+0x1a>
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	bd38      	pop	{r3, r4, r5, pc}
 80030fc:	20000288 	.word	0x20000288

08003100 <_vsiprintf_r>:
 8003100:	b500      	push	{lr}
 8003102:	b09b      	sub	sp, #108	; 0x6c
 8003104:	9100      	str	r1, [sp, #0]
 8003106:	9104      	str	r1, [sp, #16]
 8003108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800310c:	9105      	str	r1, [sp, #20]
 800310e:	9102      	str	r1, [sp, #8]
 8003110:	4905      	ldr	r1, [pc, #20]	; (8003128 <_vsiprintf_r+0x28>)
 8003112:	9103      	str	r1, [sp, #12]
 8003114:	4669      	mov	r1, sp
 8003116:	f000 f87b 	bl	8003210 <_svfiprintf_r>
 800311a:	2200      	movs	r2, #0
 800311c:	9b00      	ldr	r3, [sp, #0]
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	b01b      	add	sp, #108	; 0x6c
 8003122:	f85d fb04 	ldr.w	pc, [sp], #4
 8003126:	bf00      	nop
 8003128:	ffff0208 	.word	0xffff0208

0800312c <vsiprintf>:
 800312c:	4613      	mov	r3, r2
 800312e:	460a      	mov	r2, r1
 8003130:	4601      	mov	r1, r0
 8003132:	4802      	ldr	r0, [pc, #8]	; (800313c <vsiprintf+0x10>)
 8003134:	6800      	ldr	r0, [r0, #0]
 8003136:	f7ff bfe3 	b.w	8003100 <_vsiprintf_r>
 800313a:	bf00      	nop
 800313c:	2000003c 	.word	0x2000003c

08003140 <__malloc_lock>:
 8003140:	4801      	ldr	r0, [pc, #4]	; (8003148 <__malloc_lock+0x8>)
 8003142:	f000 bafb 	b.w	800373c <__retarget_lock_acquire_recursive>
 8003146:	bf00      	nop
 8003148:	20000290 	.word	0x20000290

0800314c <__malloc_unlock>:
 800314c:	4801      	ldr	r0, [pc, #4]	; (8003154 <__malloc_unlock+0x8>)
 800314e:	f000 baf6 	b.w	800373e <__retarget_lock_release_recursive>
 8003152:	bf00      	nop
 8003154:	20000290 	.word	0x20000290

08003158 <__ssputs_r>:
 8003158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800315c:	688e      	ldr	r6, [r1, #8]
 800315e:	4682      	mov	sl, r0
 8003160:	429e      	cmp	r6, r3
 8003162:	460c      	mov	r4, r1
 8003164:	4690      	mov	r8, r2
 8003166:	461f      	mov	r7, r3
 8003168:	d838      	bhi.n	80031dc <__ssputs_r+0x84>
 800316a:	898a      	ldrh	r2, [r1, #12]
 800316c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003170:	d032      	beq.n	80031d8 <__ssputs_r+0x80>
 8003172:	6825      	ldr	r5, [r4, #0]
 8003174:	6909      	ldr	r1, [r1, #16]
 8003176:	3301      	adds	r3, #1
 8003178:	eba5 0901 	sub.w	r9, r5, r1
 800317c:	6965      	ldr	r5, [r4, #20]
 800317e:	444b      	add	r3, r9
 8003180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003188:	106d      	asrs	r5, r5, #1
 800318a:	429d      	cmp	r5, r3
 800318c:	bf38      	it	cc
 800318e:	461d      	movcc	r5, r3
 8003190:	0553      	lsls	r3, r2, #21
 8003192:	d531      	bpl.n	80031f8 <__ssputs_r+0xa0>
 8003194:	4629      	mov	r1, r5
 8003196:	f7ff ff49 	bl	800302c <_malloc_r>
 800319a:	4606      	mov	r6, r0
 800319c:	b950      	cbnz	r0, 80031b4 <__ssputs_r+0x5c>
 800319e:	230c      	movs	r3, #12
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f8ca 3000 	str.w	r3, [sl]
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b4:	464a      	mov	r2, r9
 80031b6:	6921      	ldr	r1, [r4, #16]
 80031b8:	f000 fad0 	bl	800375c <memcpy>
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c6:	81a3      	strh	r3, [r4, #12]
 80031c8:	6126      	str	r6, [r4, #16]
 80031ca:	444e      	add	r6, r9
 80031cc:	6026      	str	r6, [r4, #0]
 80031ce:	463e      	mov	r6, r7
 80031d0:	6165      	str	r5, [r4, #20]
 80031d2:	eba5 0509 	sub.w	r5, r5, r9
 80031d6:	60a5      	str	r5, [r4, #8]
 80031d8:	42be      	cmp	r6, r7
 80031da:	d900      	bls.n	80031de <__ssputs_r+0x86>
 80031dc:	463e      	mov	r6, r7
 80031de:	4632      	mov	r2, r6
 80031e0:	4641      	mov	r1, r8
 80031e2:	6820      	ldr	r0, [r4, #0]
 80031e4:	f000 fac8 	bl	8003778 <memmove>
 80031e8:	68a3      	ldr	r3, [r4, #8]
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	1b9b      	subs	r3, r3, r6
 80031ee:	4432      	add	r2, r6
 80031f0:	2000      	movs	r0, #0
 80031f2:	60a3      	str	r3, [r4, #8]
 80031f4:	6022      	str	r2, [r4, #0]
 80031f6:	e7db      	b.n	80031b0 <__ssputs_r+0x58>
 80031f8:	462a      	mov	r2, r5
 80031fa:	f000 fad7 	bl	80037ac <_realloc_r>
 80031fe:	4606      	mov	r6, r0
 8003200:	2800      	cmp	r0, #0
 8003202:	d1e1      	bne.n	80031c8 <__ssputs_r+0x70>
 8003204:	4650      	mov	r0, sl
 8003206:	6921      	ldr	r1, [r4, #16]
 8003208:	f7ff fec4 	bl	8002f94 <_free_r>
 800320c:	e7c7      	b.n	800319e <__ssputs_r+0x46>
	...

08003210 <_svfiprintf_r>:
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	4698      	mov	r8, r3
 8003216:	898b      	ldrh	r3, [r1, #12]
 8003218:	4607      	mov	r7, r0
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	460d      	mov	r5, r1
 800321e:	4614      	mov	r4, r2
 8003220:	b09d      	sub	sp, #116	; 0x74
 8003222:	d50e      	bpl.n	8003242 <_svfiprintf_r+0x32>
 8003224:	690b      	ldr	r3, [r1, #16]
 8003226:	b963      	cbnz	r3, 8003242 <_svfiprintf_r+0x32>
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	f7ff feff 	bl	800302c <_malloc_r>
 800322e:	6028      	str	r0, [r5, #0]
 8003230:	6128      	str	r0, [r5, #16]
 8003232:	b920      	cbnz	r0, 800323e <_svfiprintf_r+0x2e>
 8003234:	230c      	movs	r3, #12
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	e0d1      	b.n	80033e2 <_svfiprintf_r+0x1d2>
 800323e:	2340      	movs	r3, #64	; 0x40
 8003240:	616b      	str	r3, [r5, #20]
 8003242:	2300      	movs	r3, #0
 8003244:	9309      	str	r3, [sp, #36]	; 0x24
 8003246:	2320      	movs	r3, #32
 8003248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800324c:	2330      	movs	r3, #48	; 0x30
 800324e:	f04f 0901 	mov.w	r9, #1
 8003252:	f8cd 800c 	str.w	r8, [sp, #12]
 8003256:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033fc <_svfiprintf_r+0x1ec>
 800325a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800325e:	4623      	mov	r3, r4
 8003260:	469a      	mov	sl, r3
 8003262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003266:	b10a      	cbz	r2, 800326c <_svfiprintf_r+0x5c>
 8003268:	2a25      	cmp	r2, #37	; 0x25
 800326a:	d1f9      	bne.n	8003260 <_svfiprintf_r+0x50>
 800326c:	ebba 0b04 	subs.w	fp, sl, r4
 8003270:	d00b      	beq.n	800328a <_svfiprintf_r+0x7a>
 8003272:	465b      	mov	r3, fp
 8003274:	4622      	mov	r2, r4
 8003276:	4629      	mov	r1, r5
 8003278:	4638      	mov	r0, r7
 800327a:	f7ff ff6d 	bl	8003158 <__ssputs_r>
 800327e:	3001      	adds	r0, #1
 8003280:	f000 80aa 	beq.w	80033d8 <_svfiprintf_r+0x1c8>
 8003284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003286:	445a      	add	r2, fp
 8003288:	9209      	str	r2, [sp, #36]	; 0x24
 800328a:	f89a 3000 	ldrb.w	r3, [sl]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80a2 	beq.w	80033d8 <_svfiprintf_r+0x1c8>
 8003294:	2300      	movs	r3, #0
 8003296:	f04f 32ff 	mov.w	r2, #4294967295
 800329a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800329e:	f10a 0a01 	add.w	sl, sl, #1
 80032a2:	9304      	str	r3, [sp, #16]
 80032a4:	9307      	str	r3, [sp, #28]
 80032a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032aa:	931a      	str	r3, [sp, #104]	; 0x68
 80032ac:	4654      	mov	r4, sl
 80032ae:	2205      	movs	r2, #5
 80032b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032b4:	4851      	ldr	r0, [pc, #324]	; (80033fc <_svfiprintf_r+0x1ec>)
 80032b6:	f000 fa43 	bl	8003740 <memchr>
 80032ba:	9a04      	ldr	r2, [sp, #16]
 80032bc:	b9d8      	cbnz	r0, 80032f6 <_svfiprintf_r+0xe6>
 80032be:	06d0      	lsls	r0, r2, #27
 80032c0:	bf44      	itt	mi
 80032c2:	2320      	movmi	r3, #32
 80032c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032c8:	0711      	lsls	r1, r2, #28
 80032ca:	bf44      	itt	mi
 80032cc:	232b      	movmi	r3, #43	; 0x2b
 80032ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032d2:	f89a 3000 	ldrb.w	r3, [sl]
 80032d6:	2b2a      	cmp	r3, #42	; 0x2a
 80032d8:	d015      	beq.n	8003306 <_svfiprintf_r+0xf6>
 80032da:	4654      	mov	r4, sl
 80032dc:	2000      	movs	r0, #0
 80032de:	f04f 0c0a 	mov.w	ip, #10
 80032e2:	9a07      	ldr	r2, [sp, #28]
 80032e4:	4621      	mov	r1, r4
 80032e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032ea:	3b30      	subs	r3, #48	; 0x30
 80032ec:	2b09      	cmp	r3, #9
 80032ee:	d94e      	bls.n	800338e <_svfiprintf_r+0x17e>
 80032f0:	b1b0      	cbz	r0, 8003320 <_svfiprintf_r+0x110>
 80032f2:	9207      	str	r2, [sp, #28]
 80032f4:	e014      	b.n	8003320 <_svfiprintf_r+0x110>
 80032f6:	eba0 0308 	sub.w	r3, r0, r8
 80032fa:	fa09 f303 	lsl.w	r3, r9, r3
 80032fe:	4313      	orrs	r3, r2
 8003300:	46a2      	mov	sl, r4
 8003302:	9304      	str	r3, [sp, #16]
 8003304:	e7d2      	b.n	80032ac <_svfiprintf_r+0x9c>
 8003306:	9b03      	ldr	r3, [sp, #12]
 8003308:	1d19      	adds	r1, r3, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	9103      	str	r1, [sp, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	bfbb      	ittet	lt
 8003312:	425b      	neglt	r3, r3
 8003314:	f042 0202 	orrlt.w	r2, r2, #2
 8003318:	9307      	strge	r3, [sp, #28]
 800331a:	9307      	strlt	r3, [sp, #28]
 800331c:	bfb8      	it	lt
 800331e:	9204      	strlt	r2, [sp, #16]
 8003320:	7823      	ldrb	r3, [r4, #0]
 8003322:	2b2e      	cmp	r3, #46	; 0x2e
 8003324:	d10c      	bne.n	8003340 <_svfiprintf_r+0x130>
 8003326:	7863      	ldrb	r3, [r4, #1]
 8003328:	2b2a      	cmp	r3, #42	; 0x2a
 800332a:	d135      	bne.n	8003398 <_svfiprintf_r+0x188>
 800332c:	9b03      	ldr	r3, [sp, #12]
 800332e:	3402      	adds	r4, #2
 8003330:	1d1a      	adds	r2, r3, #4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	9203      	str	r2, [sp, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	bfb8      	it	lt
 800333a:	f04f 33ff 	movlt.w	r3, #4294967295
 800333e:	9305      	str	r3, [sp, #20]
 8003340:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800340c <_svfiprintf_r+0x1fc>
 8003344:	2203      	movs	r2, #3
 8003346:	4650      	mov	r0, sl
 8003348:	7821      	ldrb	r1, [r4, #0]
 800334a:	f000 f9f9 	bl	8003740 <memchr>
 800334e:	b140      	cbz	r0, 8003362 <_svfiprintf_r+0x152>
 8003350:	2340      	movs	r3, #64	; 0x40
 8003352:	eba0 000a 	sub.w	r0, r0, sl
 8003356:	fa03 f000 	lsl.w	r0, r3, r0
 800335a:	9b04      	ldr	r3, [sp, #16]
 800335c:	3401      	adds	r4, #1
 800335e:	4303      	orrs	r3, r0
 8003360:	9304      	str	r3, [sp, #16]
 8003362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003366:	2206      	movs	r2, #6
 8003368:	4825      	ldr	r0, [pc, #148]	; (8003400 <_svfiprintf_r+0x1f0>)
 800336a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800336e:	f000 f9e7 	bl	8003740 <memchr>
 8003372:	2800      	cmp	r0, #0
 8003374:	d038      	beq.n	80033e8 <_svfiprintf_r+0x1d8>
 8003376:	4b23      	ldr	r3, [pc, #140]	; (8003404 <_svfiprintf_r+0x1f4>)
 8003378:	bb1b      	cbnz	r3, 80033c2 <_svfiprintf_r+0x1b2>
 800337a:	9b03      	ldr	r3, [sp, #12]
 800337c:	3307      	adds	r3, #7
 800337e:	f023 0307 	bic.w	r3, r3, #7
 8003382:	3308      	adds	r3, #8
 8003384:	9303      	str	r3, [sp, #12]
 8003386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003388:	4433      	add	r3, r6
 800338a:	9309      	str	r3, [sp, #36]	; 0x24
 800338c:	e767      	b.n	800325e <_svfiprintf_r+0x4e>
 800338e:	460c      	mov	r4, r1
 8003390:	2001      	movs	r0, #1
 8003392:	fb0c 3202 	mla	r2, ip, r2, r3
 8003396:	e7a5      	b.n	80032e4 <_svfiprintf_r+0xd4>
 8003398:	2300      	movs	r3, #0
 800339a:	f04f 0c0a 	mov.w	ip, #10
 800339e:	4619      	mov	r1, r3
 80033a0:	3401      	adds	r4, #1
 80033a2:	9305      	str	r3, [sp, #20]
 80033a4:	4620      	mov	r0, r4
 80033a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033aa:	3a30      	subs	r2, #48	; 0x30
 80033ac:	2a09      	cmp	r2, #9
 80033ae:	d903      	bls.n	80033b8 <_svfiprintf_r+0x1a8>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0c5      	beq.n	8003340 <_svfiprintf_r+0x130>
 80033b4:	9105      	str	r1, [sp, #20]
 80033b6:	e7c3      	b.n	8003340 <_svfiprintf_r+0x130>
 80033b8:	4604      	mov	r4, r0
 80033ba:	2301      	movs	r3, #1
 80033bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80033c0:	e7f0      	b.n	80033a4 <_svfiprintf_r+0x194>
 80033c2:	ab03      	add	r3, sp, #12
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	462a      	mov	r2, r5
 80033c8:	4638      	mov	r0, r7
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <_svfiprintf_r+0x1f8>)
 80033cc:	a904      	add	r1, sp, #16
 80033ce:	f3af 8000 	nop.w
 80033d2:	1c42      	adds	r2, r0, #1
 80033d4:	4606      	mov	r6, r0
 80033d6:	d1d6      	bne.n	8003386 <_svfiprintf_r+0x176>
 80033d8:	89ab      	ldrh	r3, [r5, #12]
 80033da:	065b      	lsls	r3, r3, #25
 80033dc:	f53f af2c 	bmi.w	8003238 <_svfiprintf_r+0x28>
 80033e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033e2:	b01d      	add	sp, #116	; 0x74
 80033e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033e8:	ab03      	add	r3, sp, #12
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	462a      	mov	r2, r5
 80033ee:	4638      	mov	r0, r7
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <_svfiprintf_r+0x1f8>)
 80033f2:	a904      	add	r1, sp, #16
 80033f4:	f000 f87c 	bl	80034f0 <_printf_i>
 80033f8:	e7eb      	b.n	80033d2 <_svfiprintf_r+0x1c2>
 80033fa:	bf00      	nop
 80033fc:	08003cbd 	.word	0x08003cbd
 8003400:	08003cc7 	.word	0x08003cc7
 8003404:	00000000 	.word	0x00000000
 8003408:	08003159 	.word	0x08003159
 800340c:	08003cc3 	.word	0x08003cc3

08003410 <_printf_common>:
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	4616      	mov	r6, r2
 8003416:	4699      	mov	r9, r3
 8003418:	688a      	ldr	r2, [r1, #8]
 800341a:	690b      	ldr	r3, [r1, #16]
 800341c:	4607      	mov	r7, r0
 800341e:	4293      	cmp	r3, r2
 8003420:	bfb8      	it	lt
 8003422:	4613      	movlt	r3, r2
 8003424:	6033      	str	r3, [r6, #0]
 8003426:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800342a:	460c      	mov	r4, r1
 800342c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003430:	b10a      	cbz	r2, 8003436 <_printf_common+0x26>
 8003432:	3301      	adds	r3, #1
 8003434:	6033      	str	r3, [r6, #0]
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	0699      	lsls	r1, r3, #26
 800343a:	bf42      	ittt	mi
 800343c:	6833      	ldrmi	r3, [r6, #0]
 800343e:	3302      	addmi	r3, #2
 8003440:	6033      	strmi	r3, [r6, #0]
 8003442:	6825      	ldr	r5, [r4, #0]
 8003444:	f015 0506 	ands.w	r5, r5, #6
 8003448:	d106      	bne.n	8003458 <_printf_common+0x48>
 800344a:	f104 0a19 	add.w	sl, r4, #25
 800344e:	68e3      	ldr	r3, [r4, #12]
 8003450:	6832      	ldr	r2, [r6, #0]
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	42ab      	cmp	r3, r5
 8003456:	dc28      	bgt.n	80034aa <_printf_common+0x9a>
 8003458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800345c:	1e13      	subs	r3, r2, #0
 800345e:	6822      	ldr	r2, [r4, #0]
 8003460:	bf18      	it	ne
 8003462:	2301      	movne	r3, #1
 8003464:	0692      	lsls	r2, r2, #26
 8003466:	d42d      	bmi.n	80034c4 <_printf_common+0xb4>
 8003468:	4649      	mov	r1, r9
 800346a:	4638      	mov	r0, r7
 800346c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003470:	47c0      	blx	r8
 8003472:	3001      	adds	r0, #1
 8003474:	d020      	beq.n	80034b8 <_printf_common+0xa8>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	68e5      	ldr	r5, [r4, #12]
 800347a:	f003 0306 	and.w	r3, r3, #6
 800347e:	2b04      	cmp	r3, #4
 8003480:	bf18      	it	ne
 8003482:	2500      	movne	r5, #0
 8003484:	6832      	ldr	r2, [r6, #0]
 8003486:	f04f 0600 	mov.w	r6, #0
 800348a:	68a3      	ldr	r3, [r4, #8]
 800348c:	bf08      	it	eq
 800348e:	1aad      	subeq	r5, r5, r2
 8003490:	6922      	ldr	r2, [r4, #16]
 8003492:	bf08      	it	eq
 8003494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003498:	4293      	cmp	r3, r2
 800349a:	bfc4      	itt	gt
 800349c:	1a9b      	subgt	r3, r3, r2
 800349e:	18ed      	addgt	r5, r5, r3
 80034a0:	341a      	adds	r4, #26
 80034a2:	42b5      	cmp	r5, r6
 80034a4:	d11a      	bne.n	80034dc <_printf_common+0xcc>
 80034a6:	2000      	movs	r0, #0
 80034a8:	e008      	b.n	80034bc <_printf_common+0xac>
 80034aa:	2301      	movs	r3, #1
 80034ac:	4652      	mov	r2, sl
 80034ae:	4649      	mov	r1, r9
 80034b0:	4638      	mov	r0, r7
 80034b2:	47c0      	blx	r8
 80034b4:	3001      	adds	r0, #1
 80034b6:	d103      	bne.n	80034c0 <_printf_common+0xb0>
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c0:	3501      	adds	r5, #1
 80034c2:	e7c4      	b.n	800344e <_printf_common+0x3e>
 80034c4:	2030      	movs	r0, #48	; 0x30
 80034c6:	18e1      	adds	r1, r4, r3
 80034c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034d2:	4422      	add	r2, r4
 80034d4:	3302      	adds	r3, #2
 80034d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034da:	e7c5      	b.n	8003468 <_printf_common+0x58>
 80034dc:	2301      	movs	r3, #1
 80034de:	4622      	mov	r2, r4
 80034e0:	4649      	mov	r1, r9
 80034e2:	4638      	mov	r0, r7
 80034e4:	47c0      	blx	r8
 80034e6:	3001      	adds	r0, #1
 80034e8:	d0e6      	beq.n	80034b8 <_printf_common+0xa8>
 80034ea:	3601      	adds	r6, #1
 80034ec:	e7d9      	b.n	80034a2 <_printf_common+0x92>
	...

080034f0 <_printf_i>:
 80034f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034f4:	460c      	mov	r4, r1
 80034f6:	7e27      	ldrb	r7, [r4, #24]
 80034f8:	4691      	mov	r9, r2
 80034fa:	2f78      	cmp	r7, #120	; 0x78
 80034fc:	4680      	mov	r8, r0
 80034fe:	469a      	mov	sl, r3
 8003500:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003502:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003506:	d807      	bhi.n	8003518 <_printf_i+0x28>
 8003508:	2f62      	cmp	r7, #98	; 0x62
 800350a:	d80a      	bhi.n	8003522 <_printf_i+0x32>
 800350c:	2f00      	cmp	r7, #0
 800350e:	f000 80d9 	beq.w	80036c4 <_printf_i+0x1d4>
 8003512:	2f58      	cmp	r7, #88	; 0x58
 8003514:	f000 80a4 	beq.w	8003660 <_printf_i+0x170>
 8003518:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800351c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003520:	e03a      	b.n	8003598 <_printf_i+0xa8>
 8003522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003526:	2b15      	cmp	r3, #21
 8003528:	d8f6      	bhi.n	8003518 <_printf_i+0x28>
 800352a:	a001      	add	r0, pc, #4	; (adr r0, 8003530 <_printf_i+0x40>)
 800352c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003530:	08003589 	.word	0x08003589
 8003534:	0800359d 	.word	0x0800359d
 8003538:	08003519 	.word	0x08003519
 800353c:	08003519 	.word	0x08003519
 8003540:	08003519 	.word	0x08003519
 8003544:	08003519 	.word	0x08003519
 8003548:	0800359d 	.word	0x0800359d
 800354c:	08003519 	.word	0x08003519
 8003550:	08003519 	.word	0x08003519
 8003554:	08003519 	.word	0x08003519
 8003558:	08003519 	.word	0x08003519
 800355c:	080036ab 	.word	0x080036ab
 8003560:	080035cd 	.word	0x080035cd
 8003564:	0800368d 	.word	0x0800368d
 8003568:	08003519 	.word	0x08003519
 800356c:	08003519 	.word	0x08003519
 8003570:	080036cd 	.word	0x080036cd
 8003574:	08003519 	.word	0x08003519
 8003578:	080035cd 	.word	0x080035cd
 800357c:	08003519 	.word	0x08003519
 8003580:	08003519 	.word	0x08003519
 8003584:	08003695 	.word	0x08003695
 8003588:	680b      	ldr	r3, [r1, #0]
 800358a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800358e:	1d1a      	adds	r2, r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	600a      	str	r2, [r1, #0]
 8003594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003598:	2301      	movs	r3, #1
 800359a:	e0a4      	b.n	80036e6 <_printf_i+0x1f6>
 800359c:	6825      	ldr	r5, [r4, #0]
 800359e:	6808      	ldr	r0, [r1, #0]
 80035a0:	062e      	lsls	r6, r5, #24
 80035a2:	f100 0304 	add.w	r3, r0, #4
 80035a6:	d50a      	bpl.n	80035be <_printf_i+0xce>
 80035a8:	6805      	ldr	r5, [r0, #0]
 80035aa:	600b      	str	r3, [r1, #0]
 80035ac:	2d00      	cmp	r5, #0
 80035ae:	da03      	bge.n	80035b8 <_printf_i+0xc8>
 80035b0:	232d      	movs	r3, #45	; 0x2d
 80035b2:	426d      	negs	r5, r5
 80035b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035b8:	230a      	movs	r3, #10
 80035ba:	485e      	ldr	r0, [pc, #376]	; (8003734 <_printf_i+0x244>)
 80035bc:	e019      	b.n	80035f2 <_printf_i+0x102>
 80035be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035c2:	6805      	ldr	r5, [r0, #0]
 80035c4:	600b      	str	r3, [r1, #0]
 80035c6:	bf18      	it	ne
 80035c8:	b22d      	sxthne	r5, r5
 80035ca:	e7ef      	b.n	80035ac <_printf_i+0xbc>
 80035cc:	680b      	ldr	r3, [r1, #0]
 80035ce:	6825      	ldr	r5, [r4, #0]
 80035d0:	1d18      	adds	r0, r3, #4
 80035d2:	6008      	str	r0, [r1, #0]
 80035d4:	0628      	lsls	r0, r5, #24
 80035d6:	d501      	bpl.n	80035dc <_printf_i+0xec>
 80035d8:	681d      	ldr	r5, [r3, #0]
 80035da:	e002      	b.n	80035e2 <_printf_i+0xf2>
 80035dc:	0669      	lsls	r1, r5, #25
 80035de:	d5fb      	bpl.n	80035d8 <_printf_i+0xe8>
 80035e0:	881d      	ldrh	r5, [r3, #0]
 80035e2:	2f6f      	cmp	r7, #111	; 0x6f
 80035e4:	bf0c      	ite	eq
 80035e6:	2308      	moveq	r3, #8
 80035e8:	230a      	movne	r3, #10
 80035ea:	4852      	ldr	r0, [pc, #328]	; (8003734 <_printf_i+0x244>)
 80035ec:	2100      	movs	r1, #0
 80035ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035f2:	6866      	ldr	r6, [r4, #4]
 80035f4:	2e00      	cmp	r6, #0
 80035f6:	bfa8      	it	ge
 80035f8:	6821      	ldrge	r1, [r4, #0]
 80035fa:	60a6      	str	r6, [r4, #8]
 80035fc:	bfa4      	itt	ge
 80035fe:	f021 0104 	bicge.w	r1, r1, #4
 8003602:	6021      	strge	r1, [r4, #0]
 8003604:	b90d      	cbnz	r5, 800360a <_printf_i+0x11a>
 8003606:	2e00      	cmp	r6, #0
 8003608:	d04d      	beq.n	80036a6 <_printf_i+0x1b6>
 800360a:	4616      	mov	r6, r2
 800360c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003610:	fb03 5711 	mls	r7, r3, r1, r5
 8003614:	5dc7      	ldrb	r7, [r0, r7]
 8003616:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800361a:	462f      	mov	r7, r5
 800361c:	42bb      	cmp	r3, r7
 800361e:	460d      	mov	r5, r1
 8003620:	d9f4      	bls.n	800360c <_printf_i+0x11c>
 8003622:	2b08      	cmp	r3, #8
 8003624:	d10b      	bne.n	800363e <_printf_i+0x14e>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	07df      	lsls	r7, r3, #31
 800362a:	d508      	bpl.n	800363e <_printf_i+0x14e>
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	6861      	ldr	r1, [r4, #4]
 8003630:	4299      	cmp	r1, r3
 8003632:	bfde      	ittt	le
 8003634:	2330      	movle	r3, #48	; 0x30
 8003636:	f806 3c01 	strble.w	r3, [r6, #-1]
 800363a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800363e:	1b92      	subs	r2, r2, r6
 8003640:	6122      	str	r2, [r4, #16]
 8003642:	464b      	mov	r3, r9
 8003644:	4621      	mov	r1, r4
 8003646:	4640      	mov	r0, r8
 8003648:	f8cd a000 	str.w	sl, [sp]
 800364c:	aa03      	add	r2, sp, #12
 800364e:	f7ff fedf 	bl	8003410 <_printf_common>
 8003652:	3001      	adds	r0, #1
 8003654:	d14c      	bne.n	80036f0 <_printf_i+0x200>
 8003656:	f04f 30ff 	mov.w	r0, #4294967295
 800365a:	b004      	add	sp, #16
 800365c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003660:	4834      	ldr	r0, [pc, #208]	; (8003734 <_printf_i+0x244>)
 8003662:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003666:	680e      	ldr	r6, [r1, #0]
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f856 5b04 	ldr.w	r5, [r6], #4
 800366e:	061f      	lsls	r7, r3, #24
 8003670:	600e      	str	r6, [r1, #0]
 8003672:	d514      	bpl.n	800369e <_printf_i+0x1ae>
 8003674:	07d9      	lsls	r1, r3, #31
 8003676:	bf44      	itt	mi
 8003678:	f043 0320 	orrmi.w	r3, r3, #32
 800367c:	6023      	strmi	r3, [r4, #0]
 800367e:	b91d      	cbnz	r5, 8003688 <_printf_i+0x198>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	f023 0320 	bic.w	r3, r3, #32
 8003686:	6023      	str	r3, [r4, #0]
 8003688:	2310      	movs	r3, #16
 800368a:	e7af      	b.n	80035ec <_printf_i+0xfc>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f043 0320 	orr.w	r3, r3, #32
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	2378      	movs	r3, #120	; 0x78
 8003696:	4828      	ldr	r0, [pc, #160]	; (8003738 <_printf_i+0x248>)
 8003698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800369c:	e7e3      	b.n	8003666 <_printf_i+0x176>
 800369e:	065e      	lsls	r6, r3, #25
 80036a0:	bf48      	it	mi
 80036a2:	b2ad      	uxthmi	r5, r5
 80036a4:	e7e6      	b.n	8003674 <_printf_i+0x184>
 80036a6:	4616      	mov	r6, r2
 80036a8:	e7bb      	b.n	8003622 <_printf_i+0x132>
 80036aa:	680b      	ldr	r3, [r1, #0]
 80036ac:	6826      	ldr	r6, [r4, #0]
 80036ae:	1d1d      	adds	r5, r3, #4
 80036b0:	6960      	ldr	r0, [r4, #20]
 80036b2:	600d      	str	r5, [r1, #0]
 80036b4:	0635      	lsls	r5, r6, #24
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	d501      	bpl.n	80036be <_printf_i+0x1ce>
 80036ba:	6018      	str	r0, [r3, #0]
 80036bc:	e002      	b.n	80036c4 <_printf_i+0x1d4>
 80036be:	0671      	lsls	r1, r6, #25
 80036c0:	d5fb      	bpl.n	80036ba <_printf_i+0x1ca>
 80036c2:	8018      	strh	r0, [r3, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	4616      	mov	r6, r2
 80036c8:	6123      	str	r3, [r4, #16]
 80036ca:	e7ba      	b.n	8003642 <_printf_i+0x152>
 80036cc:	680b      	ldr	r3, [r1, #0]
 80036ce:	1d1a      	adds	r2, r3, #4
 80036d0:	600a      	str	r2, [r1, #0]
 80036d2:	681e      	ldr	r6, [r3, #0]
 80036d4:	2100      	movs	r1, #0
 80036d6:	4630      	mov	r0, r6
 80036d8:	6862      	ldr	r2, [r4, #4]
 80036da:	f000 f831 	bl	8003740 <memchr>
 80036de:	b108      	cbz	r0, 80036e4 <_printf_i+0x1f4>
 80036e0:	1b80      	subs	r0, r0, r6
 80036e2:	6060      	str	r0, [r4, #4]
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	6123      	str	r3, [r4, #16]
 80036e8:	2300      	movs	r3, #0
 80036ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ee:	e7a8      	b.n	8003642 <_printf_i+0x152>
 80036f0:	4632      	mov	r2, r6
 80036f2:	4649      	mov	r1, r9
 80036f4:	4640      	mov	r0, r8
 80036f6:	6923      	ldr	r3, [r4, #16]
 80036f8:	47d0      	blx	sl
 80036fa:	3001      	adds	r0, #1
 80036fc:	d0ab      	beq.n	8003656 <_printf_i+0x166>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	079b      	lsls	r3, r3, #30
 8003702:	d413      	bmi.n	800372c <_printf_i+0x23c>
 8003704:	68e0      	ldr	r0, [r4, #12]
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	4298      	cmp	r0, r3
 800370a:	bfb8      	it	lt
 800370c:	4618      	movlt	r0, r3
 800370e:	e7a4      	b.n	800365a <_printf_i+0x16a>
 8003710:	2301      	movs	r3, #1
 8003712:	4632      	mov	r2, r6
 8003714:	4649      	mov	r1, r9
 8003716:	4640      	mov	r0, r8
 8003718:	47d0      	blx	sl
 800371a:	3001      	adds	r0, #1
 800371c:	d09b      	beq.n	8003656 <_printf_i+0x166>
 800371e:	3501      	adds	r5, #1
 8003720:	68e3      	ldr	r3, [r4, #12]
 8003722:	9903      	ldr	r1, [sp, #12]
 8003724:	1a5b      	subs	r3, r3, r1
 8003726:	42ab      	cmp	r3, r5
 8003728:	dcf2      	bgt.n	8003710 <_printf_i+0x220>
 800372a:	e7eb      	b.n	8003704 <_printf_i+0x214>
 800372c:	2500      	movs	r5, #0
 800372e:	f104 0619 	add.w	r6, r4, #25
 8003732:	e7f5      	b.n	8003720 <_printf_i+0x230>
 8003734:	08003cce 	.word	0x08003cce
 8003738:	08003cdf 	.word	0x08003cdf

0800373c <__retarget_lock_acquire_recursive>:
 800373c:	4770      	bx	lr

0800373e <__retarget_lock_release_recursive>:
 800373e:	4770      	bx	lr

08003740 <memchr>:
 8003740:	4603      	mov	r3, r0
 8003742:	b510      	push	{r4, lr}
 8003744:	b2c9      	uxtb	r1, r1
 8003746:	4402      	add	r2, r0
 8003748:	4293      	cmp	r3, r2
 800374a:	4618      	mov	r0, r3
 800374c:	d101      	bne.n	8003752 <memchr+0x12>
 800374e:	2000      	movs	r0, #0
 8003750:	e003      	b.n	800375a <memchr+0x1a>
 8003752:	7804      	ldrb	r4, [r0, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	428c      	cmp	r4, r1
 8003758:	d1f6      	bne.n	8003748 <memchr+0x8>
 800375a:	bd10      	pop	{r4, pc}

0800375c <memcpy>:
 800375c:	440a      	add	r2, r1
 800375e:	4291      	cmp	r1, r2
 8003760:	f100 33ff 	add.w	r3, r0, #4294967295
 8003764:	d100      	bne.n	8003768 <memcpy+0xc>
 8003766:	4770      	bx	lr
 8003768:	b510      	push	{r4, lr}
 800376a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800376e:	4291      	cmp	r1, r2
 8003770:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003774:	d1f9      	bne.n	800376a <memcpy+0xe>
 8003776:	bd10      	pop	{r4, pc}

08003778 <memmove>:
 8003778:	4288      	cmp	r0, r1
 800377a:	b510      	push	{r4, lr}
 800377c:	eb01 0402 	add.w	r4, r1, r2
 8003780:	d902      	bls.n	8003788 <memmove+0x10>
 8003782:	4284      	cmp	r4, r0
 8003784:	4623      	mov	r3, r4
 8003786:	d807      	bhi.n	8003798 <memmove+0x20>
 8003788:	1e43      	subs	r3, r0, #1
 800378a:	42a1      	cmp	r1, r4
 800378c:	d008      	beq.n	80037a0 <memmove+0x28>
 800378e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003796:	e7f8      	b.n	800378a <memmove+0x12>
 8003798:	4601      	mov	r1, r0
 800379a:	4402      	add	r2, r0
 800379c:	428a      	cmp	r2, r1
 800379e:	d100      	bne.n	80037a2 <memmove+0x2a>
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037aa:	e7f7      	b.n	800379c <memmove+0x24>

080037ac <_realloc_r>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	4607      	mov	r7, r0
 80037b0:	4614      	mov	r4, r2
 80037b2:	460e      	mov	r6, r1
 80037b4:	b921      	cbnz	r1, 80037c0 <_realloc_r+0x14>
 80037b6:	4611      	mov	r1, r2
 80037b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037bc:	f7ff bc36 	b.w	800302c <_malloc_r>
 80037c0:	b922      	cbnz	r2, 80037cc <_realloc_r+0x20>
 80037c2:	f7ff fbe7 	bl	8002f94 <_free_r>
 80037c6:	4625      	mov	r5, r4
 80037c8:	4628      	mov	r0, r5
 80037ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037cc:	f000 f814 	bl	80037f8 <_malloc_usable_size_r>
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	d20f      	bcs.n	80037f4 <_realloc_r+0x48>
 80037d4:	4621      	mov	r1, r4
 80037d6:	4638      	mov	r0, r7
 80037d8:	f7ff fc28 	bl	800302c <_malloc_r>
 80037dc:	4605      	mov	r5, r0
 80037de:	2800      	cmp	r0, #0
 80037e0:	d0f2      	beq.n	80037c8 <_realloc_r+0x1c>
 80037e2:	4631      	mov	r1, r6
 80037e4:	4622      	mov	r2, r4
 80037e6:	f7ff ffb9 	bl	800375c <memcpy>
 80037ea:	4631      	mov	r1, r6
 80037ec:	4638      	mov	r0, r7
 80037ee:	f7ff fbd1 	bl	8002f94 <_free_r>
 80037f2:	e7e9      	b.n	80037c8 <_realloc_r+0x1c>
 80037f4:	4635      	mov	r5, r6
 80037f6:	e7e7      	b.n	80037c8 <_realloc_r+0x1c>

080037f8 <_malloc_usable_size_r>:
 80037f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fc:	1f18      	subs	r0, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bfbc      	itt	lt
 8003802:	580b      	ldrlt	r3, [r1, r0]
 8003804:	18c0      	addlt	r0, r0, r3
 8003806:	4770      	bx	lr

08003808 <_init>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr

08003814 <_fini>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr
