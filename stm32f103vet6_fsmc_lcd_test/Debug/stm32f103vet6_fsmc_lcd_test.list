
stm32f103vet6_fsmc_lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006060  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000200dc  08006244  08006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026320  08026320  00040124  2**0
                  CONTENTS
  4 .ARM          00000000  08026320  08026320  00040124  2**0
                  CONTENTS
  5 .preinit_array 00000000  08026320  08026320  00040124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026320  08026320  00036320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026324  08026324  00036324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08026328  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000124  0802644c  00040124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0802644c  00040318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019932  00000000  00000000  0004014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc0  00000000  00000000  00059a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0005d740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0005e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8c8  00000000  00000000  0005ec90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017155  00000000  00000000  0007c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095693  00000000  00000000  000936ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00128d40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d84  00000000  00000000  00128d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000124 	.word	0x20000124
 8000200:	00000000 	.word	0x00000000
 8000204:	0800622c 	.word	0x0800622c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000128 	.word	0x20000128
 8000220:	0800622c 	.word	0x0800622c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <apInit>:




 void apInit(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	 ;
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr

08000240 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b087      	sub	sp, #28
 8000244:	af02      	add	r7, sp, #8
 8000246:	4603      	mov	r3, r0
 8000248:	80fb      	strh	r3, [r7, #6]
 if (GPIO_Pin == T_PEN_Pin)
 800024a:	88fb      	ldrh	r3, [r7, #6]
 800024c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000250:	f040 80ad 	bne.w	80003ae <HAL_GPIO_EXTI_Callback+0x16e>
 {
	 if (tempIgnoralEXTI || isCalbriating) return;
 8000254:	4b57      	ldr	r3, [pc, #348]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	f040 80a7 	bne.w	80003ac <HAL_GPIO_EXTI_Callback+0x16c>
 800025e:	4b56      	ldr	r3, [pc, #344]	; (80003b8 <HAL_GPIO_EXTI_Callback+0x178>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	f040 80a2 	bne.w	80003ac <HAL_GPIO_EXTI_Callback+0x16c>

	  if(XPT2046_TouchPressed())
 8000268:	f003 fc8a 	bl	8003b80 <XPT2046_TouchPressed>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	f000 809d 	beq.w	80003ae <HAL_GPIO_EXTI_Callback+0x16e>
	  {
		  tempIgnoralEXTI=1;
 8000274:	4b4f      	ldr	r3, [pc, #316]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
		  XPT2046_TouchGetCoordinates(&cx, &cy);
 800027a:	4950      	ldr	r1, [pc, #320]	; (80003bc <HAL_GPIO_EXTI_Callback+0x17c>)
 800027c:	4850      	ldr	r0, [pc, #320]	; (80003c0 <HAL_GPIO_EXTI_Callback+0x180>)
 800027e:	f003 fc97 	bl	8003bb0 <XPT2046_TouchGetCoordinates>

		  if (menuActived)
 8000282:	4b50      	ldr	r3, [pc, #320]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x184>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d060      	beq.n	800034c <HAL_GPIO_EXTI_Callback+0x10c>
		  {
			  uint8_t i=getTouchMenItem(cx, cy);
 800028a:	4b4d      	ldr	r3, [pc, #308]	; (80003c0 <HAL_GPIO_EXTI_Callback+0x180>)
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	4a4b      	ldr	r2, [pc, #300]	; (80003bc <HAL_GPIO_EXTI_Callback+0x17c>)
 8000290:	8812      	ldrh	r2, [r2, #0]
 8000292:	4611      	mov	r1, r2
 8000294:	4618      	mov	r0, r3
 8000296:	f003 fa6d 	bl	8003774 <getTouchMenItem>
 800029a:	4603      	mov	r3, r0
 800029c:	73fb      	strb	r3, [r7, #15]
			  if (i > 0)
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d053      	beq.n	800034c <HAL_GPIO_EXTI_Callback+0x10c>
			  {
				 showMenu(i);
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f003 f966 	bl	8003578 <showMenu>

#ifdef  LCD_TOUCH_MENU_TEST
				  switch (i)
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	2b05      	cmp	r3, #5
 80002b2:	d84c      	bhi.n	800034e <HAL_GPIO_EXTI_Callback+0x10e>
 80002b4:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <HAL_GPIO_EXTI_Callback+0x7c>)
 80002b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ba:	bf00      	nop
 80002bc:	080002d5 	.word	0x080002d5
 80002c0:	08000325 	.word	0x08000325
 80002c4:	0800032d 	.word	0x0800032d
 80002c8:	08000335 	.word	0x08000335
 80002cc:	0800033d 	.word	0x0800033d
 80002d0:	08000345 	.word	0x08000345
				  {
					case DRAWINGITEM:
						lcdFillRect(1, 26, lcdGetWidth()-2, lcdGetHeight()-2, COLOR_BLACK);
 80002d4:	f002 ffa0 	bl	8003218 <lcdGetWidth>
 80002d8:	4603      	mov	r3, r0
 80002da:	3b02      	subs	r3, #2
 80002dc:	b29b      	uxth	r3, r3
 80002de:	b21c      	sxth	r4, r3
 80002e0:	f002 ffa4 	bl	800322c <lcdGetHeight>
 80002e4:	4603      	mov	r3, r0
 80002e6:	3b02      	subs	r3, #2
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	b21b      	sxth	r3, r3
 80002ec:	2200      	movs	r2, #0
 80002ee:	9200      	str	r2, [sp, #0]
 80002f0:	4622      	mov	r2, r4
 80002f2:	211a      	movs	r1, #26
 80002f4:	2001      	movs	r0, #1
 80002f6:	f002 faf3 	bl	80028e0 <lcdFillRect>
						lcdDrawRect(1, 26, lcdGetWidth()-2, lcdGetHeight()-2, COLOR_WHITE);
 80002fa:	f002 ff8d 	bl	8003218 <lcdGetWidth>
 80002fe:	4603      	mov	r3, r0
 8000300:	3b02      	subs	r3, #2
 8000302:	b29b      	uxth	r3, r3
 8000304:	b21c      	sxth	r4, r3
 8000306:	f002 ff91 	bl	800322c <lcdGetHeight>
 800030a:	4603      	mov	r3, r0
 800030c:	3b02      	subs	r3, #2
 800030e:	b29b      	uxth	r3, r3
 8000310:	b21b      	sxth	r3, r3
 8000312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000316:	9200      	str	r2, [sp, #0]
 8000318:	4622      	mov	r2, r4
 800031a:	211a      	movs	r1, #26
 800031c:	2001      	movs	r0, #1
 800031e:	f001 ff3b 	bl	8002198 <lcdDrawRect>
					    break;
 8000322:	e014      	b.n	800034e <HAL_GPIO_EXTI_Callback+0x10e>

					case DEMOITEM:
						  menuActived=0;
 8000324:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x184>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
						  break;
 800032a:	e010      	b.n	800034e <HAL_GPIO_EXTI_Callback+0x10e>

					case LCDORIITEM:
						  menuActived=0;
 800032c:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x184>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
						  break;
 8000332:	e00c      	b.n	800034e <HAL_GPIO_EXTI_Callback+0x10e>

					case RITEM:
						  menuActived=0;
 8000334:	4b23      	ldr	r3, [pc, #140]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x184>)
 8000336:	2200      	movs	r2, #0
 8000338:	701a      	strb	r2, [r3, #0]
						  break;
 800033a:	e008      	b.n	800034e <HAL_GPIO_EXTI_Callback+0x10e>

				    case GITEM:
				    	  menuActived=0;
 800033c:	4b21      	ldr	r3, [pc, #132]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x184>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
						  break;
 8000342:	e004      	b.n	800034e <HAL_GPIO_EXTI_Callback+0x10e>

				    case BITEM:
						 menuActived=0;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x184>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
					     break;
 800034a:	e000      	b.n	800034e <HAL_GPIO_EXTI_Callback+0x10e>
						  menuActived=0;
						  break;
				  }
#endif /* LCD_TOUCH_BOARD_LED_TEST */

			  }
 800034c:	bf00      	nop
		  }

#ifdef  LCD_TOUCH_MENU_TEST
		  if (activedMenuItem == DRAWINGITEM)
 800034e:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <HAL_GPIO_EXTI_Callback+0x188>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d126      	bne.n	80003a4 <HAL_GPIO_EXTI_Callback+0x164>
		  {
			  if (cx > 1 && cx < lcdGetWidth()-1 && cy > 26 && cy < lcdGetHeight()-1 )
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <HAL_GPIO_EXTI_Callback+0x180>)
 8000358:	881b      	ldrh	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d922      	bls.n	80003a4 <HAL_GPIO_EXTI_Callback+0x164>
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <HAL_GPIO_EXTI_Callback+0x180>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	461c      	mov	r4, r3
 8000364:	f002 ff58 	bl	8003218 <lcdGetWidth>
 8000368:	4603      	mov	r3, r0
 800036a:	3b01      	subs	r3, #1
 800036c:	429c      	cmp	r4, r3
 800036e:	da19      	bge.n	80003a4 <HAL_GPIO_EXTI_Callback+0x164>
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <HAL_GPIO_EXTI_Callback+0x17c>)
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	2b1a      	cmp	r3, #26
 8000376:	d915      	bls.n	80003a4 <HAL_GPIO_EXTI_Callback+0x164>
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <HAL_GPIO_EXTI_Callback+0x17c>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	461c      	mov	r4, r3
 800037e:	f002 ff55 	bl	800322c <lcdGetHeight>
 8000382:	4603      	mov	r3, r0
 8000384:	3b01      	subs	r3, #1
 8000386:	429c      	cmp	r4, r3
 8000388:	da0c      	bge.n	80003a4 <HAL_GPIO_EXTI_Callback+0x164>
								  lcdFillCircle(cx, cy, penWidth, COLOR_GREENYELLOW);
 800038a:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <HAL_GPIO_EXTI_Callback+0x180>)
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	b218      	sxth	r0, r3
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <HAL_GPIO_EXTI_Callback+0x17c>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	b219      	sxth	r1, r3
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <HAL_GPIO_EXTI_Callback+0x18c>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	b21a      	sxth	r2, r3
 800039c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80003a0:	f002 f9c6 	bl	8002730 <lcdFillCircle>
		  }
		  tempIgnoralEXTI=0;
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x174>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
 80003aa:	e000      	b.n	80003ae <HAL_GPIO_EXTI_Callback+0x16e>
	 if (tempIgnoralEXTI || isCalbriating) return;
 80003ac:	bf00      	nop
#endif /* LCD_TOUCH_MENU_TEST */

	  }
   }
}
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd90      	pop	{r4, r7, pc}
 80003b4:	20000140 	.word	0x20000140
 80003b8:	200002ba 	.word	0x200002ba
 80003bc:	20000144 	.word	0x20000144
 80003c0:	20000142 	.word	0x20000142
 80003c4:	200002b8 	.word	0x200002b8
 80003c8:	200002b9 	.word	0x200002b9
 80003cc:	20000000 	.word	0x20000000

080003d0 <apLcdTouchMenuTest>:



#ifdef LCD_TOUCH_MENU_TEST
void apLcdTouchMenuTest(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	/*
	 * 22 / 04 / 11
	 * LCD Touch Menu Test
	 * *********************************/

	 activedMenuItem=0;
 80003d4:	4b51      	ldr	r3, [pc, #324]	; (800051c <apLcdTouchMenuTest+0x14c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]
	 menuActived=0;
 80003da:	4b51      	ldr	r3, [pc, #324]	; (8000520 <apLcdTouchMenuTest+0x150>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]

	 lcdFillRGB(COLOR_BLACK);
 80003e0:	2000      	movs	r0, #0
 80003e2:	f001 fd57 	bl	8001e94 <lcdFillRGB>
//   lcdSetOrientation(LCD_ORIENTATION_LANDSCAPE);
     lcdSetOrientation(LCD_ORIENTATION_PORTRAIT_MIRROR);
 80003e6:	2002      	movs	r0, #2
 80003e8:	f002 fe36 	bl	8003058 <lcdSetOrientation>


	/************** Start Calibrating **************/

	 isCalbriating = true;
 80003ec:	4b4d      	ldr	r3, [pc, #308]	; (8000524 <apLcdTouchMenuTest+0x154>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	701a      	strb	r2, [r3, #0]

	 showMessage("Start Calibration",2);
 80003f2:	2102      	movs	r1, #2
 80003f4:	484c      	ldr	r0, [pc, #304]	; (8000528 <apLcdTouchMenuTest+0x158>)
 80003f6:	f003 fa09 	bl	800380c <showMessage>

	 while(!XPT2046_TouchCalibration())
 80003fa:	e003      	b.n	8000404 <apLcdTouchMenuTest+0x34>
	 {
		showMessage("Calibration Error!!!\n Try again", 2);
 80003fc:	2102      	movs	r1, #2
 80003fe:	484b      	ldr	r0, [pc, #300]	; (800052c <apLcdTouchMenuTest+0x15c>)
 8000400:	f003 fa04 	bl	800380c <showMessage>
	 while(!XPT2046_TouchCalibration())
 8000404:	f003 fc86 	bl	8003d14 <XPT2046_TouchCalibration>
 8000408:	4603      	mov	r3, r0
 800040a:	f083 0301 	eor.w	r3, r3, #1
 800040e:	b2db      	uxtb	r3, r3
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f3      	bne.n	80003fc <apLcdTouchMenuTest+0x2c>
	 }

	 isCalbriating = false;
 8000414:	4b43      	ldr	r3, [pc, #268]	; (8000524 <apLcdTouchMenuTest+0x154>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]

	 showMessage("Calibrate\n successfully",2);
 800041a:	2102      	movs	r1, #2
 800041c:	4844      	ldr	r0, [pc, #272]	; (8000530 <apLcdTouchMenuTest+0x160>)
 800041e:	f003 f9f5 	bl	800380c <showMessage>

	 menuActived = 1;
 8000422:	4b3f      	ldr	r3, [pc, #252]	; (8000520 <apLcdTouchMenuTest+0x150>)
 8000424:	2201      	movs	r2, #1
 8000426:	701a      	strb	r2, [r3, #0]

	/************** End Calibrating **************/


	showMenu(0);
 8000428:	2000      	movs	r0, #0
 800042a:	f003 f8a5 	bl	8003578 <showMenu>

	while (1)
	{
		switch(activedMenuItem)
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <apLcdTouchMenuTest+0x14c>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	3b01      	subs	r3, #1
 8000434:	2b05      	cmp	r3, #5
 8000436:	d8fa      	bhi.n	800042e <apLcdTouchMenuTest+0x5e>
 8000438:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <apLcdTouchMenuTest+0x70>)
 800043a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043e:	bf00      	nop
 8000440:	0800042f 	.word	0x0800042f
 8000444:	08000459 	.word	0x08000459
 8000448:	08000479 	.word	0x08000479
 800044c:	080004b7 	.word	0x080004b7
 8000450:	080004d9 	.word	0x080004d9
 8000454:	080004fb 	.word	0x080004fb
		{
			case DRAWINGITEM:
				break;

			case DEMOITEM:
				tempIgnoralEXTI=1;
 8000458:	4b36      	ldr	r3, [pc, #216]	; (8000534 <apLcdTouchMenuTest+0x164>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]

				demoLCD(6); // -> (6) % 4 = 2 : LCD_ORIENTATION_PORTRAIT_MIRROR mode setting
 800045e:	2006      	movs	r0, #6
 8000460:	f000 f86a 	bl	8000538 <demoLCD>
				showMenu(0);
 8000464:	2000      	movs	r0, #0
 8000466:	f003 f887 	bl	8003578 <showMenu>

				tempIgnoralEXTI=0;
 800046a:	4b32      	ldr	r3, [pc, #200]	; (8000534 <apLcdTouchMenuTest+0x164>)
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
				menuActived=1;
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <apLcdTouchMenuTest+0x150>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]
				break;
 8000476:	e050      	b.n	800051a <apLcdTouchMenuTest+0x14a>

			case LCDORIITEM:
				tempIgnoralEXTI=1;
 8000478:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <apLcdTouchMenuTest+0x164>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]

				lcdFillRGB(COLOR_BLACK);
 800047e:	2000      	movs	r0, #0
 8000480:	f001 fd08 	bl	8001e94 <lcdFillRGB>
				lcdSetOrientation((lcdGetOrientation()+1)%4);
 8000484:	f002 fedc 	bl	8003240 <lcdGetOrientation>
 8000488:	4603      	mov	r3, r0
 800048a:	3301      	adds	r3, #1
 800048c:	425a      	negs	r2, r3
 800048e:	f003 0303 	and.w	r3, r3, #3
 8000492:	f002 0203 	and.w	r2, r2, #3
 8000496:	bf58      	it	pl
 8000498:	4253      	negpl	r3, r2
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fddb 	bl	8003058 <lcdSetOrientation>
			    showMenu(0);
 80004a2:	2000      	movs	r0, #0
 80004a4:	f003 f868 	bl	8003578 <showMenu>

			    tempIgnoralEXTI=0;
 80004a8:	4b22      	ldr	r3, [pc, #136]	; (8000534 <apLcdTouchMenuTest+0x164>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
				menuActived=1;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <apLcdTouchMenuTest+0x150>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
				break;
 80004b4:	e031      	b.n	800051a <apLcdTouchMenuTest+0x14a>

			case RITEM:
				tempIgnoralEXTI=1;
 80004b6:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <apLcdTouchMenuTest+0x164>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]

				lcdFillRGB(COLOR_RED);
 80004bc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80004c0:	f001 fce8 	bl	8001e94 <lcdFillRGB>
				showMenu(0);
 80004c4:	2000      	movs	r0, #0
 80004c6:	f003 f857 	bl	8003578 <showMenu>

				tempIgnoralEXTI=0;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <apLcdTouchMenuTest+0x164>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
				menuActived=1;
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <apLcdTouchMenuTest+0x150>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
				break;
 80004d6:	e020      	b.n	800051a <apLcdTouchMenuTest+0x14a>

			case GITEM:
				tempIgnoralEXTI=1;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <apLcdTouchMenuTest+0x164>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]

				lcdFillRGB(COLOR_GREEN);
 80004de:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80004e2:	f001 fcd7 	bl	8001e94 <lcdFillRGB>
				showMenu(0);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f003 f846 	bl	8003578 <showMenu>

				tempIgnoralEXTI=0;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <apLcdTouchMenuTest+0x164>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
				menuActived=1;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <apLcdTouchMenuTest+0x150>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
				break;
 80004f8:	e00f      	b.n	800051a <apLcdTouchMenuTest+0x14a>

			case BITEM:
				tempIgnoralEXTI=1;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <apLcdTouchMenuTest+0x164>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]

				lcdFillRGB(COLOR_BLUE);
 8000500:	201f      	movs	r0, #31
 8000502:	f001 fcc7 	bl	8001e94 <lcdFillRGB>
				showMenu(0);
 8000506:	2000      	movs	r0, #0
 8000508:	f003 f836 	bl	8003578 <showMenu>

				tempIgnoralEXTI=0;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <apLcdTouchMenuTest+0x164>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
				menuActived=1;
 8000512:	4b03      	ldr	r3, [pc, #12]	; (8000520 <apLcdTouchMenuTest+0x150>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
				break;
 8000518:	bf00      	nop
		switch(activedMenuItem)
 800051a:	e788      	b.n	800042e <apLcdTouchMenuTest+0x5e>
 800051c:	200002b9 	.word	0x200002b9
 8000520:	200002b8 	.word	0x200002b8
 8000524:	200002ba 	.word	0x200002ba
 8000528:	08006244 	.word	0x08006244
 800052c:	08006258 	.word	0x08006258
 8000530:	08006278 	.word	0x08006278
 8000534:	20000140 	.word	0x20000140

08000538 <demoLCD>:
#include "lcd_demo.h"
#include "ili9341_lcd.h"


void demoLCD(int i)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	lcdSetOrientation(i % 4);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	425a      	negs	r2, r3
 8000544:	f003 0303 	and.w	r3, r3, #3
 8000548:	f002 0203 	and.w	r2, r2, #3
 800054c:	bf58      	it	pl
 800054e:	4253      	negpl	r3, r2
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fd80 	bl	8003058 <lcdSetOrientation>

	uint32_t t = testFillScreen();
 8000558:	f000 fa0e 	bl	8000978 <testFillScreen>
 800055c:	60f8      	str	r0, [r7, #12]
	lcdSetTextFont(&Font16);
 800055e:	48dd      	ldr	r0, [pc, #884]	; (80008d4 <demoLCD+0x39c>)
 8000560:	f002 fd56 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8000564:	f002 fe62 	bl	800322c <lcdGetHeight>
 8000568:	4603      	mov	r3, r0
 800056a:	461c      	mov	r4, r3
 800056c:	f002 fe72 	bl	8003254 <lcdGetTextFont>
 8000570:	4603      	mov	r3, r0
 8000572:	88db      	ldrh	r3, [r3, #6]
 8000574:	1ae3      	subs	r3, r4, r3
 8000576:	b29b      	uxth	r3, r3
 8000578:	3b01      	subs	r3, #1
 800057a:	b29b      	uxth	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	2000      	movs	r0, #0
 8000580:	f002 fdd8 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8000584:	2100      	movs	r1, #0
 8000586:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800058a:	f002 fd4f 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", t);
 800058e:	68f9      	ldr	r1, [r7, #12]
 8000590:	48d1      	ldr	r0, [pc, #836]	; (80008d8 <demoLCD+0x3a0>)
 8000592:	f002 fcb1 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 8000596:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800059a:	f003 fd9d 	bl	80040d8 <HAL_Delay>

	t = HAL_GetTick();
 800059e:	f003 fd91 	bl	80040c4 <HAL_GetTick>
 80005a2:	60f8      	str	r0, [r7, #12]
	lcdTest();
 80005a4:	f001 fbd4 	bl	8001d50 <lcdTest>
	lcdSetTextFont(&Font16);
 80005a8:	48ca      	ldr	r0, [pc, #808]	; (80008d4 <demoLCD+0x39c>)
 80005aa:	f002 fd31 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80005ae:	f002 fe3d 	bl	800322c <lcdGetHeight>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461c      	mov	r4, r3
 80005b6:	f002 fe4d 	bl	8003254 <lcdGetTextFont>
 80005ba:	4603      	mov	r3, r0
 80005bc:	88db      	ldrh	r3, [r3, #6]
 80005be:	1ae3      	subs	r3, r4, r3
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	3b01      	subs	r3, #1
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	2000      	movs	r0, #0
 80005ca:	f002 fdb3 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80005ce:	2100      	movs	r1, #0
 80005d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005d4:	f002 fd2a 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", HAL_GetTick() - t);
 80005d8:	f003 fd74 	bl	80040c4 <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	48bc      	ldr	r0, [pc, #752]	; (80008d8 <demoLCD+0x3a0>)
 80005e6:	f002 fc87 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 80005ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ee:	f003 fd73 	bl	80040d8 <HAL_Delay>

	t = testText();
 80005f2:	f000 fa69 	bl	8000ac8 <testText>
 80005f6:	60f8      	str	r0, [r7, #12]
	lcdSetTextFont(&Font16);
 80005f8:	48b6      	ldr	r0, [pc, #728]	; (80008d4 <demoLCD+0x39c>)
 80005fa:	f002 fd09 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80005fe:	f002 fe15 	bl	800322c <lcdGetHeight>
 8000602:	4603      	mov	r3, r0
 8000604:	461c      	mov	r4, r3
 8000606:	f002 fe25 	bl	8003254 <lcdGetTextFont>
 800060a:	4603      	mov	r3, r0
 800060c:	88db      	ldrh	r3, [r3, #6]
 800060e:	1ae3      	subs	r3, r4, r3
 8000610:	b29b      	uxth	r3, r3
 8000612:	3b01      	subs	r3, #1
 8000614:	b29b      	uxth	r3, r3
 8000616:	4619      	mov	r1, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f002 fd8b 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800061e:	2100      	movs	r1, #0
 8000620:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000624:	f002 fd02 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", t);
 8000628:	68f9      	ldr	r1, [r7, #12]
 800062a:	48ab      	ldr	r0, [pc, #684]	; (80008d8 <demoLCD+0x3a0>)
 800062c:	f002 fc64 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 8000630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000634:	f003 fd50 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 8000638:	48a6      	ldr	r0, [pc, #664]	; (80008d4 <demoLCD+0x39c>)
 800063a:	f002 fce9 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 800063e:	f002 fdf5 	bl	800322c <lcdGetHeight>
 8000642:	4603      	mov	r3, r0
 8000644:	461c      	mov	r4, r3
 8000646:	f002 fe05 	bl	8003254 <lcdGetTextFont>
 800064a:	4603      	mov	r3, r0
 800064c:	88db      	ldrh	r3, [r3, #6]
 800064e:	1ae3      	subs	r3, r4, r3
 8000650:	b29b      	uxth	r3, r3
 8000652:	3b01      	subs	r3, #1
 8000654:	b29b      	uxth	r3, r3
 8000656:	4619      	mov	r1, r3
 8000658:	2000      	movs	r0, #0
 800065a:	f002 fd6b 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800065e:	2100      	movs	r1, #0
 8000660:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000664:	f002 fce2 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testLines(COLOR_CYAN));
 8000668:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800066c:	f000 fab8 	bl	8000be0 <testLines>
 8000670:	4603      	mov	r3, r0
 8000672:	4619      	mov	r1, r3
 8000674:	4898      	ldr	r0, [pc, #608]	; (80008d8 <demoLCD+0x3a0>)
 8000676:	f002 fc3f 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 800067a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800067e:	f003 fd2b 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 8000682:	4894      	ldr	r0, [pc, #592]	; (80008d4 <demoLCD+0x39c>)
 8000684:	f002 fcc4 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8000688:	f002 fdd0 	bl	800322c <lcdGetHeight>
 800068c:	4603      	mov	r3, r0
 800068e:	461c      	mov	r4, r3
 8000690:	f002 fde0 	bl	8003254 <lcdGetTextFont>
 8000694:	4603      	mov	r3, r0
 8000696:	88db      	ldrh	r3, [r3, #6]
 8000698:	1ae3      	subs	r3, r4, r3
 800069a:	b29b      	uxth	r3, r3
 800069c:	3b01      	subs	r3, #1
 800069e:	b29b      	uxth	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	2000      	movs	r0, #0
 80006a4:	f002 fd46 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80006a8:	2100      	movs	r1, #0
 80006aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006ae:	f002 fcbd 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFastLines(COLOR_RED, COLOR_BLUE));
 80006b2:	211f      	movs	r1, #31
 80006b4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80006b8:	f000 fbc6 	bl	8000e48 <testFastLines>
 80006bc:	4603      	mov	r3, r0
 80006be:	4619      	mov	r1, r3
 80006c0:	4885      	ldr	r0, [pc, #532]	; (80008d8 <demoLCD+0x3a0>)
 80006c2:	f002 fc19 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 80006c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ca:	f003 fd05 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 80006ce:	4881      	ldr	r0, [pc, #516]	; (80008d4 <demoLCD+0x39c>)
 80006d0:	f002 fc9e 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80006d4:	f002 fdaa 	bl	800322c <lcdGetHeight>
 80006d8:	4603      	mov	r3, r0
 80006da:	461c      	mov	r4, r3
 80006dc:	f002 fdba 	bl	8003254 <lcdGetTextFont>
 80006e0:	4603      	mov	r3, r0
 80006e2:	88db      	ldrh	r3, [r3, #6]
 80006e4:	1ae3      	subs	r3, r4, r3
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	4619      	mov	r1, r3
 80006ee:	2000      	movs	r0, #0
 80006f0:	f002 fd20 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80006f4:	2100      	movs	r1, #0
 80006f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006fa:	f002 fc97 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testRects(COLOR_GREEN));
 80006fe:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000702:	f000 fbe4 	bl	8000ece <testRects>
 8000706:	4603      	mov	r3, r0
 8000708:	4619      	mov	r1, r3
 800070a:	4873      	ldr	r0, [pc, #460]	; (80008d8 <demoLCD+0x3a0>)
 800070c:	f002 fbf4 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 8000710:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000714:	f003 fce0 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 8000718:	486e      	ldr	r0, [pc, #440]	; (80008d4 <demoLCD+0x39c>)
 800071a:	f002 fc79 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 800071e:	f002 fd85 	bl	800322c <lcdGetHeight>
 8000722:	4603      	mov	r3, r0
 8000724:	461c      	mov	r4, r3
 8000726:	f002 fd95 	bl	8003254 <lcdGetTextFont>
 800072a:	4603      	mov	r3, r0
 800072c:	88db      	ldrh	r3, [r3, #6]
 800072e:	1ae3      	subs	r3, r4, r3
 8000730:	b29b      	uxth	r3, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	b29b      	uxth	r3, r3
 8000736:	4619      	mov	r1, r3
 8000738:	2000      	movs	r0, #0
 800073a:	f002 fcfb 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800073e:	2100      	movs	r1, #0
 8000740:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000744:	f002 fc72 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFilledRects(COLOR_YELLOW, COLOR_MAGENTA));
 8000748:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800074c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000750:	f000 fc14 	bl	8000f7c <testFilledRects>
 8000754:	4603      	mov	r3, r0
 8000756:	4619      	mov	r1, r3
 8000758:	485f      	ldr	r0, [pc, #380]	; (80008d8 <demoLCD+0x3a0>)
 800075a:	f002 fbcd 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 800075e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000762:	f003 fcb9 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 8000766:	485b      	ldr	r0, [pc, #364]	; (80008d4 <demoLCD+0x39c>)
 8000768:	f002 fc52 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 800076c:	f002 fd5e 	bl	800322c <lcdGetHeight>
 8000770:	4603      	mov	r3, r0
 8000772:	461c      	mov	r4, r3
 8000774:	f002 fd6e 	bl	8003254 <lcdGetTextFont>
 8000778:	4603      	mov	r3, r0
 800077a:	88db      	ldrh	r3, [r3, #6]
 800077c:	1ae3      	subs	r3, r4, r3
 800077e:	b29b      	uxth	r3, r3
 8000780:	3b01      	subs	r3, #1
 8000782:	b29b      	uxth	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	2000      	movs	r0, #0
 8000788:	f002 fcd4 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800078c:	2100      	movs	r1, #0
 800078e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000792:	f002 fc4b 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFilledCircles(10, COLOR_MAGENTA));
 8000796:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800079a:	200a      	movs	r0, #10
 800079c:	f000 fc66 	bl	800106c <testFilledCircles>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4619      	mov	r1, r3
 80007a4:	484c      	ldr	r0, [pc, #304]	; (80008d8 <demoLCD+0x3a0>)
 80007a6:	f002 fba7 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 80007aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ae:	f003 fc93 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 80007b2:	4848      	ldr	r0, [pc, #288]	; (80008d4 <demoLCD+0x39c>)
 80007b4:	f002 fc2c 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80007b8:	f002 fd38 	bl	800322c <lcdGetHeight>
 80007bc:	4603      	mov	r3, r0
 80007be:	461c      	mov	r4, r3
 80007c0:	f002 fd48 	bl	8003254 <lcdGetTextFont>
 80007c4:	4603      	mov	r3, r0
 80007c6:	88db      	ldrh	r3, [r3, #6]
 80007c8:	1ae3      	subs	r3, r4, r3
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	3b01      	subs	r3, #1
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	2000      	movs	r0, #0
 80007d4:	f002 fcae 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80007d8:	2100      	movs	r1, #0
 80007da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007de:	f002 fc25 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testCircles(10, COLOR_WHITE));
 80007e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007e6:	200a      	movs	r0, #10
 80007e8:	f000 fc81 	bl	80010ee <testCircles>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4619      	mov	r1, r3
 80007f0:	4839      	ldr	r0, [pc, #228]	; (80008d8 <demoLCD+0x3a0>)
 80007f2:	f002 fb81 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 80007f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007fa:	f003 fc6d 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 80007fe:	4835      	ldr	r0, [pc, #212]	; (80008d4 <demoLCD+0x39c>)
 8000800:	f002 fc06 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8000804:	f002 fd12 	bl	800322c <lcdGetHeight>
 8000808:	4603      	mov	r3, r0
 800080a:	461c      	mov	r4, r3
 800080c:	f002 fd22 	bl	8003254 <lcdGetTextFont>
 8000810:	4603      	mov	r3, r0
 8000812:	88db      	ldrh	r3, [r3, #6]
 8000814:	1ae3      	subs	r3, r4, r3
 8000816:	b29b      	uxth	r3, r3
 8000818:	3b01      	subs	r3, #1
 800081a:	b29b      	uxth	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	2000      	movs	r0, #0
 8000820:	f002 fc88 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8000824:	2100      	movs	r1, #0
 8000826:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800082a:	f002 fbff 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testTriangles());
 800082e:	f000 fca2 	bl	8001176 <testTriangles>
 8000832:	4603      	mov	r3, r0
 8000834:	4619      	mov	r1, r3
 8000836:	4828      	ldr	r0, [pc, #160]	; (80008d8 <demoLCD+0x3a0>)
 8000838:	f002 fb5e 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 800083c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000840:	f003 fc4a 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 8000844:	4823      	ldr	r0, [pc, #140]	; (80008d4 <demoLCD+0x39c>)
 8000846:	f002 fbe3 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 800084a:	f002 fcef 	bl	800322c <lcdGetHeight>
 800084e:	4603      	mov	r3, r0
 8000850:	461c      	mov	r4, r3
 8000852:	f002 fcff 	bl	8003254 <lcdGetTextFont>
 8000856:	4603      	mov	r3, r0
 8000858:	88db      	ldrh	r3, [r3, #6]
 800085a:	1ae3      	subs	r3, r4, r3
 800085c:	b29b      	uxth	r3, r3
 800085e:	3b01      	subs	r3, #1
 8000860:	b29b      	uxth	r3, r3
 8000862:	4619      	mov	r1, r3
 8000864:	2000      	movs	r0, #0
 8000866:	f002 fc65 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800086a:	2100      	movs	r1, #0
 800086c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000870:	f002 fbdc 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFilledTriangles());
 8000874:	f000 fcec 	bl	8001250 <testFilledTriangles>
 8000878:	4603      	mov	r3, r0
 800087a:	4619      	mov	r1, r3
 800087c:	4816      	ldr	r0, [pc, #88]	; (80008d8 <demoLCD+0x3a0>)
 800087e:	f002 fb3b 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 8000882:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000886:	f003 fc27 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <demoLCD+0x39c>)
 800088c:	f002 fbc0 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8000890:	f002 fccc 	bl	800322c <lcdGetHeight>
 8000894:	4603      	mov	r3, r0
 8000896:	461c      	mov	r4, r3
 8000898:	f002 fcdc 	bl	8003254 <lcdGetTextFont>
 800089c:	4603      	mov	r3, r0
 800089e:	88db      	ldrh	r3, [r3, #6]
 80008a0:	1ae3      	subs	r3, r4, r3
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	3b01      	subs	r3, #1
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	2000      	movs	r0, #0
 80008ac:	f002 fc42 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80008b0:	2100      	movs	r1, #0
 80008b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008b6:	f002 fbb9 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testRoundRects());
 80008ba:	f000 fd87 	bl	80013cc <testRoundRects>
 80008be:	4603      	mov	r3, r0
 80008c0:	4619      	mov	r1, r3
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <demoLCD+0x3a0>)
 80008c4:	f002 fb18 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 80008c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008cc:	f003 fc04 	bl	80040d8 <HAL_Delay>
 80008d0:	e004      	b.n	80008dc <demoLCD+0x3a4>
 80008d2:	bf00      	nop
 80008d4:	20000010 	.word	0x20000010
 80008d8:	08006290 	.word	0x08006290

	lcdSetTextFont(&Font16);
 80008dc:	4824      	ldr	r0, [pc, #144]	; (8000970 <demoLCD+0x438>)
 80008de:	f002 fb97 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80008e2:	f002 fca3 	bl	800322c <lcdGetHeight>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461c      	mov	r4, r3
 80008ea:	f002 fcb3 	bl	8003254 <lcdGetTextFont>
 80008ee:	4603      	mov	r3, r0
 80008f0:	88db      	ldrh	r3, [r3, #6]
 80008f2:	1ae3      	subs	r3, r4, r3
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3b01      	subs	r3, #1
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	2000      	movs	r0, #0
 80008fe:	f002 fc19 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8000902:	2100      	movs	r1, #0
 8000904:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000908:	f002 fb90 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFilledRoundRects());
 800090c:	f000 fdbf 	bl	800148e <testFilledRoundRects>
 8000910:	4603      	mov	r3, r0
 8000912:	4619      	mov	r1, r3
 8000914:	4817      	ldr	r0, [pc, #92]	; (8000974 <demoLCD+0x43c>)
 8000916:	f002 faef 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 800091a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800091e:	f003 fbdb 	bl	80040d8 <HAL_Delay>

	lcdSetTextFont(&Font16);
 8000922:	4813      	ldr	r0, [pc, #76]	; (8000970 <demoLCD+0x438>)
 8000924:	f002 fb74 	bl	8003010 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8000928:	f002 fc80 	bl	800322c <lcdGetHeight>
 800092c:	4603      	mov	r3, r0
 800092e:	461c      	mov	r4, r3
 8000930:	f002 fc90 	bl	8003254 <lcdGetTextFont>
 8000934:	4603      	mov	r3, r0
 8000936:	88db      	ldrh	r3, [r3, #6]
 8000938:	1ae3      	subs	r3, r4, r3
 800093a:	b29b      	uxth	r3, r3
 800093c:	3b01      	subs	r3, #1
 800093e:	b29b      	uxth	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	2000      	movs	r0, #0
 8000944:	f002 fbf6 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8000948:	2100      	movs	r1, #0
 800094a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800094e:	f002 fb6d 	bl	800302c <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testDrawImage());
 8000952:	f000 fe05 	bl	8001560 <testDrawImage>
 8000956:	4603      	mov	r3, r0
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <demoLCD+0x43c>)
 800095c:	f002 facc 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(2000);
 8000960:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000964:	f003 fbb8 	bl	80040d8 <HAL_Delay>
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	20000010 	.word	0x20000010
 8000974:	08006290 	.word	0x08006290

08000978 <testFillScreen>:

unsigned long testFillScreen()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
	unsigned long start = HAL_GetTick(), t = 0;
 800097e:	f003 fba1 	bl	80040c4 <HAL_GetTick>
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
	lcdFillRGB(COLOR_BLACK);
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa83 	bl	8001e94 <lcdFillRGB>
	t += HAL_GetTick() - start;
 800098e:	f003 fb99 	bl	80040c4 <HAL_GetTick>
 8000992:	4602      	mov	r2, r0
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	4413      	add	r3, r2
 800099c:	603b      	str	r3, [r7, #0]
	lcdSetCursor(0, 0);
 800099e:	2100      	movs	r1, #0
 80009a0:	2000      	movs	r0, #0
 80009a2:	f002 fbc7 	bl	8003134 <lcdSetCursor>
	lcdSetTextFont(&Font24);
 80009a6:	4843      	ldr	r0, [pc, #268]	; (8000ab4 <testFillScreen+0x13c>)
 80009a8:	f002 fb32 	bl	8003010 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80009ac:	2100      	movs	r1, #0
 80009ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009b2:	f002 fb3b 	bl	800302c <lcdSetTextColor>
	lcdPrintf("BLACK");
 80009b6:	4840      	ldr	r0, [pc, #256]	; (8000ab8 <testFillScreen+0x140>)
 80009b8:	f002 fa9e 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(1000);
 80009bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c0:	f003 fb8a 	bl	80040d8 <HAL_Delay>
	start = HAL_GetTick();
 80009c4:	f003 fb7e 	bl	80040c4 <HAL_GetTick>
 80009c8:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_RED);
 80009ca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009ce:	f001 fa61 	bl	8001e94 <lcdFillRGB>
	t += HAL_GetTick() - start;
 80009d2:	f003 fb77 	bl	80040c4 <HAL_GetTick>
 80009d6:	4602      	mov	r2, r0
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	603b      	str	r3, [r7, #0]
	lcdSetCursor(0, 0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	f002 fba5 	bl	8003134 <lcdSetCursor>
	lcdSetTextFont(&Font24);
 80009ea:	4832      	ldr	r0, [pc, #200]	; (8000ab4 <testFillScreen+0x13c>)
 80009ec:	f002 fb10 	bl	8003010 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80009f0:	2100      	movs	r1, #0
 80009f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009f6:	f002 fb19 	bl	800302c <lcdSetTextColor>
	lcdPrintf("RED");
 80009fa:	4830      	ldr	r0, [pc, #192]	; (8000abc <testFillScreen+0x144>)
 80009fc:	f002 fa7c 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(1000);
 8000a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a04:	f003 fb68 	bl	80040d8 <HAL_Delay>
	start = HAL_GetTick();
 8000a08:	f003 fb5c 	bl	80040c4 <HAL_GetTick>
 8000a0c:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_GREEN);
 8000a0e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000a12:	f001 fa3f 	bl	8001e94 <lcdFillRGB>
	t += HAL_GetTick() - start;
 8000a16:	f003 fb55 	bl	80040c4 <HAL_GetTick>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	603b      	str	r3, [r7, #0]
	lcdSetCursor(0, 0);
 8000a26:	2100      	movs	r1, #0
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f002 fb83 	bl	8003134 <lcdSetCursor>
	lcdSetTextFont(&Font24);
 8000a2e:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <testFillScreen+0x13c>)
 8000a30:	f002 faee 	bl	8003010 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8000a34:	2100      	movs	r1, #0
 8000a36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a3a:	f002 faf7 	bl	800302c <lcdSetTextColor>
	lcdPrintf("GREEN");
 8000a3e:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <testFillScreen+0x148>)
 8000a40:	f002 fa5a 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(1000);
 8000a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a48:	f003 fb46 	bl	80040d8 <HAL_Delay>
	start = HAL_GetTick();
 8000a4c:	f003 fb3a 	bl	80040c4 <HAL_GetTick>
 8000a50:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_BLUE);
 8000a52:	201f      	movs	r0, #31
 8000a54:	f001 fa1e 	bl	8001e94 <lcdFillRGB>
	t += HAL_GetTick() - start;
 8000a58:	f003 fb34 	bl	80040c4 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	4413      	add	r3, r2
 8000a66:	603b      	str	r3, [r7, #0]
	lcdSetCursor(0, 0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f002 fb62 	bl	8003134 <lcdSetCursor>
	lcdSetTextFont(&Font24);
 8000a70:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <testFillScreen+0x13c>)
 8000a72:	f002 facd 	bl	8003010 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8000a76:	2100      	movs	r1, #0
 8000a78:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a7c:	f002 fad6 	bl	800302c <lcdSetTextColor>
	lcdPrintf("BLUE");
 8000a80:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <testFillScreen+0x14c>)
 8000a82:	f002 fa39 	bl	8002ef8 <lcdPrintf>
	HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f003 fb25 	bl	80040d8 <HAL_Delay>
	start = HAL_GetTick();
 8000a8e:	f003 fb19 	bl	80040c4 <HAL_GetTick>
 8000a92:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_BLACK);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f001 f9fd 	bl	8001e94 <lcdFillRGB>
	return t += HAL_GetTick() - start;
 8000a9a:	f003 fb13 	bl	80040c4 <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000020 	.word	0x20000020
 8000ab8:	080062a0 	.word	0x080062a0
 8000abc:	080062a8 	.word	0x080062a8
 8000ac0:	080062ac 	.word	0x080062ac
 8000ac4:	080062b4 	.word	0x080062b4

08000ac8 <testText>:

unsigned long testText()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	lcdFillRGB(COLOR_BLACK);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f001 f9e0 	bl	8001e94 <lcdFillRGB>
	unsigned long start = HAL_GetTick();
 8000ad4:	f003 faf6 	bl	80040c4 <HAL_GetTick>
 8000ad8:	6078      	str	r0, [r7, #4]
	lcdSetCursor(0, 0);
 8000ada:	2100      	movs	r1, #0
 8000adc:	2000      	movs	r0, #0
 8000ade:	f002 fb29 	bl	8003134 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ae8:	f002 faa0 	bl	800302c <lcdSetTextColor>
	lcdSetTextFont(&Font8);
 8000aec:	4829      	ldr	r0, [pc, #164]	; (8000b94 <testText+0xcc>)
 8000aee:	f002 fa8f 	bl	8003010 <lcdSetTextFont>
	lcdPrintf("Hello World!\r\n");
 8000af2:	4829      	ldr	r0, [pc, #164]	; (8000b98 <testText+0xd0>)
 8000af4:	f002 fa00 	bl	8002ef8 <lcdPrintf>
	lcdSetTextColor(COLOR_YELLOW, COLOR_BLACK);
 8000af8:	2100      	movs	r1, #0
 8000afa:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000afe:	f002 fa95 	bl	800302c <lcdSetTextColor>
	lcdSetTextFont(&Font12);
 8000b02:	4826      	ldr	r0, [pc, #152]	; (8000b9c <testText+0xd4>)
 8000b04:	f002 fa84 	bl	8003010 <lcdSetTextFont>
	lcdPrintf("%i\r\n", 1234567890);
 8000b08:	4925      	ldr	r1, [pc, #148]	; (8000ba0 <testText+0xd8>)
 8000b0a:	4826      	ldr	r0, [pc, #152]	; (8000ba4 <testText+0xdc>)
 8000b0c:	f002 f9f4 	bl	8002ef8 <lcdPrintf>
	lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 8000b10:	2100      	movs	r1, #0
 8000b12:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000b16:	f002 fa89 	bl	800302c <lcdSetTextColor>
	lcdSetTextFont(&Font16);
 8000b1a:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <testText+0xe0>)
 8000b1c:	f002 fa78 	bl	8003010 <lcdSetTextFont>
	lcdPrintf("%#X\r\n", 0xDEADBEEF);
 8000b20:	4922      	ldr	r1, [pc, #136]	; (8000bac <testText+0xe4>)
 8000b22:	4823      	ldr	r0, [pc, #140]	; (8000bb0 <testText+0xe8>)
 8000b24:	f002 f9e8 	bl	8002ef8 <lcdPrintf>
	lcdPrintf("\r\n");
 8000b28:	4822      	ldr	r0, [pc, #136]	; (8000bb4 <testText+0xec>)
 8000b2a:	f002 f9e5 	bl	8002ef8 <lcdPrintf>
	lcdSetTextColor(COLOR_GREEN, COLOR_BLACK);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000b34:	f002 fa7a 	bl	800302c <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8000b38:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <testText+0xf0>)
 8000b3a:	f002 fa69 	bl	8003010 <lcdSetTextFont>
	lcdPrintf("Groop\r\n");
 8000b3e:	481f      	ldr	r0, [pc, #124]	; (8000bbc <testText+0xf4>)
 8000b40:	f002 f9da 	bl	8002ef8 <lcdPrintf>
	lcdSetTextFont(&Font12);
 8000b44:	4815      	ldr	r0, [pc, #84]	; (8000b9c <testText+0xd4>)
 8000b46:	f002 fa63 	bl	8003010 <lcdSetTextFont>
	lcdPrintf("I implore thee,\r\n");
 8000b4a:	481d      	ldr	r0, [pc, #116]	; (8000bc0 <testText+0xf8>)
 8000b4c:	f002 f9d4 	bl	8002ef8 <lcdPrintf>
	lcdSetTextFont(&Font12);
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <testText+0xd4>)
 8000b52:	f002 fa5d 	bl	8003010 <lcdSetTextFont>
	lcdPrintf("my foonting turlingdromes.\r\n");
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <testText+0xfc>)
 8000b58:	f002 f9ce 	bl	8002ef8 <lcdPrintf>
	lcdPrintf("And hooptiously drangle me\r\n");
 8000b5c:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <testText+0x100>)
 8000b5e:	f002 f9cb 	bl	8002ef8 <lcdPrintf>
	lcdPrintf("with crinkly bindlewurdles,\r\n");
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <testText+0x104>)
 8000b64:	f002 f9c8 	bl	8002ef8 <lcdPrintf>
	lcdPrintf("Or I will rend thee\r\n");
 8000b68:	4819      	ldr	r0, [pc, #100]	; (8000bd0 <testText+0x108>)
 8000b6a:	f002 f9c5 	bl	8002ef8 <lcdPrintf>
	lcdPrintf("in the gobberwarts\r\n");
 8000b6e:	4819      	ldr	r0, [pc, #100]	; (8000bd4 <testText+0x10c>)
 8000b70:	f002 f9c2 	bl	8002ef8 <lcdPrintf>
	lcdPrintf("with my blurglecruncheon,\r\n");
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <testText+0x110>)
 8000b76:	f002 f9bf 	bl	8002ef8 <lcdPrintf>
	lcdPrintf("see if I don't!\r\n");
 8000b7a:	4818      	ldr	r0, [pc, #96]	; (8000bdc <testText+0x114>)
 8000b7c:	f002 f9bc 	bl	8002ef8 <lcdPrintf>
	return HAL_GetTick() - start;
 8000b80:	f003 faa0 	bl	80040c4 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	1ad3      	subs	r3, r2, r3
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000028 	.word	0x20000028
 8000b98:	080062bc 	.word	0x080062bc
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	499602d2 	.word	0x499602d2
 8000ba4:	080062cc 	.word	0x080062cc
 8000ba8:	20000010 	.word	0x20000010
 8000bac:	deadbeef 	.word	0xdeadbeef
 8000bb0:	080062d4 	.word	0x080062d4
 8000bb4:	080062dc 	.word	0x080062dc
 8000bb8:	20000018 	.word	0x20000018
 8000bbc:	080062e0 	.word	0x080062e0
 8000bc0:	080062e8 	.word	0x080062e8
 8000bc4:	080062fc 	.word	0x080062fc
 8000bc8:	0800631c 	.word	0x0800631c
 8000bcc:	0800633c 	.word	0x0800633c
 8000bd0:	0800635c 	.word	0x0800635c
 8000bd4:	08006374 	.word	0x08006374
 8000bd8:	0800638c 	.word	0x0800638c
 8000bdc:	080063a8 	.word	0x080063a8

08000be0 <testLines>:

unsigned long testLines(uint16_t color)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b08d      	sub	sp, #52	; 0x34
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
  unsigned long start, t;
  int           x1, y1, x2, y2,
                w = lcdGetWidth(),
 8000bea:	f002 fb15 	bl	8003218 <lcdGetWidth>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	61fb      	str	r3, [r7, #28]
                h = lcdGetHeight();
 8000bf2:	f002 fb1b 	bl	800322c <lcdGetHeight>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	61bb      	str	r3, [r7, #24]

  lcdFillRGB(COLOR_BLACK);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f001 f94a 	bl	8001e94 <lcdFillRGB>

  x1 = y1 = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  y2    = h - 1;
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	623b      	str	r3, [r7, #32]
  start = HAL_GetTick();
 8000c0e:	f003 fa59 	bl	80040c4 <HAL_GetTick>
 8000c12:	60f8      	str	r0, [r7, #12]
  for(x2 = 0; x2 < w; x2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
 8000c18:	e00f      	b.n	8000c3a <testLines+0x5a>
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	b218      	sxth	r0, r3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	b219      	sxth	r1, r3
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	b21c      	sxth	r4, r3
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	4623      	mov	r3, r4
 8000c30:	f001 fa14 	bl	800205c <lcdDrawLine>
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	3306      	adds	r3, #6
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
 8000c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	dbeb      	blt.n	8000c1a <testLines+0x3a>
  x2 = w - 1;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  for(y2 = 0; y2 < h; y2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
 8000c4c:	e00f      	b.n	8000c6e <testLines+0x8e>
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	b218      	sxth	r0, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	b219      	sxth	r1, r3
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	b21c      	sxth	r4, r3
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	4623      	mov	r3, r4
 8000c64:	f001 f9fa 	bl	800205c <lcdDrawLine>
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	3306      	adds	r3, #6
 8000c6c:	623b      	str	r3, [r7, #32]
 8000c6e:	6a3a      	ldr	r2, [r7, #32]
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	dbeb      	blt.n	8000c4e <testLines+0x6e>
  t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 8000c76:	f003 fa25 	bl	80040c4 <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	60bb      	str	r3, [r7, #8]

  HAL_Delay(1000);
 8000c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c86:	f003 fa27 	bl	80040d8 <HAL_Delay>
  lcdFillRGB(COLOR_BLACK);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f001 f902 	bl	8001e94 <lcdFillRGB>

  x1 = w - 1;
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
  y1 = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  y2 = h - 1;
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]

  start = HAL_GetTick();
 8000ca0:	f003 fa10 	bl	80040c4 <HAL_GetTick>
 8000ca4:	60f8      	str	r0, [r7, #12]

  for(x2 = 0; x2 < w; x2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8000caa:	e00f      	b.n	8000ccc <testLines+0xec>
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	b218      	sxth	r0, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	b219      	sxth	r1, r3
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	b21c      	sxth	r4, r3
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	4623      	mov	r3, r4
 8000cc2:	f001 f9cb 	bl	800205c <lcdDrawLine>
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	3306      	adds	r3, #6
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
 8000ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbeb      	blt.n	8000cac <testLines+0xcc>
  x2 = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  for(y2 = 0; y2 < h; y2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
 8000cdc:	e00f      	b.n	8000cfe <testLines+0x11e>
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	b218      	sxth	r0, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	b219      	sxth	r1, r3
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	b21c      	sxth	r4, r3
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	f001 f9b2 	bl	800205c <lcdDrawLine>
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
 8000cfa:	3306      	adds	r3, #6
 8000cfc:	623b      	str	r3, [r7, #32]
 8000cfe:	6a3a      	ldr	r2, [r7, #32]
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	dbeb      	blt.n	8000cde <testLines+0xfe>
  t += HAL_GetTick() - start;
 8000d06:	f003 f9dd 	bl	80040c4 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	4413      	add	r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]

  HAL_Delay(1000);
 8000d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1a:	f003 f9dd 	bl	80040d8 <HAL_Delay>
  lcdFillRGB(COLOR_BLACK);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f001 f8b8 	bl	8001e94 <lcdFillRGB>

  x1 = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  y1 = h - 1;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  y2 = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  start = HAL_GetTick();
 8000d32:	f003 f9c7 	bl	80040c4 <HAL_GetTick>
 8000d36:	60f8      	str	r0, [r7, #12]

  for(x2 = 0; x2 < w; x2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3c:	e00f      	b.n	8000d5e <testLines+0x17e>
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	b218      	sxth	r0, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	b219      	sxth	r1, r3
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	b21a      	sxth	r2, r3
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	b21c      	sxth	r4, r3
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4623      	mov	r3, r4
 8000d54:	f001 f982 	bl	800205c <lcdDrawLine>
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	3306      	adds	r3, #6
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	dbeb      	blt.n	8000d3e <testLines+0x15e>
  x2 = w - 1;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  for(y2 = 0; y2 < h; y2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
 8000d70:	e00f      	b.n	8000d92 <testLines+0x1b2>
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	b218      	sxth	r0, r3
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	b219      	sxth	r1, r3
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	b21a      	sxth	r2, r3
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	b21c      	sxth	r4, r3
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	4623      	mov	r3, r4
 8000d88:	f001 f968 	bl	800205c <lcdDrawLine>
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	3306      	adds	r3, #6
 8000d90:	623b      	str	r3, [r7, #32]
 8000d92:	6a3a      	ldr	r2, [r7, #32]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	dbeb      	blt.n	8000d72 <testLines+0x192>
  t += HAL_GetTick() - start;
 8000d9a:	f003 f993 	bl	80040c4 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	4413      	add	r3, r2
 8000da8:	60bb      	str	r3, [r7, #8]

  HAL_Delay(1000);
 8000daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dae:	f003 f993 	bl	80040d8 <HAL_Delay>
  lcdFillRGB(COLOR_BLACK);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f001 f86e 	bl	8001e94 <lcdFillRGB>

  x1 = w - 1;
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
  y1 = h - 1;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
  y2 = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]

  start = HAL_GetTick();
 8000dc8:	f003 f97c 	bl	80040c4 <HAL_GetTick>
 8000dcc:	60f8      	str	r0, [r7, #12]

  for(x2 = 0; x2 < w; x2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd2:	e00f      	b.n	8000df4 <testLines+0x214>
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	b218      	sxth	r0, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	b219      	sxth	r1, r3
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	b21c      	sxth	r4, r3
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	4623      	mov	r3, r4
 8000dea:	f001 f937 	bl	800205c <lcdDrawLine>
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	3306      	adds	r3, #6
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
 8000df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbeb      	blt.n	8000dd4 <testLines+0x1f4>
  x2 = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  for(y2 = 0; y2 < h; y2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
 8000e04:	e00f      	b.n	8000e26 <testLines+0x246>
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	b218      	sxth	r0, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	b219      	sxth	r1, r3
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	6a3b      	ldr	r3, [r7, #32]
 8000e14:	b21c      	sxth	r4, r3
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	f001 f91e 	bl	800205c <lcdDrawLine>
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	3306      	adds	r3, #6
 8000e24:	623b      	str	r3, [r7, #32]
 8000e26:	6a3a      	ldr	r2, [r7, #32]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dbeb      	blt.n	8000e06 <testLines+0x226>

  return t += HAL_GetTick() - start;
 8000e2e:	f003 f949 	bl	80040c4 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	372c      	adds	r7, #44	; 0x2c
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}

08000e48 <testFastLines>:

unsigned long testFastLines(uint16_t color1, uint16_t color2)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	80fb      	strh	r3, [r7, #6]
 8000e54:	4613      	mov	r3, r2
 8000e56:	80bb      	strh	r3, [r7, #4]
  unsigned long start;
  int x, y, w = lcdGetWidth(), h = lcdGetHeight();
 8000e58:	f002 f9de 	bl	8003218 <lcdGetWidth>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	f002 f9e4 	bl	800322c <lcdGetHeight>
 8000e64:	4603      	mov	r3, r0
 8000e66:	613b      	str	r3, [r7, #16]

  lcdFillRGB(COLOR_BLACK);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f001 f813 	bl	8001e94 <lcdFillRGB>
  start = HAL_GetTick();
 8000e6e:	f003 f929 	bl	80040c4 <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]
  for(y = 0; y < h; y += 5) lcdDrawHLine(0, w, y, color1);
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	e00a      	b.n	8000e90 <testFastLines+0x48>
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	b299      	uxth	r1, r3
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	2000      	movs	r0, #0
 8000e86:	f001 f853 	bl	8001f30 <lcdDrawHLine>
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	3305      	adds	r3, #5
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf0      	blt.n	8000e7a <testFastLines+0x32>
  for(x = 0; x < w; x += 5) lcdDrawVLine(x, 0, h, color2);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	e00a      	b.n	8000eb4 <testFastLines+0x6c>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	b298      	uxth	r0, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	f001 f887 	bl	8001fbc <lcdDrawVLine>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3305      	adds	r3, #5
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf0      	blt.n	8000e9e <testFastLines+0x56>

  return HAL_GetTick() - start;
 8000ebc:	f003 f902 	bl	80040c4 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	1ad3      	subs	r3, r2, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <testRects>:

unsigned long testRects(uint16_t color)
{
 8000ece:	b590      	push	{r4, r7, lr}
 8000ed0:	b08b      	sub	sp, #44	; 0x2c
 8000ed2:	af02      	add	r7, sp, #8
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	80fb      	strh	r3, [r7, #6]
  unsigned long start;
  int n, i, i2,
      cx = lcdGetWidth()  / 2,
 8000ed8:	f002 f99e 	bl	8003218 <lcdGetWidth>
 8000edc:	4603      	mov	r3, r0
 8000ede:	085b      	lsrs	r3, r3, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	61bb      	str	r3, [r7, #24]
      cy = lcdGetHeight() / 2;
 8000ee4:	f002 f9a2 	bl	800322c <lcdGetHeight>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	085b      	lsrs	r3, r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	617b      	str	r3, [r7, #20]

  lcdFillRGB(COLOR_BLACK);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 ffcf 	bl	8001e94 <lcdFillRGB>
  n = min(lcdGetWidth(), lcdGetHeight());
 8000ef6:	f002 f98f 	bl	8003218 <lcdGetWidth>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461c      	mov	r4, r3
 8000efe:	f002 f995 	bl	800322c <lcdGetHeight>
 8000f02:	4603      	mov	r3, r0
 8000f04:	429c      	cmp	r4, r3
 8000f06:	d203      	bcs.n	8000f10 <testRects+0x42>
 8000f08:	f002 f986 	bl	8003218 <lcdGetWidth>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	e002      	b.n	8000f16 <testRects+0x48>
 8000f10:	f002 f98c 	bl	800322c <lcdGetHeight>
 8000f14:	4603      	mov	r3, r0
 8000f16:	613b      	str	r3, [r7, #16]
  start = HAL_GetTick();
 8000f18:	f003 f8d4 	bl	80040c4 <HAL_GetTick>
 8000f1c:	60f8      	str	r0, [r7, #12]
  for(i = 2; i < n; i += 6)
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e01e      	b.n	8000f62 <testRects+0x94>
  {
    i2 = i / 2;
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	0fda      	lsrs	r2, r3, #31
 8000f28:	4413      	add	r3, r2
 8000f2a:	105b      	asrs	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
    lcdDrawRect(cx - i2, cy - i2, i, i, color);
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b218      	sxth	r0, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b219      	sxth	r1, r3
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	b21c      	sxth	r4, r3
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	4623      	mov	r3, r4
 8000f58:	f001 f91e 	bl	8002198 <lcdDrawRect>
  for(i = 2; i < n; i += 6)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	3306      	adds	r3, #6
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	dbdc      	blt.n	8000f24 <testRects+0x56>
  }

  return HAL_GetTick() - start;
 8000f6a:	f003 f8ab 	bl	80040c4 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad3      	subs	r3, r2, r3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3724      	adds	r7, #36	; 0x24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd90      	pop	{r4, r7, pc}

08000f7c <testFilledRects>:

unsigned long testFilledRects(uint16_t color1, uint16_t color2)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b08d      	sub	sp, #52	; 0x34
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	80bb      	strh	r3, [r7, #4]
  unsigned long start, t = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  int n, i, i2,
      cx = lcdGetWidth() / 2 - 1,
 8000f90:	f002 f942 	bl	8003218 <lcdGetWidth>
 8000f94:	4603      	mov	r3, r0
 8000f96:	085b      	lsrs	r3, r3, #1
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
      cy = lcdGetHeight() / 2 - 1;
 8000f9e:	f002 f945 	bl	800322c <lcdGetHeight>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	085b      	lsrs	r3, r3, #1
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]

  lcdFillRGB(COLOR_BLACK);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 ff71 	bl	8001e94 <lcdFillRGB>
  n = min(lcdGetWidth(), lcdGetHeight());
 8000fb2:	f002 f931 	bl	8003218 <lcdGetWidth>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461c      	mov	r4, r3
 8000fba:	f002 f937 	bl	800322c <lcdGetHeight>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	d203      	bcs.n	8000fcc <testFilledRects+0x50>
 8000fc4:	f002 f928 	bl	8003218 <lcdGetWidth>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	e002      	b.n	8000fd2 <testFilledRects+0x56>
 8000fcc:	f002 f92e 	bl	800322c <lcdGetHeight>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	617b      	str	r3, [r7, #20]

  for(i = n; i > 0; i -= 6)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	623b      	str	r3, [r7, #32]
 8000fd8:	e040      	b.n	800105c <testFilledRects+0xe0>
  {
    i2 = i / 2;
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	0fda      	lsrs	r2, r3, #31
 8000fde:	4413      	add	r3, r2
 8000fe0:	105b      	asrs	r3, r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
    start = HAL_GetTick();
 8000fe4:	f003 f86e 	bl	80040c4 <HAL_GetTick>
 8000fe8:	60f8      	str	r0, [r7, #12]
    lcdFillRect(cx-i2, cy-i2, i, i, color1);
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b218      	sxth	r0, r3
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	b29b      	uxth	r3, r3
 8001004:	b219      	sxth	r1, r3
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	b21a      	sxth	r2, r3
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	b21c      	sxth	r4, r3
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4623      	mov	r3, r4
 8001014:	f001 fc64 	bl	80028e0 <lcdFillRect>
    t    += HAL_GetTick() - start;
 8001018:	f003 f854 	bl	80040c4 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001024:	4413      	add	r3, r2
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    // Outlines are not included in timing results
    lcdDrawRect(cx-i2, cy-i2, i, i, color1);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	b29a      	uxth	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	b29b      	uxth	r3, r3
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	b218      	sxth	r0, r3
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	b29a      	uxth	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	b29b      	uxth	r3, r3
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	b219      	sxth	r1, r3
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	b21a      	sxth	r2, r3
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	b21c      	sxth	r4, r3
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4623      	mov	r3, r4
 8001052:	f001 f8a1 	bl	8002198 <lcdDrawRect>
  for(i = n; i > 0; i -= 6)
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	3b06      	subs	r3, #6
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dcbb      	bgt.n	8000fda <testFilledRects+0x5e>
  }

  return t;
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001064:	4618      	mov	r0, r3
 8001066:	372c      	adds	r7, #44	; 0x2c
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}

0800106c <testFilledCircles>:

unsigned long testFilledCircles(uint8_t radius, uint16_t color)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	80bb      	strh	r3, [r7, #4]
  unsigned long start;
  int x, y, w = lcdGetWidth(), h = lcdGetHeight(), r2 = radius * 2;
 800107c:	f002 f8cc 	bl	8003218 <lcdGetWidth>
 8001080:	4603      	mov	r3, r0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	f002 f8d2 	bl	800322c <lcdGetHeight>
 8001088:	4603      	mov	r3, r0
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	60fb      	str	r3, [r7, #12]

  lcdFillRGB(COLOR_BLACK);
 8001092:	2000      	movs	r0, #0
 8001094:	f000 fefe 	bl	8001e94 <lcdFillRGB>
  start = HAL_GetTick();
 8001098:	f003 f814 	bl	80040c4 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  for(x = radius; x < w; x += r2)
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e017      	b.n	80010d4 <testFilledCircles+0x68>
  {
    for(y = radius; y < h; y += r2)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	e00c      	b.n	80010c4 <testFilledCircles+0x58>
    {
      lcdFillCircle(x, y, radius, color);
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	b218      	sxth	r0, r3
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	b219      	sxth	r1, r3
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	88bb      	ldrh	r3, [r7, #4]
 80010b8:	f001 fb3a 	bl	8002730 <lcdFillCircle>
    for(y = radius; y < h; y += r2)
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbee      	blt.n	80010aa <testFilledCircles+0x3e>
  for(x = radius; x < w; x += r2)
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbe3      	blt.n	80010a4 <testFilledCircles+0x38>
    }
  }

  return HAL_GetTick() - start;
 80010dc:	f002 fff2 	bl	80040c4 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3720      	adds	r7, #32
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <testCircles>:

unsigned long testCircles(uint8_t radius, uint16_t color)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b088      	sub	sp, #32
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	460a      	mov	r2, r1
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	4613      	mov	r3, r2
 80010fc:	80bb      	strh	r3, [r7, #4]
  unsigned long start;
  int x, y, r2 = radius * 2,
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	617b      	str	r3, [r7, #20]
      w = lcdGetWidth()  + radius,
 8001104:	f002 f888 	bl	8003218 <lcdGetWidth>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4413      	add	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
      h = lcdGetHeight() + radius;
 8001112:	f002 f88b 	bl	800322c <lcdGetHeight>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4413      	add	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

  // Screen is not cleared for this one -- this is
  // intentional and does not affect the reported time.
  start = HAL_GetTick();
 8001120:	f002 ffd0 	bl	80040c4 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  for(x = 0; x < w; x += r2)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e017      	b.n	800115c <testCircles+0x6e>
  {
    for(y = 0; y < h; y += r2)
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	e00c      	b.n	800114c <testCircles+0x5e>
    {
      lcdDrawCircle(x, y, radius, color);
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	b218      	sxth	r0, r3
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	b219      	sxth	r1, r3
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	b21a      	sxth	r2, r3
 800113e:	88bb      	ldrh	r3, [r7, #4]
 8001140:	f001 f9e8 	bl	8002514 <lcdDrawCircle>
    for(y = 0; y < h; y += r2)
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	4413      	add	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbee      	blt.n	8001132 <testCircles+0x44>
  for(x = 0; x < w; x += r2)
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4413      	add	r3, r2
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbe3      	blt.n	800112c <testCircles+0x3e>
    }
  }

  return HAL_GetTick() - start;
 8001164:	f002 ffae 	bl	80040c4 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
}
 800116e:	4618      	mov	r0, r3
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <testTriangles>:

unsigned long testTriangles()
{
 8001176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af04      	add	r7, sp, #16
  unsigned long start;
  int n, i, cx = lcdGetWidth() / 2 - 1,
 800117e:	f002 f84b 	bl	8003218 <lcdGetWidth>
 8001182:	4603      	mov	r3, r0
 8001184:	085b      	lsrs	r3, r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	3b01      	subs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
            cy = lcdGetHeight() / 2 - 1;
 800118c:	f002 f84e 	bl	800322c <lcdGetHeight>
 8001190:	4603      	mov	r3, r0
 8001192:	085b      	lsrs	r3, r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	3b01      	subs	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]

  lcdFillRGB(COLOR_BLACK);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 fe7a 	bl	8001e94 <lcdFillRGB>
  n = min(cx, cy);
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	bfa8      	it	ge
 80011a8:	4613      	movge	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  start = HAL_GetTick();
 80011ac:	f002 ff8a 	bl	80040c4 <HAL_GetTick>
 80011b0:	6078      	str	r0, [r7, #4]
  for(i = 0; i < n; i += 5)
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e03d      	b.n	8001234 <testTriangles+0xbe>
  {
    lcdDrawTriangle(
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	b21e      	sxth	r6, r3
      cx    , cy - i, // peak
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 80011c8:	fa0f f883 	sxth.w	r8, r3
      cx - i, cy + i, // bottom left
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 80011d8:	fa0f f983 	sxth.w	r9, r3
      cx - i, cy + i, // bottom left
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 80011e8:	fa0f fa83 	sxth.w	sl, r3
      cx + i, cy + i, // bottom right
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 80011f8:	b21c      	sxth	r4, r3
      cx + i, cy + i, // bottom right
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	b29b      	uxth	r3, r3
 8001202:	4413      	add	r3, r2
 8001204:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 8001206:	b21d      	sxth	r5, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	b2d1      	uxtb	r1, r2
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f002 f87d 	bl	8003314 <lcdColor565>
 800121a:	4603      	mov	r3, r0
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	9501      	str	r5, [sp, #4]
 8001220:	9400      	str	r4, [sp, #0]
 8001222:	4653      	mov	r3, sl
 8001224:	464a      	mov	r2, r9
 8001226:	4641      	mov	r1, r8
 8001228:	4630      	mov	r0, r6
 800122a:	f001 fa47 	bl	80026bc <lcdDrawTriangle>
  for(i = 0; i < n; i += 5)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3305      	adds	r3, #5
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbbd      	blt.n	80011b8 <testTriangles+0x42>
      lcdColor565(i, i, i));
  }

  return HAL_GetTick() - start;
 800123c:	f002 ff42 	bl	80040c4 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	1ad3      	subs	r3, r2, r3
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001250 <testFilledTriangles>:

unsigned long testFilledTriangles()
{
 8001250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001254:	b08a      	sub	sp, #40	; 0x28
 8001256:	af04      	add	r7, sp, #16
  unsigned long start, t = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  int i, cx = lcdGetWidth() / 2 - 1,
 800125c:	f001 ffdc 	bl	8003218 <lcdGetWidth>
 8001260:	4603      	mov	r3, r0
 8001262:	085b      	lsrs	r3, r3, #1
 8001264:	b29b      	uxth	r3, r3
 8001266:	3b01      	subs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
         cy = lcdGetHeight() / 2 - 1;
 800126a:	f001 ffdf 	bl	800322c <lcdGetHeight>
 800126e:	4603      	mov	r3, r0
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	3b01      	subs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]

  lcdFillRGB(COLOR_BLACK);
 8001278:	2000      	movs	r0, #0
 800127a:	f000 fe0b 	bl	8001e94 <lcdFillRGB>
  for(i = min(cx, cy); i > 10; i -= 5)
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4293      	cmp	r3, r2
 8001284:	bfa8      	it	ge
 8001286:	4613      	movge	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	e095      	b.n	80013b8 <testFilledTriangles+0x168>
  {
    start = HAL_GetTick();
 800128c:	f002 ff1a 	bl	80040c4 <HAL_GetTick>
 8001290:	6078      	str	r0, [r7, #4]
    lcdFillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, lcdColor565(0, i*10, i*10));
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	b21e      	sxth	r6, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	b29a      	uxth	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	b29b      	uxth	r3, r3
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	fa0f f883 	sxth.w	r8, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	fa0f f983 	sxth.w	r9, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	fa0f fa83 	sxth.w	sl, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b21c      	sxth	r4, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	b29b      	uxth	r3, r3
 80012e0:	b21d      	sxth	r5, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b2d9      	uxtb	r1, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	2000      	movs	r0, #0
 8001302:	f002 f807 	bl	8003314 <lcdColor565>
 8001306:	4603      	mov	r3, r0
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	9501      	str	r5, [sp, #4]
 800130c:	9400      	str	r4, [sp, #0]
 800130e:	4653      	mov	r3, sl
 8001310:	464a      	mov	r2, r9
 8001312:	4641      	mov	r1, r8
 8001314:	4630      	mov	r0, r6
 8001316:	f001 fba4 	bl	8002a62 <lcdFillTriangle>
    t += HAL_GetTick() - start;
 800131a:	f002 fed3 	bl	80040c4 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	4413      	add	r3, r2
 8001328:	617b      	str	r3, [r7, #20]
    lcdFillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, lcdColor565(i*10, i*10, 0));
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	b21e      	sxth	r6, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	b29a      	uxth	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	b29b      	uxth	r3, r3
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	fa0f f883 	sxth.w	r8, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	b29a      	uxth	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	b29b      	uxth	r3, r3
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	b29b      	uxth	r3, r3
 800134a:	fa0f f983 	sxth.w	r9, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	b29a      	uxth	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	fa0f fa83 	sxth.w	sl, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	b29a      	uxth	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21c      	sxth	r4, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	b29a      	uxth	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4413      	add	r3, r2
 8001376:	b29b      	uxth	r3, r3
 8001378:	b21d      	sxth	r5, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	461a      	mov	r2, r3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4413      	add	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	b2d8      	uxtb	r0, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4413      	add	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	f001 ffbb 	bl	8003314 <lcdColor565>
 800139e:	4603      	mov	r3, r0
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	9501      	str	r5, [sp, #4]
 80013a4:	9400      	str	r4, [sp, #0]
 80013a6:	4653      	mov	r3, sl
 80013a8:	464a      	mov	r2, r9
 80013aa:	4641      	mov	r1, r8
 80013ac:	4630      	mov	r0, r6
 80013ae:	f001 fb58 	bl	8002a62 <lcdFillTriangle>
  for(i = min(cx, cy); i > 10; i -= 5)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	3b05      	subs	r3, #5
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b0a      	cmp	r3, #10
 80013bc:	f73f af66 	bgt.w	800128c <testFilledTriangles+0x3c>
  }

  return t;
 80013c0:	697b      	ldr	r3, [r7, #20]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080013cc <testRoundRects>:

unsigned long testRoundRects()
{
 80013cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013d0:	b089      	sub	sp, #36	; 0x24
 80013d2:	af02      	add	r7, sp, #8
  unsigned long start;
  int w, i, i2,
      cx = lcdGetWidth() / 2 - 1,
 80013d4:	f001 ff20 	bl	8003218 <lcdGetWidth>
 80013d8:	4603      	mov	r3, r0
 80013da:	085b      	lsrs	r3, r3, #1
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3b01      	subs	r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
      cy = lcdGetHeight() / 2 - 1;
 80013e2:	f001 ff23 	bl	800322c <lcdGetHeight>
 80013e6:	4603      	mov	r3, r0
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3b01      	subs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]

  lcdFillRGB(COLOR_BLACK);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 fd4f 	bl	8001e94 <lcdFillRGB>
  w = lcdGetWidth(), lcdGetHeight();
 80013f6:	f001 ff0f 	bl	8003218 <lcdGetWidth>
 80013fa:	4603      	mov	r3, r0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	f001 ff15 	bl	800322c <lcdGetHeight>
  start = HAL_GetTick();
 8001402:	f002 fe5f 	bl	80040c4 <HAL_GetTick>
 8001406:	6078      	str	r0, [r7, #4]
  for(i = 0; i < w; i += 6)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e031      	b.n	8001472 <testRoundRects+0xa6>
  {
    i2 = i / 2;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	0fda      	lsrs	r2, r3, #31
 8001412:	4413      	add	r3, r2
 8001414:	105b      	asrs	r3, r3, #1
 8001416:	603b      	str	r3, [r7, #0]
    lcdDrawRoundRect(cx-i2, cy-i2, i, i, i/8, lcdColor565(i, 0, 0));
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	b29a      	uxth	r2, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	b21d      	sxth	r5, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	b29a      	uxth	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	b29b      	uxth	r3, r3
 8001432:	b21e      	sxth	r6, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa0f f883 	sxth.w	r8, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa0f f983 	sxth.w	r9, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	da00      	bge.n	8001448 <testRoundRects+0x7c>
 8001446:	3307      	adds	r3, #7
 8001448:	10db      	asrs	r3, r3, #3
 800144a:	b21c      	sxth	r4, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f001 ff5d 	bl	8003314 <lcdColor565>
 800145a:	4603      	mov	r3, r0
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	9400      	str	r4, [sp, #0]
 8001460:	464b      	mov	r3, r9
 8001462:	4642      	mov	r2, r8
 8001464:	4631      	mov	r1, r6
 8001466:	4628      	mov	r0, r5
 8001468:	f000 fedf 	bl	800222a <lcdDrawRoundRect>
  for(i = 0; i < w; i += 6)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3306      	adds	r3, #6
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbc9      	blt.n	800140e <testRoundRects+0x42>
  }

  return HAL_GetTick() - start;
 800147a:	f002 fe23 	bl	80040c4 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	1ad3      	subs	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800148e <testFilledRoundRects>:

unsigned long testFilledRoundRects(void)
{
 800148e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af02      	add	r7, sp, #8
  unsigned long start;
  int i, i2,
      cx = lcdGetWidth()  / 2 - 1,
 8001496:	f001 febf 	bl	8003218 <lcdGetWidth>
 800149a:	4603      	mov	r3, r0
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3b01      	subs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
      cy = lcdGetHeight() / 2 - 1;
 80014a4:	f001 fec2 	bl	800322c <lcdGetHeight>
 80014a8:	4603      	mov	r3, r0
 80014aa:	085b      	lsrs	r3, r3, #1
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3b01      	subs	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]

  lcdFillRGB(COLOR_BLACK);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fcee 	bl	8001e94 <lcdFillRGB>
  start = HAL_GetTick();
 80014b8:	f002 fe04 	bl	80040c4 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  for(i = min(lcdGetWidth(), lcdGetHeight()); i > 20; i -=6 )
 80014be:	f001 feab 	bl	8003218 <lcdGetWidth>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461c      	mov	r4, r3
 80014c6:	f001 feb1 	bl	800322c <lcdGetHeight>
 80014ca:	4603      	mov	r3, r0
 80014cc:	429c      	cmp	r4, r3
 80014ce:	d203      	bcs.n	80014d8 <testFilledRoundRects+0x4a>
 80014d0:	f001 fea2 	bl	8003218 <lcdGetWidth>
 80014d4:	4603      	mov	r3, r0
 80014d6:	e002      	b.n	80014de <testFilledRoundRects+0x50>
 80014d8:	f001 fea8 	bl	800322c <lcdGetHeight>
 80014dc:	4603      	mov	r3, r0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e031      	b.n	8001546 <testFilledRoundRects+0xb8>
  {
    i2 = i / 2;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	0fda      	lsrs	r2, r3, #31
 80014e6:	4413      	add	r3, r2
 80014e8:	105b      	asrs	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
    lcdFillRoundRect(cx - i2, cy - i2, i, i, i / 8, lcdColor565(0, i, 0));
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b21d      	sxth	r5, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	b29b      	uxth	r3, r3
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	b21e      	sxth	r6, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa0f f883 	sxth.w	r8, r3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa0f f983 	sxth.w	r9, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	da00      	bge.n	800151c <testFilledRoundRects+0x8e>
 800151a:	3307      	adds	r3, #7
 800151c:	10db      	asrs	r3, r3, #3
 800151e:	b21c      	sxth	r4, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	2000      	movs	r0, #0
 800152a:	f001 fef3 	bl	8003314 <lcdColor565>
 800152e:	4603      	mov	r3, r0
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	9400      	str	r4, [sp, #0]
 8001534:	464b      	mov	r3, r9
 8001536:	4642      	mov	r2, r8
 8001538:	4631      	mov	r1, r6
 800153a:	4628      	mov	r0, r5
 800153c:	f001 fa2c 	bl	8002998 <lcdFillRoundRect>
  for(i = min(lcdGetWidth(), lcdGetHeight()); i > 20; i -=6 )
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3b06      	subs	r3, #6
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2b14      	cmp	r3, #20
 800154a:	dcca      	bgt.n	80014e2 <testFilledRoundRects+0x54>
  }

  return HAL_GetTick() - start;
 800154c:	f002 fdba 	bl	80040c4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001560 <testDrawImage>:

unsigned long testDrawImage(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
	unsigned long start;

	lcdFillRGB(COLOR_BLACK);
 8001566:	2000      	movs	r0, #0
 8001568:	f000 fc94 	bl	8001e94 <lcdFillRGB>
	start = HAL_GetTick();
 800156c:	f002 fdaa 	bl	80040c4 <HAL_GetTick>
 8001570:	6078      	str	r0, [r7, #4]
	if (lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE || lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE_MIRROR)
 8001572:	f001 fe65 	bl	8003240 <lcdGetOrientation>
 8001576:	4603      	mov	r3, r0
 8001578:	2b01      	cmp	r3, #1
 800157a:	d004      	beq.n	8001586 <testDrawImage+0x26>
 800157c:	f001 fe60 	bl	8003240 <lcdGetOrientation>
 8001580:	4603      	mov	r3, r0
 8001582:	2b03      	cmp	r3, #3
 8001584:	d110      	bne.n	80015a8 <testDrawImage+0x48>
	{
		lcdDrawImage((lcdGetWidth() - bmSTLogo.xSize) / 2, 0, &bmSTLogo);
 8001586:	f001 fe47 	bl	8003218 <lcdGetWidth>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <testDrawImage+0x7c>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	0fda      	lsrs	r2, r3, #31
 8001596:	4413      	add	r3, r2
 8001598:	105b      	asrs	r3, r3, #1
 800159a:	b29b      	uxth	r3, r3
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <testDrawImage+0x7c>)
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fbab 	bl	8002cfc <lcdDrawImage>
 80015a6:	e00f      	b.n	80015c8 <testDrawImage+0x68>
	}
	else
	{
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
 80015a8:	f001 fe40 	bl	800322c <lcdGetHeight>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <testDrawImage+0x7c>)
 80015b2:	885b      	ldrh	r3, [r3, #2]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	0fda      	lsrs	r2, r3, #31
 80015b8:	4413      	add	r3, r2
 80015ba:	105b      	asrs	r3, r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <testDrawImage+0x7c>)
 80015c0:	4619      	mov	r1, r3
 80015c2:	2000      	movs	r0, #0
 80015c4:	f001 fb9a 	bl	8002cfc <lcdDrawImage>
	}
	return HAL_GetTick() - start;
 80015c8:	f002 fd7c 	bl	80040c4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1ad3      	subs	r3, r2, r3
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	080262d8 	.word	0x080262d8

080015e0 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
	  HAL_Init();
 80015e6:	f002 fd15 	bl	8004014 <HAL_Init>
	  SystemClock_Config();
 80015ea:	f000 f873 	bl	80016d4 <SystemClock_Config>

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0318 	add.w	r3, r7, #24
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]

	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <bspInit+0xe4>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a30      	ldr	r2, [pc, #192]	; (80016c4 <bspInit+0xe4>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <bspInit+0xe4>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <bspInit+0xe4>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <bspInit+0xe4>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <bspInit+0xe4>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <bspInit+0xe4>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a24      	ldr	r2, [pc, #144]	; (80016c4 <bspInit+0xe4>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <bspInit+0xe4>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <bspInit+0xe4>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <bspInit+0xe4>)
 800164a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <bspInit+0xe4>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <bspInit+0xe4>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <bspInit+0xe4>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <bspInit+0xe4>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]

	// LCD Backlight Contorl Pin  &  SPI2 CS(NSS) Pin Configure
	GPIO_InitStruct.Pin = LCD_BL_Pin|SPI2_CS_Pin;
 8001674:	f241 0301 	movw	r3, #4097	; 0x1001
 8001678:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167e:	2301      	movs	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2302      	movs	r3, #2
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	4619      	mov	r1, r3
 800168c:	480e      	ldr	r0, [pc, #56]	; (80016c8 <bspInit+0xe8>)
 800168e:	f002 fe55 	bl	800433c <HAL_GPIO_Init>

	// XPT2046 : PEN (Touch screen interrupt detection pin) Configure
    GPIO_InitStruct.Pin = T_PEN_Pin;
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <bspInit+0xec>)
 800169a:	61fb      	str	r3, [r7, #28]
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	4619      	mov	r1, r3
 80016a6:	480a      	ldr	r0, [pc, #40]	; (80016d0 <bspInit+0xf0>)
 80016a8:	f002 fe48 	bl	800433c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2017      	movs	r0, #23
 80016b2:	f002 fe0c 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016b6:	2017      	movs	r0, #23
 80016b8:	f002 fe25 	bl	8004306 <HAL_NVIC_EnableIRQ>

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010c00 	.word	0x40010c00
 80016cc:	10210000 	.word	0x10210000
 80016d0:	40010800 	.word	0x40010800

080016d4 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b090      	sub	sp, #64	; 0x40
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	2228      	movs	r2, #40	; 0x28
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 f960 	bl	80059a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001704:	2301      	movs	r3, #1
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001708:	2302      	movs	r3, #2
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800170c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001712:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	4618      	mov	r0, r3
 800171e:	f002 ffe9 	bl	80046f4 <HAL_RCC_OscConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001728:	f000 f819 	bl	800175e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172c:	230f      	movs	r3, #15
 800172e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001730:	2302      	movs	r3, #2
 8001732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2102      	movs	r1, #2
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fa54 	bl	8004bf4 <HAL_RCC_ClockConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001752:	f000 f804 	bl	800175e <Error_Handler>
  }
}
 8001756:	bf00      	nop
 8001758:	3740      	adds	r7, #64	; 0x40
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001762:	b672      	cpsid	i
}
 8001764:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001766:	e7fe      	b.n	8001766 <Error_Handler+0x8>

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_MspInit+0x5c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_MspInit+0x5c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6193      	str	r3, [r2, #24]
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_MspInit+0x5c>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_MspInit+0x5c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_MspInit+0x5c>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_MspInit+0x60>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_MspInit+0x60>)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010000 	.word	0x40010000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f002 fc45 	bl	80040a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}

0800181a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800181e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001822:	f002 ff4f 	bl	80046c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f004 f86a 	bl	8005934 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20010000 	.word	0x20010000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000148 	.word	0x20000148
 8001894:	20000318 	.word	0x20000318

08001898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018a6:	e003      	b.n	80018b0 <LoopCopyDataInit>

080018a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018ae:	3104      	adds	r1, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018b0:	480a      	ldr	r0, [pc, #40]	; (80018dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018b8:	d3f6      	bcc.n	80018a8 <CopyDataInit>
  ldr r2, =_sbss
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018bc:	e002      	b.n	80018c4 <LoopFillZerobss>

080018be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018c0:	f842 3b04 	str.w	r3, [r2], #4

080018c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018c8:	d3f9      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ca:	f7ff ffe5 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f004 f837 	bl	8005940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d2:	f004 f823 	bl	800591c <main>
  bx lr
 80018d6:	4770      	bx	lr
  ldr r3, =_sidata
 80018d8:	08026328 	.word	0x08026328
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018e0:	20000124 	.word	0x20000124
  ldr r2, =_sbss
 80018e4:	20000124 	.word	0x20000124
  ldr r3, = _ebss
 80018e8:	20000318 	.word	0x20000318

080018ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC1_2_IRQHandler>
	...

080018f0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <MX_FSMC_Init+0xbc>)
 800190a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800190e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001912:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <MX_FSMC_Init+0xc0>)
 8001914:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <MX_FSMC_Init+0xbc>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <MX_FSMC_Init+0xbc>)
 800192a:	2210      	movs	r2, #16
 800192c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <MX_FSMC_Init+0xbc>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001950:	2200      	movs	r2, #0
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001956:	2200      	movs	r2, #0
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MX_FSMC_Init+0xbc>)
 800195c:	2200      	movs	r2, #0
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_FSMC_Init+0xbc>)
 8001962:	2200      	movs	r2, #0
 8001964:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001966:	230f      	movs	r3, #15
 8001968:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800196a:	230f      	movs	r3, #15
 800196c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800196e:	23ff      	movs	r3, #255	; 0xff
 8001970:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001972:	230f      	movs	r3, #15
 8001974:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001976:	2310      	movs	r3, #16
 8001978:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800197a:	2311      	movs	r3, #17
 800197c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <MX_FSMC_Init+0xbc>)
 800198a:	f003 fea3 	bl	80056d4 <HAL_SRAM_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001994:	f7ff fee3 	bl	800175e <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_FSMC_Init+0xc4>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <MX_FSMC_Init+0xc4>)
 800199e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a2:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200002bc 	.word	0x200002bc
 80019b0:	a0000104 	.word	0xa0000104
 80019b4:	40010000 	.word	0x40010000

080019b8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_FSMC_MspInit+0x78>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d129      	bne.n	8001a28 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_FSMC_MspInit+0x78>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_FSMC_MspInit+0x7c>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <HAL_FSMC_MspInit+0x7c>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_FSMC_MspInit+0x7c>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80019f2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80019f6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	480c      	ldr	r0, [pc, #48]	; (8001a38 <HAL_FSMC_MspInit+0x80>)
 8001a08:	f002 fc98 	bl	800433c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a0c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001a10:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4806      	ldr	r0, [pc, #24]	; (8001a3c <HAL_FSMC_MspInit+0x84>)
 8001a22:	f002 fc8b 	bl	800433c <HAL_GPIO_Init>
 8001a26:	e000      	b.n	8001a2a <HAL_FSMC_MspInit+0x72>
    return;
 8001a28:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */
/* USER CODE END FSMC_MspInit 1 */
}
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000014c 	.word	0x2000014c
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40011800 	.word	0x40011800
 8001a3c:	40011400 	.word	0x40011400

08001a40 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001a48:	f7ff ffb6 	bl	80019b8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af02      	add	r7, sp, #8
  MX_FSMC_Init();
 8001a5a:	f7ff ff49 	bl	80018f0 <MX_FSMC_Init>
  HAL_SRAM_MspInit(&hsram1);
 8001a5e:	48b7      	ldr	r0, [pc, #732]	; (8001d3c <lcdInit+0x2e8>)
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_SRAM_MspInit>


  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001a64:	2300      	movs	r3, #0
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2101      	movs	r1, #1
 8001a72:	2000      	movs	r0, #0
 8001a74:	f001 fcd6 	bl	8003424 <lcdBuildMemoryAccessControlConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4bb0      	ldr	r3, [pc, #704]	; (8001d40 <lcdInit+0x2ec>)
 8001a7e:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001a80:	2300      	movs	r3, #0
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	2301      	movs	r3, #1
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f001 fcc8 	bl	8003424 <lcdBuildMemoryAccessControlConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4baa      	ldr	r3, [pc, #680]	; (8001d44 <lcdInit+0x2f0>)
 8001a9a:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f001 fcba 	bl	8003424 <lcdBuildMemoryAccessControlConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4ba4      	ldr	r3, [pc, #656]	; (8001d48 <lcdInit+0x2f4>)
 8001ab6:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	2301      	movs	r3, #1
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f001 fcac 	bl	8003424 <lcdBuildMemoryAccessControlConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b9e      	ldr	r3, [pc, #632]	; (8001d4c <lcdInit+0x2f8>)
 8001ad2:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 8001ad4:	f001 fc70 	bl	80033b8 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 8001ad8:	2028      	movs	r0, #40	; 0x28
 8001ada:	f001 fc77 	bl	80033cc <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 8001ade:	20cf      	movs	r0, #207	; 0xcf
 8001ae0:	f001 fc74 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x00);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f001 fc81 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x83);
 8001aea:	2083      	movs	r0, #131	; 0x83
 8001aec:	f001 fc7e 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x30);
 8001af0:	2030      	movs	r0, #48	; 0x30
 8001af2:	f001 fc7b 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(0xED);
 8001af6:	20ed      	movs	r0, #237	; 0xed
 8001af8:	f001 fc68 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x64);
 8001afc:	2064      	movs	r0, #100	; 0x64
 8001afe:	f001 fc75 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x03);
 8001b02:	2003      	movs	r0, #3
 8001b04:	f001 fc72 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x12);
 8001b08:	2012      	movs	r0, #18
 8001b0a:	f001 fc6f 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x81);
 8001b0e:	2081      	movs	r0, #129	; 0x81
 8001b10:	f001 fc6c 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(0xE8);
 8001b14:	20e8      	movs	r0, #232	; 0xe8
 8001b16:	f001 fc59 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x85);
 8001b1a:	2085      	movs	r0, #133	; 0x85
 8001b1c:	f001 fc66 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x01);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f001 fc63 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x79);
 8001b26:	2079      	movs	r0, #121	; 0x79
 8001b28:	f001 fc60 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(0xCB);
 8001b2c:	20cb      	movs	r0, #203	; 0xcb
 8001b2e:	f001 fc4d 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x39);
 8001b32:	2039      	movs	r0, #57	; 0x39
 8001b34:	f001 fc5a 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x2C);
 8001b38:	202c      	movs	r0, #44	; 0x2c
 8001b3a:	f001 fc57 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x00);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f001 fc54 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x34);
 8001b44:	2034      	movs	r0, #52	; 0x34
 8001b46:	f001 fc51 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x02);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f001 fc4e 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(0xF7);
 8001b50:	20f7      	movs	r0, #247	; 0xf7
 8001b52:	f001 fc3b 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x20);
 8001b56:	2020      	movs	r0, #32
 8001b58:	f001 fc48 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(0xEA);
 8001b5c:	20ea      	movs	r0, #234	; 0xea
 8001b5e:	f001 fc35 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x00);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f001 fc42 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x00);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f001 fc3f 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8001b6e:	20c0      	movs	r0, #192	; 0xc0
 8001b70:	f001 fc2c 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x26);
 8001b74:	2026      	movs	r0, #38	; 0x26
 8001b76:	f001 fc39 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8001b7a:	20c1      	movs	r0, #193	; 0xc1
 8001b7c:	f001 fc26 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x11);
 8001b80:	2011      	movs	r0, #17
 8001b82:	f001 fc33 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8001b86:	20c5      	movs	r0, #197	; 0xc5
 8001b88:	f001 fc20 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x35);
 8001b8c:	2035      	movs	r0, #53	; 0x35
 8001b8e:	f001 fc2d 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x3E);
 8001b92:	203e      	movs	r0, #62	; 0x3e
 8001b94:	f001 fc2a 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8001b98:	20c7      	movs	r0, #199	; 0xc7
 8001b9a:	f001 fc17 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0xBE);
 8001b9e:	20be      	movs	r0, #190	; 0xbe
 8001ba0:	f001 fc24 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8001ba4:	2036      	movs	r0, #54	; 0x36
 8001ba6:	f001 fc11 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8001baa:	4b65      	ldr	r3, [pc, #404]	; (8001d40 <lcdInit+0x2ec>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f001 fc1b 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8001bb6:	203a      	movs	r0, #58	; 0x3a
 8001bb8:	f001 fc08 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x55);
 8001bbc:	2055      	movs	r0, #85	; 0x55
 8001bbe:	f001 fc15 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8001bc2:	20b1      	movs	r0, #177	; 0xb1
 8001bc4:	f001 fc02 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x00);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f001 fc0f 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x1B);
 8001bce:	201b      	movs	r0, #27
 8001bd0:	f001 fc0c 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(0xF2);
 8001bd4:	20f2      	movs	r0, #242	; 0xf2
 8001bd6:	f001 fbf9 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x08);
 8001bda:	2008      	movs	r0, #8
 8001bdc:	f001 fc06 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 8001be0:	2026      	movs	r0, #38	; 0x26
 8001be2:	f001 fbf3 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x01);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f001 fc00 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 8001bec:	20e0      	movs	r0, #224	; 0xe0
 8001bee:	f001 fbed 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x1F);
 8001bf2:	201f      	movs	r0, #31
 8001bf4:	f001 fbfa 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x1A);
 8001bf8:	201a      	movs	r0, #26
 8001bfa:	f001 fbf7 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x18);
 8001bfe:	2018      	movs	r0, #24
 8001c00:	f001 fbf4 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x0A);
 8001c04:	200a      	movs	r0, #10
 8001c06:	f001 fbf1 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x0F);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f001 fbee 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x06);
 8001c10:	2006      	movs	r0, #6
 8001c12:	f001 fbeb 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x45);
 8001c16:	2045      	movs	r0, #69	; 0x45
 8001c18:	f001 fbe8 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x87);
 8001c1c:	2087      	movs	r0, #135	; 0x87
 8001c1e:	f001 fbe5 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x32);
 8001c22:	2032      	movs	r0, #50	; 0x32
 8001c24:	f001 fbe2 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x0A);
 8001c28:	200a      	movs	r0, #10
 8001c2a:	f001 fbdf 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x07);
 8001c2e:	2007      	movs	r0, #7
 8001c30:	f001 fbdc 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x02);
 8001c34:	2002      	movs	r0, #2
 8001c36:	f001 fbd9 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x07);
 8001c3a:	2007      	movs	r0, #7
 8001c3c:	f001 fbd6 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x05);
 8001c40:	2005      	movs	r0, #5
 8001c42:	f001 fbd3 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f001 fbd0 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8001c4c:	20e1      	movs	r0, #225	; 0xe1
 8001c4e:	f001 fbbd 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x00);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f001 fbca 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x25);
 8001c58:	2025      	movs	r0, #37	; 0x25
 8001c5a:	f001 fbc7 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x27);
 8001c5e:	2027      	movs	r0, #39	; 0x27
 8001c60:	f001 fbc4 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x05);
 8001c64:	2005      	movs	r0, #5
 8001c66:	f001 fbc1 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x10);
 8001c6a:	2010      	movs	r0, #16
 8001c6c:	f001 fbbe 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x09);
 8001c70:	2009      	movs	r0, #9
 8001c72:	f001 fbbb 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x3A);
 8001c76:	203a      	movs	r0, #58	; 0x3a
 8001c78:	f001 fbb8 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x78);
 8001c7c:	2078      	movs	r0, #120	; 0x78
 8001c7e:	f001 fbb5 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x4D);
 8001c82:	204d      	movs	r0, #77	; 0x4d
 8001c84:	f001 fbb2 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x05);
 8001c88:	2005      	movs	r0, #5
 8001c8a:	f001 fbaf 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x18);
 8001c8e:	2018      	movs	r0, #24
 8001c90:	f001 fbac 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x0D);
 8001c94:	200d      	movs	r0, #13
 8001c96:	f001 fba9 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x38);
 8001c9a:	2038      	movs	r0, #56	; 0x38
 8001c9c:	f001 fba6 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x3A);
 8001ca0:	203a      	movs	r0, #58	; 0x3a
 8001ca2:	f001 fba3 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x1F);
 8001ca6:	201f      	movs	r0, #31
 8001ca8:	f001 fba0 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8001cac:	202a      	movs	r0, #42	; 0x2a
 8001cae:	f001 fb8d 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x00);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f001 fb9a 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x00);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f001 fb97 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x00);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f001 fb94 	bl	80033ec <lcdWriteData>
  lcdWriteData(0xEF);
 8001cc4:	20ef      	movs	r0, #239	; 0xef
 8001cc6:	f001 fb91 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001cca:	202b      	movs	r0, #43	; 0x2b
 8001ccc:	f001 fb7e 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x00);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f001 fb8b 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x00);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f001 fb88 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x01);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f001 fb85 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x3F);
 8001ce2:	203f      	movs	r0, #63	; 0x3f
 8001ce4:	f001 fb82 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8001ce8:	20b7      	movs	r0, #183	; 0xb7
 8001cea:	f001 fb6f 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x07);
 8001cee:	2007      	movs	r0, #7
 8001cf0:	f001 fb7c 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8001cf4:	20b6      	movs	r0, #182	; 0xb6
 8001cf6:	f001 fb69 	bl	80033cc <lcdWriteCommand>
  lcdWriteData(0x0A);
 8001cfa:	200a      	movs	r0, #10
 8001cfc:	f001 fb76 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x82);
 8001d00:	2082      	movs	r0, #130	; 0x82
 8001d02:	f001 fb73 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x27);
 8001d06:	2027      	movs	r0, #39	; 0x27
 8001d08:	f001 fb70 	bl	80033ec <lcdWriteData>
  lcdWriteData(0x00);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f001 fb6d 	bl	80033ec <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8001d12:	2011      	movs	r0, #17
 8001d14:	f001 fb5a 	bl	80033cc <lcdWriteCommand>
  HAL_Delay(100);
 8001d18:	2064      	movs	r0, #100	; 0x64
 8001d1a:	f002 f9dd 	bl	80040d8 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8001d1e:	2029      	movs	r0, #41	; 0x29
 8001d20:	f001 fb54 	bl	80033cc <lcdWriteCommand>
  HAL_Delay(100);
 8001d24:	2064      	movs	r0, #100	; 0x64
 8001d26:	f002 f9d7 	bl	80040d8 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8001d2a:	202c      	movs	r0, #44	; 0x2c
 8001d2c:	f001 fb4e 	bl	80033cc <lcdWriteCommand>

  lcdBacklightOn();
 8001d30:	f001 fa66 	bl	8003200 <lcdBacklightOn>
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200002bc 	.word	0x200002bc
 8001d40:	20000154 	.word	0x20000154
 8001d44:	20000155 	.word	0x20000155
 8001d48:	20000156 	.word	0x20000156
 8001d4c:	20000157 	.word	0x20000157

08001d50 <lcdTest>:

void lcdTest(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001d56:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <lcdTest+0x140>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <lcdTest+0x140>)
 8001d60:	885b      	ldrh	r3, [r3, #2]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2100      	movs	r1, #0
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f001 f9fd 	bl	8003168 <lcdSetWindow>

	uint8_t stripSize = lcdProperties.height / 8;
 8001d6e:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <lcdTest+0x140>)
 8001d70:	885b      	ldrh	r3, [r3, #2]
 8001d72:	08db      	lsrs	r3, r3, #3
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	71fb      	strb	r3, [r7, #7]

	for (int y = 0; y < lcdProperties.height; y++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	e07c      	b.n	8001e78 <lcdTest+0x128>
	{
		for (int x = 0; x < lcdProperties.width; x++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	e070      	b.n	8001e66 <lcdTest+0x116>
		{
		  if (y > lcdProperties.height - 1 - (stripSize * 1)) lcdWriteData(COLOR_WHITE);
 8001d84:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <lcdTest+0x140>)
 8001d86:	885b      	ldrh	r3, [r3, #2]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dd04      	ble.n	8001d9e <lcdTest+0x4e>
 8001d94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d98:	f001 fb28 	bl	80033ec <lcdWriteData>
 8001d9c:	e060      	b.n	8001e60 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 2)) lcdWriteData(COLOR_BLUE);
 8001d9e:	4b3c      	ldr	r3, [pc, #240]	; (8001e90 <lcdTest+0x140>)
 8001da0:	885b      	ldrh	r3, [r3, #2]
 8001da2:	1e5a      	subs	r2, r3, #1
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dd03      	ble.n	8001db8 <lcdTest+0x68>
 8001db0:	201f      	movs	r0, #31
 8001db2:	f001 fb1b 	bl	80033ec <lcdWriteData>
 8001db6:	e053      	b.n	8001e60 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 3)) lcdWriteData(COLOR_GREEN);
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <lcdTest+0x140>)
 8001dba:	885b      	ldrh	r3, [r3, #2]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	1acb      	subs	r3, r1, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dd04      	ble.n	8001dd8 <lcdTest+0x88>
 8001dce:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001dd2:	f001 fb0b 	bl	80033ec <lcdWriteData>
 8001dd6:	e043      	b.n	8001e60 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 4)) lcdWriteData(COLOR_CYAN);
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <lcdTest+0x140>)
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dd04      	ble.n	8001df4 <lcdTest+0xa4>
 8001dea:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001dee:	f001 fafd 	bl	80033ec <lcdWriteData>
 8001df2:	e035      	b.n	8001e60 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 5)) lcdWriteData(COLOR_RED);
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <lcdTest+0x140>)
 8001df6:	885b      	ldrh	r3, [r3, #2]
 8001df8:	1e59      	subs	r1, r3, #1
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	079b      	lsls	r3, r3, #30
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dd04      	ble.n	8001e18 <lcdTest+0xc8>
 8001e0e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e12:	f001 faeb 	bl	80033ec <lcdWriteData>
 8001e16:	e023      	b.n	8001e60 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 6)) lcdWriteData(COLOR_MAGENTA);
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <lcdTest+0x140>)
 8001e1a:	885b      	ldrh	r3, [r3, #2]
 8001e1c:	1e59      	subs	r1, r3, #1
 8001e1e:	79fa      	ldrb	r2, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	440b      	add	r3, r1
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dd04      	ble.n	8001e3a <lcdTest+0xea>
 8001e30:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001e34:	f001 fada 	bl	80033ec <lcdWriteData>
 8001e38:	e012      	b.n	8001e60 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 7)) lcdWriteData(COLOR_YELLOW);
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <lcdTest+0x140>)
 8001e3c:	885b      	ldrh	r3, [r3, #2]
 8001e3e:	1e5a      	subs	r2, r3, #1
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	4619      	mov	r1, r3
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	1acb      	subs	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dd04      	ble.n	8001e5a <lcdTest+0x10a>
 8001e50:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001e54:	f001 faca 	bl	80033ec <lcdWriteData>
 8001e58:	e002      	b.n	8001e60 <lcdTest+0x110>
		  else lcdWriteData(COLOR_BLACK);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f001 fac6 	bl	80033ec <lcdWriteData>
		for (int x = 0; x < lcdProperties.width; x++)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3301      	adds	r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <lcdTest+0x140>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	db88      	blt.n	8001d84 <lcdTest+0x34>
	for (int y = 0; y < lcdProperties.height; y++)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <lcdTest+0x140>)
 8001e7a:	885b      	ldrh	r3, [r3, #2]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	f6ff af7c 	blt.w	8001d7e <lcdTest+0x2e>
		}
	}
}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000030 	.word	0x20000030

08001e94 <lcdFillRGB>:

void lcdFillRGB(uint16_t color)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <lcdFillRGB+0x50>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <lcdFillRGB+0x50>)
 8001ea8:	885b      	ldrh	r3, [r3, #2]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f001 f959 	bl	8003168 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <lcdFillRGB+0x50>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <lcdFillRGB+0x50>)
 8001ebe:	885b      	ldrh	r3, [r3, #2]
 8001ec0:	fb03 f302 	mul.w	r3, r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8001ec6:	e003      	b.n	8001ed0 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 fa8e 	bl	80033ec <lcdWriteData>
  while(dimensions--)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1e5a      	subs	r2, r3, #1
 8001ed4:	60fa      	str	r2, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f6      	bne.n	8001ec8 <lcdFillRGB+0x34>
  }
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000030 	.word	0x20000030

08001ee8 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	80bb      	strh	r3, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <lcdDrawPixel+0x44>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d20f      	bcs.n	8001f24 <lcdDrawPixel+0x3c>
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <lcdDrawPixel+0x44>)
 8001f06:	885b      	ldrh	r3, [r3, #2]
 8001f08:	88ba      	ldrh	r2, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d20a      	bcs.n	8001f24 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	88b9      	ldrh	r1, [r7, #4]
 8001f14:	88f8      	ldrh	r0, [r7, #6]
 8001f16:	f001 f927 	bl	8003168 <lcdSetWindow>
    lcdWriteData(color);
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 fa65 	bl	80033ec <lcdWriteData>
 8001f22:	e000      	b.n	8001f26 <lcdDrawPixel+0x3e>
        return;
 8001f24:	bf00      	nop
}
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000030 	.word	0x20000030

08001f30 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4623      	mov	r3, r4
 8001f40:	80fb      	strh	r3, [r7, #6]
 8001f42:	4603      	mov	r3, r0
 8001f44:	80bb      	strh	r3, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	807b      	strh	r3, [r7, #2]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8001f4e:	88ba      	ldrh	r2, [r7, #4]
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d205      	bcs.n	8001f62 <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	817b      	strh	r3, [r7, #10]
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	80fb      	strh	r3, [r7, #6]
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <lcdDrawHLine+0x88>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	88ba      	ldrh	r2, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d303      	bcc.n	8001f74 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <lcdDrawHLine+0x88>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <lcdDrawHLine+0x88>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	88fa      	ldrh	r2, [r7, #6]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d303      	bcc.n	8001f86 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <lcdDrawHLine+0x88>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	88ba      	ldrh	r2, [r7, #4]
 8001f8a:	8879      	ldrh	r1, [r7, #2]
 8001f8c:	88f8      	ldrh	r0, [r7, #6]
 8001f8e:	f001 f8eb 	bl	8003168 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e006      	b.n	8001fa6 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8001f98:	883b      	ldrh	r3, [r7, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 fa26 	bl	80033ec <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	88bb      	ldrh	r3, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	ddf4      	ble.n	8001f98 <lcdDrawHLine+0x68>
	}
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	20000030 	.word	0x20000030

08001fbc <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	4608      	mov	r0, r1
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4623      	mov	r3, r4
 8001fcc:	80fb      	strh	r3, [r7, #6]
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80bb      	strh	r3, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	807b      	strh	r3, [r7, #2]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	88bb      	ldrh	r3, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d205      	bcs.n	8001fee <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	80bb      	strh	r3, [r7, #4]
 8001fea:	897b      	ldrh	r3, [r7, #10]
 8001fec:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <lcdDrawVLine+0x9c>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d303      	bcc.n	8002000 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <lcdDrawVLine+0x9c>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <lcdDrawVLine+0x9c>)
 8002002:	885b      	ldrh	r3, [r3, #2]
 8002004:	88ba      	ldrh	r2, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	d303      	bcc.n	8002012 <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <lcdDrawVLine+0x9c>)
 800200c:	885b      	ldrh	r3, [r3, #2]
 800200e:	3b01      	subs	r3, #1
 8002010:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <lcdDrawVLine+0x9c>)
 8002014:	885b      	ldrh	r3, [r3, #2]
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	429a      	cmp	r2, r3
 800201a:	d303      	bcc.n	8002024 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <lcdDrawVLine+0x9c>)
 800201e:	885b      	ldrh	r3, [r3, #2]
 8002020:	3b01      	subs	r3, #1
 8002022:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	88b9      	ldrh	r1, [r7, #4]
 800202a:	88f8      	ldrh	r0, [r7, #6]
 800202c:	f001 f89c 	bl	8003168 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e006      	b.n	8002044 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8002036:	883b      	ldrh	r3, [r7, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f001 f9d7 	bl	80033ec <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3301      	adds	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	ddf4      	ble.n	8002036 <lcdDrawVLine+0x7a>
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	bf00      	nop
 8002058:	20000030 	.word	0x20000030

0800205c <lcdDrawLine>:
 * \param color	Color
 *
 * \return void
 */
void lcdDrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4604      	mov	r4, r0
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	461a      	mov	r2, r3
 800206a:	4623      	mov	r3, r4
 800206c:	80fb      	strh	r3, [r7, #6]
 800206e:	4603      	mov	r3, r0
 8002070:	80bb      	strh	r3, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	807b      	strh	r3, [r7, #2]
 8002076:	4613      	mov	r3, r2
 8002078:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 800207a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800207e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002088:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800208c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002094:	1acb      	subs	r3, r1, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	bfb8      	it	lt
 800209a:	425b      	neglt	r3, r3
 800209c:	429a      	cmp	r2, r3
 800209e:	bfcc      	ite	gt
 80020a0:	2301      	movgt	r3, #1
 80020a2:	2300      	movle	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	837b      	strh	r3, [r7, #26]
	if (steep)
 80020a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <lcdDrawLine+0x6c>
	{
		swap(x1, y1);
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	833b      	strh	r3, [r7, #24]
 80020b4:	88bb      	ldrh	r3, [r7, #4]
 80020b6:	80fb      	strh	r3, [r7, #6]
 80020b8:	8b3b      	ldrh	r3, [r7, #24]
 80020ba:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	82fb      	strh	r3, [r7, #22]
 80020c0:	883b      	ldrh	r3, [r7, #0]
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	8afb      	ldrh	r3, [r7, #22]
 80020c6:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2)
 80020c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dd0b      	ble.n	80020ec <lcdDrawLine+0x90>
	{
		swap(x1, x2);
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	82bb      	strh	r3, [r7, #20]
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	8abb      	ldrh	r3, [r7, #20]
 80020de:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 80020e0:	88bb      	ldrh	r3, [r7, #4]
 80020e2:	827b      	strh	r3, [r7, #18]
 80020e4:	883b      	ldrh	r3, [r7, #0]
 80020e6:	80bb      	strh	r3, [r7, #4]
 80020e8:	8a7b      	ldrh	r3, [r7, #18]
 80020ea:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 80020ec:	887a      	ldrh	r2, [r7, #2]
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 80020f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80020fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bfb8      	it	lt
 8002104:	425b      	neglt	r3, r3
 8002106:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8002108:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800210c:	0fda      	lsrs	r2, r3, #31
 800210e:	4413      	add	r3, r2
 8002110:	105b      	asrs	r3, r3, #1
 8002112:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2)
 8002114:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002118:	f9b7 3000 	ldrsh.w	r3, [r7]
 800211c:	429a      	cmp	r2, r3
 800211e:	da02      	bge.n	8002126 <lcdDrawLine+0xca>
	{
		ystep = 1;
 8002120:	2301      	movs	r3, #1
 8002122:	83bb      	strh	r3, [r7, #28]
 8002124:	e02d      	b.n	8002182 <lcdDrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8002126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212a:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++)
 800212c:	e029      	b.n	8002182 <lcdDrawLine+0x126>
	{
		if (steep)
 800212e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d006      	beq.n	8002144 <lcdDrawLine+0xe8>
		{
			lcdDrawPixel(y1, x1, color);
 8002136:	88bb      	ldrh	r3, [r7, #4]
 8002138:	88f9      	ldrh	r1, [r7, #6]
 800213a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fed3 	bl	8001ee8 <lcdDrawPixel>
 8002142:	e005      	b.n	8002150 <lcdDrawLine+0xf4>
		}
		else
		{
			lcdDrawPixel(x1, y1, color);
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	88b9      	ldrh	r1, [r7, #4]
 8002148:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fecc 	bl	8001ee8 <lcdDrawPixel>
		}
		err -= dy;
 8002150:	8bfa      	ldrh	r2, [r7, #30]
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	b29b      	uxth	r3, r3
 8002158:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 800215a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800215e:	2b00      	cmp	r3, #0
 8002160:	da09      	bge.n	8002176 <lcdDrawLine+0x11a>
		{
			y1 += ystep;
 8002162:	88ba      	ldrh	r2, [r7, #4]
 8002164:	8bbb      	ldrh	r3, [r7, #28]
 8002166:	4413      	add	r3, r2
 8002168:	b29b      	uxth	r3, r3
 800216a:	80bb      	strh	r3, [r7, #4]
			err += dx;
 800216c:	8bfa      	ldrh	r2, [r7, #30]
 800216e:	8a3b      	ldrh	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++)
 8002176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217a:	b29b      	uxth	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	b29b      	uxth	r3, r3
 8002180:	80fb      	strh	r3, [r7, #6]
 8002182:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800218a:	429a      	cmp	r2, r3
 800218c:	ddcf      	ble.n	800212e <lcdDrawLine+0xd2>
		}
	}
}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	3724      	adds	r7, #36	; 0x24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd90      	pop	{r4, r7, pc}

08002198 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4604      	mov	r4, r0
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4623      	mov	r3, r4
 80021a8:	80fb      	strh	r3, [r7, #6]
 80021aa:	4603      	mov	r3, r0
 80021ac:	80bb      	strh	r3, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	807b      	strh	r3, [r7, #2]
 80021b2:	4613      	mov	r3, r2
 80021b4:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 80021b6:	88f8      	ldrh	r0, [r7, #6]
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	4413      	add	r3, r2
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b299      	uxth	r1, r3
 80021c4:	88ba      	ldrh	r2, [r7, #4]
 80021c6:	8b3b      	ldrh	r3, [r7, #24]
 80021c8:	f7ff feb2 	bl	8001f30 <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 80021cc:	88f8      	ldrh	r0, [r7, #6]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	4413      	add	r3, r2
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b299      	uxth	r1, r3
 80021da:	88ba      	ldrh	r2, [r7, #4]
 80021dc:	883b      	ldrh	r3, [r7, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	8b3b      	ldrh	r3, [r7, #24]
 80021e8:	f7ff fea2 	bl	8001f30 <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 80021ec:	88f8      	ldrh	r0, [r7, #6]
 80021ee:	88b9      	ldrh	r1, [r7, #4]
 80021f0:	88ba      	ldrh	r2, [r7, #4]
 80021f2:	883b      	ldrh	r3, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	8b3b      	ldrh	r3, [r7, #24]
 80021fe:	f7ff fedd 	bl	8001fbc <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	4413      	add	r3, r2
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b298      	uxth	r0, r3
 800220e:	88b9      	ldrh	r1, [r7, #4]
 8002210:	88ba      	ldrh	r2, [r7, #4]
 8002212:	883b      	ldrh	r3, [r7, #0]
 8002214:	4413      	add	r3, r2
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	8b3b      	ldrh	r3, [r7, #24]
 800221e:	f7ff fecd 	bl	8001fbc <lcdDrawVLine>
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}

0800222a <lcdDrawRoundRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800222a:	b590      	push	{r4, r7, lr}
 800222c:	b085      	sub	sp, #20
 800222e:	af02      	add	r7, sp, #8
 8002230:	4604      	mov	r4, r0
 8002232:	4608      	mov	r0, r1
 8002234:	4611      	mov	r1, r2
 8002236:	461a      	mov	r2, r3
 8002238:	4623      	mov	r3, r4
 800223a:	80fb      	strh	r3, [r7, #6]
 800223c:	4603      	mov	r3, r0
 800223e:	80bb      	strh	r3, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdDrawHLine(x + r, x + w - r, y, color);
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	8b3b      	ldrh	r3, [r7, #24]
 800224c:	4413      	add	r3, r2
 800224e:	b298      	uxth	r0, r3
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	4413      	add	r3, r2
 8002256:	b29a      	uxth	r2, r3
 8002258:	8b3b      	ldrh	r3, [r7, #24]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	b299      	uxth	r1, r3
 800225e:	88ba      	ldrh	r2, [r7, #4]
 8002260:	8bbb      	ldrh	r3, [r7, #28]
 8002262:	f7ff fe65 	bl	8001f30 <lcdDrawHLine>
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	8b3b      	ldrh	r3, [r7, #24]
 800226a:	4413      	add	r3, r2
 800226c:	b298      	uxth	r0, r3
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	4413      	add	r3, r2
 8002274:	b29a      	uxth	r2, r3
 8002276:	8b3b      	ldrh	r3, [r7, #24]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	b299      	uxth	r1, r3
 800227c:	88ba      	ldrh	r2, [r7, #4]
 800227e:	883b      	ldrh	r3, [r7, #0]
 8002280:	4413      	add	r3, r2
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	8bbb      	ldrh	r3, [r7, #28]
 800228a:	f7ff fe51 	bl	8001f30 <lcdDrawHLine>
	lcdDrawVLine(x, y + r, y + h - r, color);
 800228e:	88f8      	ldrh	r0, [r7, #6]
 8002290:	88ba      	ldrh	r2, [r7, #4]
 8002292:	8b3b      	ldrh	r3, [r7, #24]
 8002294:	4413      	add	r3, r2
 8002296:	b299      	uxth	r1, r3
 8002298:	88ba      	ldrh	r2, [r7, #4]
 800229a:	883b      	ldrh	r3, [r7, #0]
 800229c:	4413      	add	r3, r2
 800229e:	b29a      	uxth	r2, r3
 80022a0:	8b3b      	ldrh	r3, [r7, #24]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	8bbb      	ldrh	r3, [r7, #28]
 80022a8:	f7ff fe88 	bl	8001fbc <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y + r, y + h - r, color);
 80022ac:	88fa      	ldrh	r2, [r7, #6]
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	4413      	add	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b298      	uxth	r0, r3
 80022b8:	88ba      	ldrh	r2, [r7, #4]
 80022ba:	8b3b      	ldrh	r3, [r7, #24]
 80022bc:	4413      	add	r3, r2
 80022be:	b299      	uxth	r1, r3
 80022c0:	88ba      	ldrh	r2, [r7, #4]
 80022c2:	883b      	ldrh	r3, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	8b3b      	ldrh	r3, [r7, #24]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	8bbb      	ldrh	r3, [r7, #28]
 80022d0:	f7ff fe74 	bl	8001fbc <lcdDrawVLine>

	// draw four corners
	lcdDrawCircleHelper(x + r, y + r, r, 1, color);
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	8b3b      	ldrh	r3, [r7, #24]
 80022d8:	4413      	add	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	b218      	sxth	r0, r3
 80022de:	88ba      	ldrh	r2, [r7, #4]
 80022e0:	8b3b      	ldrh	r3, [r7, #24]
 80022e2:	4413      	add	r3, r2
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b219      	sxth	r1, r3
 80022e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80022ec:	8bbb      	ldrh	r3, [r7, #28]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2301      	movs	r3, #1
 80022f2:	f000 f84b 	bl	800238c <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	4413      	add	r3, r2
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	8b3b      	ldrh	r3, [r7, #24]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29b      	uxth	r3, r3
 8002308:	b218      	sxth	r0, r3
 800230a:	88ba      	ldrh	r2, [r7, #4]
 800230c:	8b3b      	ldrh	r3, [r7, #24]
 800230e:	4413      	add	r3, r2
 8002310:	b29b      	uxth	r3, r3
 8002312:	b219      	sxth	r1, r3
 8002314:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002318:	8bbb      	ldrh	r3, [r7, #28]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2302      	movs	r3, #2
 800231e:	f000 f835 	bl	800238c <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	887b      	ldrh	r3, [r7, #2]
 8002326:	4413      	add	r3, r2
 8002328:	b29a      	uxth	r2, r3
 800232a:	8b3b      	ldrh	r3, [r7, #24]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29b      	uxth	r3, r3
 8002334:	b218      	sxth	r0, r3
 8002336:	88ba      	ldrh	r2, [r7, #4]
 8002338:	883b      	ldrh	r3, [r7, #0]
 800233a:	4413      	add	r3, r2
 800233c:	b29a      	uxth	r2, r3
 800233e:	8b3b      	ldrh	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29b      	uxth	r3, r3
 8002348:	b219      	sxth	r1, r3
 800234a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800234e:	8bbb      	ldrh	r3, [r7, #28]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2304      	movs	r3, #4
 8002354:	f000 f81a 	bl	800238c <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8002358:	88fa      	ldrh	r2, [r7, #6]
 800235a:	8b3b      	ldrh	r3, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	b218      	sxth	r0, r3
 8002362:	88ba      	ldrh	r2, [r7, #4]
 8002364:	883b      	ldrh	r3, [r7, #0]
 8002366:	4413      	add	r3, r2
 8002368:	b29a      	uxth	r2, r3
 800236a:	8b3b      	ldrh	r3, [r7, #24]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29b      	uxth	r3, r3
 8002374:	b219      	sxth	r1, r3
 8002376:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800237a:	8bbb      	ldrh	r3, [r7, #28]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2308      	movs	r3, #8
 8002380:	f000 f804 	bl	800238c <lcdDrawCircleHelper>
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bd90      	pop	{r4, r7, pc}

0800238c <lcdDrawCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdDrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	80fb      	strh	r3, [r7, #6]
 800239e:	4603      	mov	r3, r0
 80023a0:	80bb      	strh	r3, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
 80023a6:	4613      	mov	r3, r2
 80023a8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	f1c3 0301 	rsb	r3, r3, #1
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	461a      	mov	r2, r3
 80023bc:	03d2      	lsls	r2, r2, #15
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 80023ce:	e095      	b.n	80024fc <lcdDrawCircleHelper+0x170>
	{
		if (f >= 0)
 80023d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0e      	blt.n	80023f6 <lcdDrawCircleHelper+0x6a>
		{
			y--;
 80023d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80023e4:	8a7b      	ldrh	r3, [r7, #18]
 80023e6:	3302      	adds	r3, #2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80023ec:	8afa      	ldrh	r2, [r7, #22]
 80023ee:	8a7b      	ldrh	r3, [r7, #18]
 80023f0:	4413      	add	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80023f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	b29b      	uxth	r3, r3
 8002400:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002402:	8abb      	ldrh	r3, [r7, #20]
 8002404:	3302      	adds	r3, #2
 8002406:	b29b      	uxth	r3, r3
 8002408:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800240a:	8afa      	ldrh	r2, [r7, #22]
 800240c:	8abb      	ldrh	r3, [r7, #20]
 800240e:	4413      	add	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d017      	beq.n	800244e <lcdDrawCircleHelper+0xc2>
		{
			lcdDrawPixel(x0 + x, y0 + y, color);
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	8a3b      	ldrh	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	b298      	uxth	r0, r3
 8002426:	88ba      	ldrh	r2, [r7, #4]
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	4413      	add	r3, r2
 800242c:	b29b      	uxth	r3, r3
 800242e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002430:	4619      	mov	r1, r3
 8002432:	f7ff fd59 	bl	8001ee8 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 + x, color);
 8002436:	88fa      	ldrh	r2, [r7, #6]
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	4413      	add	r3, r2
 800243c:	b298      	uxth	r0, r3
 800243e:	88ba      	ldrh	r2, [r7, #4]
 8002440:	8a3b      	ldrh	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002448:	4619      	mov	r1, r3
 800244a:	f7ff fd4d 	bl	8001ee8 <lcdDrawPixel>
		}
		if (cornername & 0x2)
 800244e:	787b      	ldrb	r3, [r7, #1]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d017      	beq.n	8002488 <lcdDrawCircleHelper+0xfc>
		{
			lcdDrawPixel(x0 + x, y0 - y, color);
 8002458:	88fa      	ldrh	r2, [r7, #6]
 800245a:	8a3b      	ldrh	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	b298      	uxth	r0, r3
 8002460:	88ba      	ldrh	r2, [r7, #4]
 8002462:	89fb      	ldrh	r3, [r7, #14]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b29b      	uxth	r3, r3
 8002468:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800246a:	4619      	mov	r1, r3
 800246c:	f7ff fd3c 	bl	8001ee8 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 - x, color);
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	4413      	add	r3, r2
 8002476:	b298      	uxth	r0, r3
 8002478:	88ba      	ldrh	r2, [r7, #4]
 800247a:	8a3b      	ldrh	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	b29b      	uxth	r3, r3
 8002480:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002482:	4619      	mov	r1, r3
 8002484:	f7ff fd30 	bl	8001ee8 <lcdDrawPixel>
		}
		if (cornername & 0x8)
 8002488:	787b      	ldrb	r3, [r7, #1]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d017      	beq.n	80024c2 <lcdDrawCircleHelper+0x136>
		{
			lcdDrawPixel(x0 - y, y0 + x, color);
 8002492:	88fa      	ldrh	r2, [r7, #6]
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	b298      	uxth	r0, r3
 800249a:	88ba      	ldrh	r2, [r7, #4]
 800249c:	8a3b      	ldrh	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024a4:	4619      	mov	r1, r3
 80024a6:	f7ff fd1f 	bl	8001ee8 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 + y, color);
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	8a3b      	ldrh	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	b298      	uxth	r0, r3
 80024b2:	88ba      	ldrh	r2, [r7, #4]
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	4413      	add	r3, r2
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024bc:	4619      	mov	r1, r3
 80024be:	f7ff fd13 	bl	8001ee8 <lcdDrawPixel>
		}
		if (cornername & 0x1)
 80024c2:	787b      	ldrb	r3, [r7, #1]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d017      	beq.n	80024fc <lcdDrawCircleHelper+0x170>
		{
			lcdDrawPixel(x0 - y, y0 - x, color);
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	b298      	uxth	r0, r3
 80024d4:	88ba      	ldrh	r2, [r7, #4]
 80024d6:	8a3b      	ldrh	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024de:	4619      	mov	r1, r3
 80024e0:	f7ff fd02 	bl	8001ee8 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 - y, color);
 80024e4:	88fa      	ldrh	r2, [r7, #6]
 80024e6:	8a3b      	ldrh	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	b298      	uxth	r0, r3
 80024ec:	88ba      	ldrh	r2, [r7, #4]
 80024ee:	89fb      	ldrh	r3, [r7, #14]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7ff fcf6 	bl	8001ee8 <lcdDrawPixel>
	while (x < y)
 80024fc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002500:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002504:	429a      	cmp	r2, r3
 8002506:	f6ff af63 	blt.w	80023d0 <lcdDrawCircleHelper+0x44>
		}
	}
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	bd90      	pop	{r4, r7, pc}

08002514 <lcdDrawCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	4604      	mov	r4, r0
 800251c:	4608      	mov	r0, r1
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	80fb      	strh	r3, [r7, #6]
 8002526:	4603      	mov	r3, r0
 8002528:	80bb      	strh	r3, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	807b      	strh	r3, [r7, #2]
 800252e:	4613      	mov	r3, r2
 8002530:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	f1c3 0301 	rsb	r3, r3, #1
 8002538:	b29b      	uxth	r3, r3
 800253a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800253c:	2301      	movs	r3, #1
 800253e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	461a      	mov	r2, r3
 8002544:	03d2      	lsls	r2, r2, #15
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	b29b      	uxth	r3, r3
 800254c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	81fb      	strh	r3, [r7, #14]

	lcdDrawPixel(x0, y0 + r, color);
 8002556:	88f8      	ldrh	r0, [r7, #6]
 8002558:	88ba      	ldrh	r2, [r7, #4]
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	4413      	add	r3, r2
 800255e:	b29b      	uxth	r3, r3
 8002560:	883a      	ldrh	r2, [r7, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	f7ff fcc0 	bl	8001ee8 <lcdDrawPixel>
	lcdDrawPixel(x0, y0 - r, color);
 8002568:	88f8      	ldrh	r0, [r7, #6]
 800256a:	88ba      	ldrh	r2, [r7, #4]
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	b29b      	uxth	r3, r3
 8002572:	883a      	ldrh	r2, [r7, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	f7ff fcb7 	bl	8001ee8 <lcdDrawPixel>
	lcdDrawPixel(x0 + r, y0, color);
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	4413      	add	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	88b9      	ldrh	r1, [r7, #4]
 8002584:	883a      	ldrh	r2, [r7, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fcae 	bl	8001ee8 <lcdDrawPixel>
	lcdDrawPixel(x0 - r, y0, color);
 800258c:	88fa      	ldrh	r2, [r7, #6]
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	b29b      	uxth	r3, r3
 8002594:	88b9      	ldrh	r1, [r7, #4]
 8002596:	883a      	ldrh	r2, [r7, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fca5 	bl	8001ee8 <lcdDrawPixel>

	while (x < y)
 800259e:	e081      	b.n	80026a4 <lcdDrawCircle+0x190>
	{
		if (f >= 0)
 80025a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0e      	blt.n	80025c6 <lcdDrawCircle+0xb2>
		{
			y--;
 80025a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80025b4:	8a7b      	ldrh	r3, [r7, #18]
 80025b6:	3302      	adds	r3, #2
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80025bc:	8afa      	ldrh	r2, [r7, #22]
 80025be:	8a7b      	ldrh	r3, [r7, #18]
 80025c0:	4413      	add	r3, r2
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80025c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80025d2:	8abb      	ldrh	r3, [r7, #20]
 80025d4:	3302      	adds	r3, #2
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80025da:	8afa      	ldrh	r2, [r7, #22]
 80025dc:	8abb      	ldrh	r3, [r7, #20]
 80025de:	4413      	add	r3, r2
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	82fb      	strh	r3, [r7, #22]

		lcdDrawPixel(x0 + x, y0 + y, color);
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	8a3b      	ldrh	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	b298      	uxth	r0, r3
 80025ec:	88ba      	ldrh	r2, [r7, #4]
 80025ee:	89fb      	ldrh	r3, [r7, #14]
 80025f0:	4413      	add	r3, r2
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	883a      	ldrh	r2, [r7, #0]
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7ff fc76 	bl	8001ee8 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 + y, color);
 80025fc:	88fa      	ldrh	r2, [r7, #6]
 80025fe:	8a3b      	ldrh	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	b298      	uxth	r0, r3
 8002604:	88ba      	ldrh	r2, [r7, #4]
 8002606:	89fb      	ldrh	r3, [r7, #14]
 8002608:	4413      	add	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	883a      	ldrh	r2, [r7, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	f7ff fc6a 	bl	8001ee8 <lcdDrawPixel>
		lcdDrawPixel(x0 + x, y0 - y, color);
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	8a3b      	ldrh	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	b298      	uxth	r0, r3
 800261c:	88ba      	ldrh	r2, [r7, #4]
 800261e:	89fb      	ldrh	r3, [r7, #14]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	b29b      	uxth	r3, r3
 8002624:	883a      	ldrh	r2, [r7, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	f7ff fc5e 	bl	8001ee8 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 - y, color);
 800262c:	88fa      	ldrh	r2, [r7, #6]
 800262e:	8a3b      	ldrh	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	b298      	uxth	r0, r3
 8002634:	88ba      	ldrh	r2, [r7, #4]
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	b29b      	uxth	r3, r3
 800263c:	883a      	ldrh	r2, [r7, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	f7ff fc52 	bl	8001ee8 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 + x, color);
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	4413      	add	r3, r2
 800264a:	b298      	uxth	r0, r3
 800264c:	88ba      	ldrh	r2, [r7, #4]
 800264e:	8a3b      	ldrh	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	b29b      	uxth	r3, r3
 8002654:	883a      	ldrh	r2, [r7, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	f7ff fc46 	bl	8001ee8 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 + x, color);
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	89fb      	ldrh	r3, [r7, #14]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	b298      	uxth	r0, r3
 8002664:	88ba      	ldrh	r2, [r7, #4]
 8002666:	8a3b      	ldrh	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	883a      	ldrh	r2, [r7, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	f7ff fc3a 	bl	8001ee8 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 - x, color);
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	89fb      	ldrh	r3, [r7, #14]
 8002678:	4413      	add	r3, r2
 800267a:	b298      	uxth	r0, r3
 800267c:	88ba      	ldrh	r2, [r7, #4]
 800267e:	8a3b      	ldrh	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	b29b      	uxth	r3, r3
 8002684:	883a      	ldrh	r2, [r7, #0]
 8002686:	4619      	mov	r1, r3
 8002688:	f7ff fc2e 	bl	8001ee8 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 - x, color);
 800268c:	88fa      	ldrh	r2, [r7, #6]
 800268e:	89fb      	ldrh	r3, [r7, #14]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	b298      	uxth	r0, r3
 8002694:	88ba      	ldrh	r2, [r7, #4]
 8002696:	8a3b      	ldrh	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	b29b      	uxth	r3, r3
 800269c:	883a      	ldrh	r2, [r7, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	f7ff fc22 	bl	8001ee8 <lcdDrawPixel>
	while (x < y)
 80026a4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80026a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f6ff af77 	blt.w	80025a0 <lcdDrawCircle+0x8c>
	}
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}

080026bc <lcdDrawTriangle>:
    @param    y2  Vertex #2 y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void lcdDrawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4623      	mov	r3, r4
 80026cc:	80fb      	strh	r3, [r7, #6]
 80026ce:	4603      	mov	r3, r0
 80026d0:	80bb      	strh	r3, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	807b      	strh	r3, [r7, #2]
 80026d6:	4613      	mov	r3, r2
 80026d8:	803b      	strh	r3, [r7, #0]
    lcdDrawLine(x0, y0, x1, y1, color);
 80026da:	f9b7 4000 	ldrsh.w	r4, [r7]
 80026de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80026e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80026ea:	8c3b      	ldrh	r3, [r7, #32]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	4623      	mov	r3, r4
 80026f0:	f7ff fcb4 	bl	800205c <lcdDrawLine>
    lcdDrawLine(x1, y1, x2, y2, color);
 80026f4:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80026f8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80026fc:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002700:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002704:	8c3b      	ldrh	r3, [r7, #32]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	4623      	mov	r3, r4
 800270a:	f7ff fca7 	bl	800205c <lcdDrawLine>
    lcdDrawLine(x2, y2, x0, y0, color);
 800270e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002712:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002716:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800271a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800271e:	8c3b      	ldrh	r3, [r7, #32]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4623      	mov	r3, r4
 8002724:	f7ff fc9a 	bl	800205c <lcdDrawLine>
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bd90      	pop	{r4, r7, pc}

08002730 <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b085      	sub	sp, #20
 8002734:	af02      	add	r7, sp, #8
 8002736:	4604      	mov	r4, r0
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	4623      	mov	r3, r4
 8002740:	80fb      	strh	r3, [r7, #6]
 8002742:	4603      	mov	r3, r0
 8002744:	80bb      	strh	r3, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	807b      	strh	r3, [r7, #2]
 800274a:	4613      	mov	r3, r2
 800274c:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 800274e:	88f8      	ldrh	r0, [r7, #6]
 8002750:	88ba      	ldrh	r2, [r7, #4]
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	b299      	uxth	r1, r3
 8002758:	88ba      	ldrh	r2, [r7, #4]
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	4413      	add	r3, r2
 800275e:	b29b      	uxth	r3, r3
 8002760:	3301      	adds	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	883b      	ldrh	r3, [r7, #0]
 8002766:	f7ff fc29 	bl	8001fbc <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 800276a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800276e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002772:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002776:	883b      	ldrh	r3, [r7, #0]
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	2300      	movs	r3, #0
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2303      	movs	r3, #3
 8002780:	f000 f804 	bl	800278c <lcdFillCircleHelper>
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bd90      	pop	{r4, r7, pc}

0800278c <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	4604      	mov	r4, r0
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4623      	mov	r3, r4
 800279c:	80fb      	strh	r3, [r7, #6]
 800279e:	4603      	mov	r3, r0
 80027a0:	80bb      	strh	r3, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	807b      	strh	r3, [r7, #2]
 80027a6:	4613      	mov	r3, r2
 80027a8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	f1c3 0301 	rsb	r3, r3, #1
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	461a      	mov	r2, r3
 80027bc:	03d2      	lsls	r2, r2, #15
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 80027ce:	e07b      	b.n	80028c8 <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 80027d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0e      	blt.n	80027f6 <lcdFillCircleHelper+0x6a>
		{
			y--;
 80027d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80027e4:	8a7b      	ldrh	r3, [r7, #18]
 80027e6:	3302      	adds	r3, #2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80027ec:	8afa      	ldrh	r2, [r7, #22]
 80027ee:	8a7b      	ldrh	r3, [r7, #18]
 80027f0:	4413      	add	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80027f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	b29b      	uxth	r3, r3
 8002800:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002802:	8abb      	ldrh	r3, [r7, #20]
 8002804:	3302      	adds	r3, #2
 8002806:	b29b      	uxth	r3, r3
 8002808:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800280a:	8afa      	ldrh	r2, [r7, #22]
 800280c:	8abb      	ldrh	r3, [r7, #20]
 800280e:	4413      	add	r3, r2
 8002810:	b29b      	uxth	r3, r3
 8002812:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d027      	beq.n	800286e <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	8a3b      	ldrh	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	b298      	uxth	r0, r3
 8002826:	88ba      	ldrh	r2, [r7, #4]
 8002828:	89fb      	ldrh	r3, [r7, #14]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	b299      	uxth	r1, r3
 800282e:	88ba      	ldrh	r2, [r7, #4]
 8002830:	89fb      	ldrh	r3, [r7, #14]
 8002832:	4413      	add	r3, r2
 8002834:	b29a      	uxth	r2, r3
 8002836:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002838:	4413      	add	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	3301      	adds	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002842:	f7ff fbbb 	bl	8001fbc <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	89fb      	ldrh	r3, [r7, #14]
 800284a:	4413      	add	r3, r2
 800284c:	b298      	uxth	r0, r3
 800284e:	88ba      	ldrh	r2, [r7, #4]
 8002850:	8a3b      	ldrh	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	b299      	uxth	r1, r3
 8002856:	88ba      	ldrh	r2, [r7, #4]
 8002858:	8a3b      	ldrh	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	b29a      	uxth	r2, r3
 800285e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002860:	4413      	add	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	3301      	adds	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800286a:	f7ff fba7 	bl	8001fbc <lcdDrawVLine>
		}
		if (cornername & 0x2)
 800286e:	787b      	ldrb	r3, [r7, #1]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d027      	beq.n	80028c8 <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	8a3b      	ldrh	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	b298      	uxth	r0, r3
 8002880:	88ba      	ldrh	r2, [r7, #4]
 8002882:	89fb      	ldrh	r3, [r7, #14]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	b299      	uxth	r1, r3
 8002888:	88ba      	ldrh	r2, [r7, #4]
 800288a:	89fb      	ldrh	r3, [r7, #14]
 800288c:	4413      	add	r3, r2
 800288e:	b29a      	uxth	r2, r3
 8002890:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002892:	4413      	add	r3, r2
 8002894:	b29b      	uxth	r3, r3
 8002896:	3301      	adds	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800289c:	f7ff fb8e 	bl	8001fbc <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	89fb      	ldrh	r3, [r7, #14]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	b298      	uxth	r0, r3
 80028a8:	88ba      	ldrh	r2, [r7, #4]
 80028aa:	8a3b      	ldrh	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	b299      	uxth	r1, r3
 80028b0:	88ba      	ldrh	r2, [r7, #4]
 80028b2:	8a3b      	ldrh	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028ba:	4413      	add	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80028c4:	f7ff fb7a 	bl	8001fbc <lcdDrawVLine>
	while (x < y)
 80028c8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80028cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	f6ff af7d 	blt.w	80027d0 <lcdFillCircleHelper+0x44>
		}
	}
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd90      	pop	{r4, r7, pc}

080028e0 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4604      	mov	r4, r0
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	80fb      	strh	r3, [r7, #6]
 80028f2:	4603      	mov	r3, r0
 80028f4:	80bb      	strh	r3, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	807b      	strh	r3, [r7, #2]
 80028fa:	4613      	mov	r3, r2
 80028fc:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80028fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <lcdFillRect+0xb4>)
 8002904:	8812      	ldrh	r2, [r2, #0]
 8002906:	4293      	cmp	r3, r2
 8002908:	da3f      	bge.n	800298a <lcdFillRect+0xaa>
 800290a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800290e:	4a21      	ldr	r2, [pc, #132]	; (8002994 <lcdFillRect+0xb4>)
 8002910:	8852      	ldrh	r2, [r2, #2]
 8002912:	4293      	cmp	r3, r2
 8002914:	da39      	bge.n	800298a <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8002916:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800291a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800291e:	4413      	add	r3, r2
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <lcdFillRect+0xb4>)
 8002922:	8812      	ldrh	r2, [r2, #0]
 8002924:	4293      	cmp	r3, r2
 8002926:	dd05      	ble.n	8002934 <lcdFillRect+0x54>
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <lcdFillRect+0xb4>)
 800292a:	881a      	ldrh	r2, [r3, #0]
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	b29b      	uxth	r3, r3
 8002932:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8002934:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002938:	f9b7 3000 	ldrsh.w	r3, [r7]
 800293c:	4413      	add	r3, r2
 800293e:	4a15      	ldr	r2, [pc, #84]	; (8002994 <lcdFillRect+0xb4>)
 8002940:	8852      	ldrh	r2, [r2, #2]
 8002942:	4293      	cmp	r3, r2
 8002944:	dd05      	ble.n	8002952 <lcdFillRect+0x72>
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <lcdFillRect+0xb4>)
 8002948:	885a      	ldrh	r2, [r3, #2]
 800294a:	88bb      	ldrh	r3, [r7, #4]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	b29b      	uxth	r3, r3
 8002950:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	81fb      	strh	r3, [r7, #14]
 8002956:	e00e      	b.n	8002976 <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8002958:	88f8      	ldrh	r0, [r7, #6]
 800295a:	88fa      	ldrh	r2, [r7, #6]
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	4413      	add	r3, r2
 8002960:	b299      	uxth	r1, r3
 8002962:	89fa      	ldrh	r2, [r7, #14]
 8002964:	8c3b      	ldrh	r3, [r7, #32]
 8002966:	f7ff fae3 	bl	8001f30 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 800296a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800296e:	b29b      	uxth	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	b29b      	uxth	r3, r3
 8002974:	81fb      	strh	r3, [r7, #14]
 8002976:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800297a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800297e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002982:	440b      	add	r3, r1
 8002984:	429a      	cmp	r2, r3
 8002986:	dde7      	ble.n	8002958 <lcdFillRect+0x78>
 8002988:	e000      	b.n	800298c <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 800298a:	bf00      	nop
	}
}
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bd90      	pop	{r4, r7, pc}
 8002992:	bf00      	nop
 8002994:	20000030 	.word	0x20000030

08002998 <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b085      	sub	sp, #20
 800299c:	af02      	add	r7, sp, #8
 800299e:	4604      	mov	r4, r0
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4623      	mov	r3, r4
 80029a8:	80fb      	strh	r3, [r7, #6]
 80029aa:	4603      	mov	r3, r0
 80029ac:	80bb      	strh	r3, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	807b      	strh	r3, [r7, #2]
 80029b2:	4613      	mov	r3, r2
 80029b4:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	8b3b      	ldrh	r3, [r7, #24]
 80029ba:	4413      	add	r3, r2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b218      	sxth	r0, r3
 80029c0:	887a      	ldrh	r2, [r7, #2]
 80029c2:	8b3b      	ldrh	r3, [r7, #24]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	f9b7 4000 	ldrsh.w	r4, [r7]
 80029d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80029d6:	8bbb      	ldrh	r3, [r7, #28]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4623      	mov	r3, r4
 80029dc:	f7ff ff80 	bl	80028e0 <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 80029e0:	88fa      	ldrh	r2, [r7, #6]
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	4413      	add	r3, r2
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	8b3b      	ldrh	r3, [r7, #24]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	b218      	sxth	r0, r3
 80029f4:	88ba      	ldrh	r2, [r7, #4]
 80029f6:	8b3b      	ldrh	r3, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	b219      	sxth	r1, r3
 80029fe:	883a      	ldrh	r2, [r7, #0]
 8002a00:	8b3b      	ldrh	r3, [r7, #24]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8002a14:	8bba      	ldrh	r2, [r7, #28]
 8002a16:	9201      	str	r2, [sp, #4]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	f7ff feb5 	bl	800278c <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	8b3b      	ldrh	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	b218      	sxth	r0, r3
 8002a2c:	88ba      	ldrh	r2, [r7, #4]
 8002a2e:	8b3b      	ldrh	r3, [r7, #24]
 8002a30:	4413      	add	r3, r2
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b219      	sxth	r1, r3
 8002a36:	883a      	ldrh	r2, [r7, #0]
 8002a38:	8b3b      	ldrh	r3, [r7, #24]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8002a4c:	8bba      	ldrh	r2, [r7, #28]
 8002a4e:	9201      	str	r2, [sp, #4]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2302      	movs	r3, #2
 8002a54:	4622      	mov	r2, r4
 8002a56:	f7ff fe99 	bl	800278c <lcdFillCircleHelper>
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}

08002a62 <lcdFillTriangle>:
    @param    y2  Vertex #2 y coordinate
    @param    color 16-bit 5-6-5 Color to fill/draw with
*/
/**************************************************************************/
void lcdFillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8002a62:	b590      	push	{r4, r7, lr}
 8002a64:	b08f      	sub	sp, #60	; 0x3c
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4604      	mov	r4, r0
 8002a6a:	4608      	mov	r0, r1
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4623      	mov	r3, r4
 8002a72:	80fb      	strh	r3, [r7, #6]
 8002a74:	4603      	mov	r3, r0
 8002a76:	80bb      	strh	r3, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1)
 8002a80:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dd0b      	ble.n	8002aa4 <lcdFillTriangle+0x42>
    {
        swap(y0, y1); swap(x0, x1);
 8002a8c:	88bb      	ldrh	r3, [r7, #4]
 8002a8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a90:	883b      	ldrh	r3, [r7, #0]
 8002a92:	80bb      	strh	r3, [r7, #4]
 8002a94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a96:	803b      	strh	r3, [r7, #0]
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	80fb      	strh	r3, [r7, #6]
 8002aa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aa2:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2)
 8002aa4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002aa8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dd0f      	ble.n	8002ad0 <lcdFillTriangle+0x6e>
    {
        swap(y2, y1); swap(x2, x1);
 8002ab0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ab4:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ab6:	883b      	ldrh	r3, [r7, #0]
 8002ab8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002abe:	803b      	strh	r3, [r7, #0]
 8002ac0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ac4:	843b      	strh	r3, [r7, #32]
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002acc:	8c3b      	ldrh	r3, [r7, #32]
 8002ace:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1)
 8002ad0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ad4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	dd0b      	ble.n	8002af4 <lcdFillTriangle+0x92>
    {
        swap(y0, y1); swap(x0, x1);
 8002adc:	88bb      	ldrh	r3, [r7, #4]
 8002ade:	83fb      	strh	r3, [r7, #30]
 8002ae0:	883b      	ldrh	r3, [r7, #0]
 8002ae2:	80bb      	strh	r3, [r7, #4]
 8002ae4:	8bfb      	ldrh	r3, [r7, #30]
 8002ae6:	803b      	strh	r3, [r7, #0]
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	83bb      	strh	r3, [r7, #28]
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	80fb      	strh	r3, [r7, #6]
 8002af0:	8bbb      	ldrh	r3, [r7, #28]
 8002af2:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2)
 8002af4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002af8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d131      	bne.n	8002b64 <lcdFillTriangle+0x102>
    { // Handle awkward all-on-same-line case as its own thing
        a = b = x0;
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002b04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002b06:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8002b08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002b0c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002b10:	429a      	cmp	r2, r3
 8002b12:	da02      	bge.n	8002b1a <lcdFillTriangle+0xb8>
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002b18:	e007      	b.n	8002b2a <lcdFillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8002b1a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002b1e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002b22:	429a      	cmp	r2, r3
 8002b24:	dd01      	ble.n	8002b2a <lcdFillTriangle+0xc8>
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8002b2a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8002b2e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002b32:	429a      	cmp	r2, r3
 8002b34:	da03      	bge.n	8002b3e <lcdFillTriangle+0xdc>
 8002b36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b3a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002b3c:	e008      	b.n	8002b50 <lcdFillTriangle+0xee>
        else if(x2 > b) b = x2;
 8002b3e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8002b42:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002b46:	429a      	cmp	r2, r3
 8002b48:	dd02      	ble.n	8002b50 <lcdFillTriangle+0xee>
 8002b4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b4e:	86bb      	strh	r3, [r7, #52]	; 0x34
        lcdDrawHLine(a, b + 1, y0, color);
 8002b50:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8002b52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002b54:	3301      	adds	r3, #1
 8002b56:	b299      	uxth	r1, r3
 8002b58:	88ba      	ldrh	r2, [r7, #4]
 8002b5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b5e:	f7ff f9e7 	bl	8001f30 <lcdDrawHLine>
        return;
 8002b62:	e0c8      	b.n	8002cf6 <lcdFillTriangle+0x294>
    }

    int16_t
    dx01 = x1 - x0,
 8002b64:	887a      	ldrh	r2, [r7, #2]
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8002b6e:	883a      	ldrh	r2, [r7, #0]
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8002b78:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8002b84:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002b88:	88bb      	ldrh	r3, [r7, #4]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8002b90:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8002b9c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002ba0:	883b      	ldrh	r3, [r7, #0]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8002bb0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002bb4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d102      	bne.n	8002bc2 <lcdFillTriangle+0x160>
 8002bbc:	883b      	ldrh	r3, [r7, #0]
 8002bbe:	863b      	strh	r3, [r7, #48]	; 0x30
 8002bc0:	e003      	b.n	8002bca <lcdFillTriangle+0x168>
    else         last = y1-1; // Skip it
 8002bc2:	883b      	ldrh	r3, [r7, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++)
 8002bca:	88bb      	ldrh	r3, [r7, #4]
 8002bcc:	867b      	strh	r3, [r7, #50]	; 0x32
 8002bce:	e038      	b.n	8002c42 <lcdFillTriangle+0x1e0>
    {
        a   = x0 + sa / dy01;
 8002bd0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	4413      	add	r3, r2
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8002be4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bea:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8002bf8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfe:	4413      	add	r3, r2
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8002c02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c08:	4413      	add	r3, r2
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 8002c0c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002c10:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002c14:	429a      	cmp	r2, r3
 8002c16:	dd05      	ble.n	8002c24 <lcdFillTriangle+0x1c2>
 8002c18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c1a:	81bb      	strh	r3, [r7, #12]
 8002c1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002c1e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002c20:	89bb      	ldrh	r3, [r7, #12]
 8002c22:	86bb      	strh	r3, [r7, #52]	; 0x34
        lcdDrawHLine(a, b + 1, y, color);
 8002c24:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8002c26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002c28:	3301      	adds	r3, #1
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002c2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c32:	f7ff f97d 	bl	8001f30 <lcdDrawHLine>
    for(y=y0; y<=last; y++)
 8002c36:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	867b      	strh	r3, [r7, #50]	; 0x32
 8002c42:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002c46:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	ddc0      	ble.n	8002bd0 <lcdFillTriangle+0x16e>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8002c4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c52:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002c56:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002c5a:	1a8a      	subs	r2, r1, r2
 8002c5c:	fb02 f303 	mul.w	r3, r2, r3
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8002c62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c66:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002c6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c6e:	1a8a      	subs	r2, r1, r2
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++)
 8002c76:	e038      	b.n	8002cea <lcdFillTriangle+0x288>
    {
        a   = x1 + sa / dy12;
 8002c78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	4413      	add	r3, r2
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8002c8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8002ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca6:	4413      	add	r3, r2
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8002caa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb0:	4413      	add	r3, r2
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 8002cb4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002cb8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	dd05      	ble.n	8002ccc <lcdFillTriangle+0x26a>
 8002cc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cc2:	81fb      	strh	r3, [r7, #14]
 8002cc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002cc6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002cc8:	89fb      	ldrh	r3, [r7, #14]
 8002cca:	86bb      	strh	r3, [r7, #52]	; 0x34
        lcdDrawHLine(a, b + 1, y, color);
 8002ccc:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8002cce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b299      	uxth	r1, r3
 8002cd4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002cd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002cda:	f7ff f929 	bl	8001f30 <lcdDrawHLine>
    for(; y<=y2; y++)
 8002cde:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	867b      	strh	r3, [r7, #50]	; 0x32
 8002cea:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002cee:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	ddc0      	ble.n	8002c78 <lcdFillTriangle+0x216>
    }
}
 8002cf6:	373c      	adds	r7, #60	; 0x3c
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}

08002cfc <lcdDrawImage>:

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	603a      	str	r2, [r7, #0]
 8002d06:	80fb      	strh	r3, [r7, #6]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8002d0c:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <lcdDrawImage+0xa4>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d23b      	bcs.n	8002d8e <lcdDrawImage+0x92>
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <lcdDrawImage+0xa4>)
 8002d18:	885b      	ldrh	r3, [r3, #2]
 8002d1a:	88ba      	ldrh	r2, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d236      	bcs.n	8002d8e <lcdDrawImage+0x92>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	8812      	ldrh	r2, [r2, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <lcdDrawImage+0xa4>)
 8002d2a:	8812      	ldrh	r2, [r2, #0]
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	dc30      	bgt.n	8002d92 <lcdDrawImage+0x96>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8002d30:	88bb      	ldrh	r3, [r7, #4]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	8852      	ldrh	r2, [r2, #2]
 8002d36:	4413      	add	r3, r2
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <lcdDrawImage+0xa4>)
 8002d3a:	8852      	ldrh	r2, [r2, #2]
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	dc2a      	bgt.n	8002d96 <lcdDrawImage+0x9a>

	for (int i = 0; i < pBitmap->ySize; ++i)
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e01c      	b.n	8002d80 <lcdDrawImage+0x84>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	88bb      	ldrh	r3, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b299      	uxth	r1, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	8892      	ldrh	r2, [r2, #4]
 8002d58:	4610      	mov	r0, r2
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	fb02 f200 	mul.w	r2, r2, r0
 8002d60:	441a      	add	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	889b      	ldrh	r3, [r3, #4]
 8002d66:	4618      	mov	r0, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	799b      	ldrb	r3, [r3, #6]
 8002d6c:	08db      	lsrs	r3, r3, #3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	fb90 f3f3 	sdiv	r3, r0, r3
 8002d74:	88f8      	ldrh	r0, [r7, #6]
 8002d76:	f000 faf3 	bl	8003360 <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	885b      	ldrh	r3, [r3, #2]
 8002d84:	461a      	mov	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	dbdc      	blt.n	8002d46 <lcdDrawImage+0x4a>
 8002d8c:	e004      	b.n	8002d98 <lcdDrawImage+0x9c>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8002d8e:	bf00      	nop
 8002d90:	e002      	b.n	8002d98 <lcdDrawImage+0x9c>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <lcdDrawImage+0x9c>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8002d96:	bf00      	nop
	}
}
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000030 	.word	0x20000030

08002da4 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4604      	mov	r4, r0
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4623      	mov	r3, r4
 8002db4:	80fb      	strh	r3, [r7, #6]
 8002db6:	4603      	mov	r3, r0
 8002db8:	80bb      	strh	r3, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8002dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc6:	4a4a      	ldr	r2, [pc, #296]	; (8002ef0 <lcdDrawChar+0x14c>)
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	f280 808c 	bge.w	8002ee8 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8002dd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002dd4:	4a46      	ldr	r2, [pc, #280]	; (8002ef0 <lcdDrawChar+0x14c>)
 8002dd6:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	f280 8085 	bge.w	8002ee8 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8002dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de2:	4a44      	ldr	r2, [pc, #272]	; (8002ef4 <lcdDrawChar+0x150>)
 8002de4:	6892      	ldr	r2, [r2, #8]
 8002de6:	8892      	ldrh	r2, [r2, #4]
 8002de8:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	db7c      	blt.n	8002ee8 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8002dee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002df2:	4a40      	ldr	r2, [pc, #256]	; (8002ef4 <lcdDrawChar+0x150>)
 8002df4:	6892      	ldr	r2, [r2, #8]
 8002df6:	88d2      	ldrh	r2, [r2, #6]
 8002df8:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	db74      	blt.n	8002ee8 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <lcdDrawChar+0x150>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	88db      	ldrh	r3, [r3, #6]
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73bb      	strb	r3, [r7, #14]
 8002e12:	e061      	b.n	8002ed8 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	733b      	strb	r3, [r7, #12]
 8002e18:	e055      	b.n	8002ec6 <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8002e1a:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <lcdDrawChar+0x150>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	3a20      	subs	r2, #32
 8002e24:	4933      	ldr	r1, [pc, #204]	; (8002ef4 <lcdDrawChar+0x150>)
 8002e26:	6889      	ldr	r1, [r1, #8]
 8002e28:	88c9      	ldrh	r1, [r1, #6]
 8002e2a:	fb01 f202 	mul.w	r2, r1, r2
 8002e2e:	7ab9      	ldrb	r1, [r7, #10]
 8002e30:	fb01 f102 	mul.w	r1, r1, r2
 8002e34:	7bba      	ldrb	r2, [r7, #14]
 8002e36:	7ab8      	ldrb	r0, [r7, #10]
 8002e38:	fb00 f202 	mul.w	r2, r0, r2
 8002e3c:	4411      	add	r1, r2
 8002e3e:	7b3a      	ldrb	r2, [r7, #12]
 8002e40:	440a      	add	r2, r1
 8002e42:	4413      	add	r3, r2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	72fb      	strb	r3, [r7, #11]
 8002e4c:	e032      	b.n	8002eb4 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8002e4e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da12      	bge.n	8002e7c <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	b298      	uxth	r0, r3
 8002e68:	7bbb      	ldrb	r3, [r7, #14]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	88bb      	ldrh	r3, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	883a      	ldrh	r2, [r7, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7ff f837 	bl	8001ee8 <lcdDrawPixel>
 8002e7a:	e015      	b.n	8002ea8 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8002e7c:	8c3a      	ldrh	r2, [r7, #32]
 8002e7e:	883b      	ldrh	r3, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d011      	beq.n	8002ea8 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	b298      	uxth	r0, r3
 8002e96:	7bbb      	ldrb	r3, [r7, #14]
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	88bb      	ldrh	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	8c3a      	ldrh	r2, [r7, #32]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7ff f820 	bl	8001ee8 <lcdDrawPixel>
				}
				line <<= 1;
 8002ea8:	7b7b      	ldrb	r3, [r7, #13]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8002eae:	7afb      	ldrb	r3, [r7, #11]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	72fb      	strb	r3, [r7, #11]
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	2b07      	cmp	r3, #7
 8002eb8:	d9c9      	bls.n	8002e4e <lcdDrawChar+0xaa>
			}

			xP += 8;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8002ec0:	7b3b      	ldrb	r3, [r7, #12]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	733b      	strb	r3, [r7, #12]
 8002ec6:	7b3a      	ldrb	r2, [r7, #12]
 8002ec8:	7abb      	ldrb	r3, [r7, #10]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d3a5      	bcc.n	8002e1a <lcdDrawChar+0x76>
		}

		xP = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8002ed2:	7bbb      	ldrb	r3, [r7, #14]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	73bb      	strb	r3, [r7, #14]
 8002ed8:	7bbb      	ldrb	r3, [r7, #14]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <lcdDrawChar+0x150>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	88db      	ldrh	r3, [r3, #6]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d396      	bcc.n	8002e14 <lcdDrawChar+0x70>
 8002ee6:	e000      	b.n	8002eea <lcdDrawChar+0x146>
		return;
 8002ee8:	bf00      	nop
	}
}
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}
 8002ef0:	20000030 	.word	0x20000030
 8002ef4:	20000038 	.word	0x20000038

08002ef8 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8002ef8:	b40f      	push	{r0, r1, r2, r3}
 8002efa:	b590      	push	{r4, r7, lr}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	69b9      	ldr	r1, [r7, #24]
 8002f0a:	483d      	ldr	r0, [pc, #244]	; (8003000 <lcdPrintf+0x108>)
 8002f0c:	f002 fe20 	bl	8005b50 <vsiprintf>
	va_end(lst);

	p = buf;
 8002f10:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <lcdPrintf+0x108>)
 8002f12:	607b      	str	r3, [r7, #4]
	while (*p)
 8002f14:	e067      	b.n	8002fe6 <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b0a      	cmp	r3, #10
 8002f1c:	d10c      	bne.n	8002f38 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8002f1e:	4b39      	ldr	r3, [pc, #228]	; (8003004 <lcdPrintf+0x10c>)
 8002f20:	885a      	ldrh	r2, [r3, #2]
 8002f22:	4b39      	ldr	r3, [pc, #228]	; (8003008 <lcdPrintf+0x110>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	88db      	ldrh	r3, [r3, #6]
 8002f28:	4413      	add	r3, r2
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b35      	ldr	r3, [pc, #212]	; (8003004 <lcdPrintf+0x10c>)
 8002f2e:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8002f30:	4b34      	ldr	r3, [pc, #208]	; (8003004 <lcdPrintf+0x10c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	e04a      	b.n	8002fce <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b0d      	cmp	r3, #13
 8002f3e:	d046      	beq.n	8002fce <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b09      	cmp	r3, #9
 8002f46:	d10b      	bne.n	8002f60 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8002f48:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <lcdPrintf+0x10c>)
 8002f4a:	881a      	ldrh	r2, [r3, #0]
 8002f4c:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <lcdPrintf+0x110>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	889b      	ldrh	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <lcdPrintf+0x10c>)
 8002f5c:	801a      	strh	r2, [r3, #0]
 8002f5e:	e036      	b.n	8002fce <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <lcdPrintf+0x10c>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b218      	sxth	r0, r3
 8002f66:	4b27      	ldr	r3, [pc, #156]	; (8003004 <lcdPrintf+0x10c>)
 8002f68:	885b      	ldrh	r3, [r3, #2]
 8002f6a:	b219      	sxth	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <lcdPrintf+0x110>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b29c      	uxth	r4, r3
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <lcdPrintf+0x110>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4623      	mov	r3, r4
 8002f80:	f7ff ff10 	bl	8002da4 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8002f84:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <lcdPrintf+0x10c>)
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <lcdPrintf+0x110>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	889b      	ldrh	r3, [r3, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <lcdPrintf+0x10c>)
 8002f94:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <lcdPrintf+0x110>)
 8002f98:	7b1b      	ldrb	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d017      	beq.n	8002fce <lcdPrintf+0xd6>
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <lcdPrintf+0x10c>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <lcdPrintf+0x114>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <lcdPrintf+0x110>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	889b      	ldrh	r3, [r3, #4]
 8002fb0:	1acb      	subs	r3, r1, r3
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	dd0b      	ble.n	8002fce <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <lcdPrintf+0x10c>)
 8002fb8:	885a      	ldrh	r2, [r3, #2]
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <lcdPrintf+0x110>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	88db      	ldrh	r3, [r3, #6]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <lcdPrintf+0x10c>)
 8002fc6:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <lcdPrintf+0x10c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <lcdPrintf+0x10c>)
 8002fd6:	885a      	ldrh	r2, [r3, #2]
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <lcdPrintf+0x114>)
 8002fda:	885b      	ldrh	r3, [r3, #2]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d302      	bcc.n	8002fe6 <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <lcdPrintf+0x10c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	805a      	strh	r2, [r3, #2]
	while (*p)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d193      	bne.n	8002f16 <lcdPrintf+0x1e>
		}
	}
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002ffa:	b004      	add	sp, #16
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000158 	.word	0x20000158
 8003004:	20000150 	.word	0x20000150
 8003008:	20000038 	.word	0x20000038
 800300c:	20000030 	.word	0x20000030

08003010 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <lcdSetTextFont+0x18>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6093      	str	r3, [r2, #8]
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	20000038 	.word	0x20000038

0800302c <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	460a      	mov	r2, r1
 8003036:	80fb      	strh	r3, [r7, #6]
 8003038:	4613      	mov	r3, r2
 800303a:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	4a05      	ldr	r2, [pc, #20]	; (8003054 <lcdSetTextColor+0x28>)
 8003040:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8003042:	88bb      	ldrh	r3, [r7, #4]
 8003044:	4a03      	ldr	r2, [pc, #12]	; (8003054 <lcdSetTextColor+0x28>)
 8003046:	6053      	str	r3, [r2, #4]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000038 	.word	0x20000038

08003058 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8003062:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <lcdSetOrientation+0xc8>)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8003068:	2036      	movs	r0, #54	; 0x36
 800306a:	f000 f9af 	bl	80033cc <lcdWriteCommand>

	switch (lcdProperties.orientation)
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <lcdSetOrientation+0xc8>)
 8003070:	791b      	ldrb	r3, [r3, #4]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d842      	bhi.n	80030fc <lcdSetOrientation+0xa4>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <lcdSetOrientation+0x24>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	0800308d 	.word	0x0800308d
 8003080:	080030c5 	.word	0x080030c5
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030e1 	.word	0x080030e1
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 800308c:	4b25      	ldr	r3, [pc, #148]	; (8003124 <lcdSetOrientation+0xcc>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f9aa 	bl	80033ec <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <lcdSetOrientation+0xc8>)
 800309a:	22f0      	movs	r2, #240	; 0xf0
 800309c:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <lcdSetOrientation+0xc8>)
 80030a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030a4:	805a      	strh	r2, [r3, #2]
			break;
 80030a6:	e02a      	b.n	80030fe <lcdSetOrientation+0xa6>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 80030a8:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <lcdSetOrientation+0xd0>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f99c 	bl	80033ec <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <lcdSetOrientation+0xc8>)
 80030b6:	22f0      	movs	r2, #240	; 0xf0
 80030b8:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <lcdSetOrientation+0xc8>)
 80030bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030c0:	805a      	strh	r2, [r3, #2]
			break;
 80030c2:	e01c      	b.n	80030fe <lcdSetOrientation+0xa6>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <lcdSetOrientation+0xd4>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f98e 	bl	80033ec <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <lcdSetOrientation+0xc8>)
 80030d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030d6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <lcdSetOrientation+0xc8>)
 80030da:	22f0      	movs	r2, #240	; 0xf0
 80030dc:	805a      	strh	r2, [r3, #2]
			break;
 80030de:	e00e      	b.n	80030fe <lcdSetOrientation+0xa6>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <lcdSetOrientation+0xd8>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f980 	bl	80033ec <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <lcdSetOrientation+0xc8>)
 80030ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030f2:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <lcdSetOrientation+0xc8>)
 80030f6:	22f0      	movs	r2, #240	; 0xf0
 80030f8:	805a      	strh	r2, [r3, #2]
			break;
 80030fa:	e000      	b.n	80030fe <lcdSetOrientation+0xa6>
		default:
			break;
 80030fc:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <lcdSetOrientation+0xc8>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <lcdSetOrientation+0xc8>)
 8003108:	885b      	ldrh	r3, [r3, #2]
 800310a:	3b01      	subs	r3, #1
 800310c:	b29b      	uxth	r3, r3
 800310e:	2100      	movs	r1, #0
 8003110:	2000      	movs	r0, #0
 8003112:	f000 f829 	bl	8003168 <lcdSetWindow>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000030 	.word	0x20000030
 8003124:	20000154 	.word	0x20000154
 8003128:	20000156 	.word	0x20000156
 800312c:	20000155 	.word	0x20000155
 8003130:	20000157 	.word	0x20000157

08003134 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	460a      	mov	r2, r1
 800313e:	80fb      	strh	r3, [r7, #6]
 8003140:	4613      	mov	r3, r2
 8003142:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8003144:	4a07      	ldr	r2, [pc, #28]	; (8003164 <lcdSetCursor+0x30>)
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800314a:	4a06      	ldr	r2, [pc, #24]	; (8003164 <lcdSetCursor+0x30>)
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8003150:	88bb      	ldrh	r3, [r7, #4]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	88b9      	ldrh	r1, [r7, #4]
 8003156:	88f8      	ldrh	r0, [r7, #6]
 8003158:	f000 f806 	bl	8003168 <lcdSetWindow>
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000150 	.word	0x20000150

08003168 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4604      	mov	r4, r0
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4623      	mov	r3, r4
 8003178:	80fb      	strh	r3, [r7, #6]
 800317a:	4603      	mov	r3, r0
 800317c:	80bb      	strh	r3, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	807b      	strh	r3, [r7, #2]
 8003182:	4613      	mov	r3, r2
 8003184:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8003186:	202a      	movs	r0, #42	; 0x2a
 8003188:	f000 f920 	bl	80033cc <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	b29b      	uxth	r3, r3
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f92a 	bl	80033ec <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	b29b      	uxth	r3, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f924 	bl	80033ec <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f91e 	bl	80033ec <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f918 	bl	80033ec <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80031bc:	202b      	movs	r0, #43	; 0x2b
 80031be:	f000 f905 	bl	80033cc <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 80031c2:	88bb      	ldrh	r3, [r7, #4]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f90f 	bl	80033ec <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80031ce:	88bb      	ldrh	r3, [r7, #4]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f909 	bl	80033ec <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80031da:	883b      	ldrh	r3, [r7, #0]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f903 	bl	80033ec <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80031e6:	883b      	ldrh	r3, [r7, #0]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f8fd 	bl	80033ec <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80031f2:	202c      	movs	r0, #44	; 0x2c
 80031f4:	f000 f8ea 	bl	80033cc <lcdWriteCommand>
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd90      	pop	{r4, r7, pc}

08003200 <lcdBacklightOn>:
{
	LCD_BL_OFF();
}

void lcdBacklightOn(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	LCD_BL_ON();
 8003204:	2201      	movs	r2, #1
 8003206:	2101      	movs	r1, #1
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <lcdBacklightOn+0x14>)
 800320a:	f001 fa42 	bl	8004692 <HAL_GPIO_WritePin>
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40010c00 	.word	0x40010c00

08003218 <lcdGetWidth>:
	lcdWriteCommand(ILI9341_TEARINGEFFECTON);
	lcdWriteData(m);
}

uint16_t lcdGetWidth(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return lcdProperties.width;
 800321c:	4b02      	ldr	r3, [pc, #8]	; (8003228 <lcdGetWidth+0x10>)
 800321e:	881b      	ldrh	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	20000030 	.word	0x20000030

0800322c <lcdGetHeight>:

uint16_t lcdGetHeight(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return lcdProperties.height;
 8003230:	4b02      	ldr	r3, [pc, #8]	; (800323c <lcdGetHeight+0x10>)
 8003232:	885b      	ldrh	r3, [r3, #2]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	20000030 	.word	0x20000030

08003240 <lcdGetOrientation>:
	id |= lcdReadData();
	return id;
}

lcdOrientationTypeDef lcdGetOrientation(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return lcdProperties.orientation;
 8003244:	4b02      	ldr	r3, [pc, #8]	; (8003250 <lcdGetOrientation+0x10>)
 8003246:	791b      	ldrb	r3, [r3, #4]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	20000030 	.word	0x20000030

08003254 <lcdGetTextFont>:

sFONT* lcdGetTextFont(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
	return lcdFont.pFont;
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <lcdGetTextFont+0x10>)
 800325a:	689b      	ldr	r3, [r3, #8]
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	20000038 	.word	0x20000038

08003268 <lcdReadPixel>:
 * \param y        y-Coordinate
 *
 * \return uint16_t     Color
 */
uint16_t lcdReadPixel(uint16_t x, uint16_t y)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	460a      	mov	r2, r1
 8003272:	80fb      	strh	r3, [r7, #6]
 8003274:	4613      	mov	r3, r2
 8003276:	80bb      	strh	r3, [r7, #4]
    uint16_t temp[3];
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <lcdReadPixel+0xa8>)
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	429a      	cmp	r2, r3
 8003280:	d204      	bcs.n	800328c <lcdReadPixel+0x24>
 8003282:	4b23      	ldr	r3, [pc, #140]	; (8003310 <lcdReadPixel+0xa8>)
 8003284:	885b      	ldrh	r3, [r3, #2]
 8003286:	88ba      	ldrh	r2, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	d301      	bcc.n	8003290 <lcdReadPixel+0x28>
        return 0;
 800328c:	2300      	movs	r3, #0
 800328e:	e03a      	b.n	8003306 <lcdReadPixel+0x9e>

    lcdWriteCommand(ILI9341_COLADDRSET);
 8003290:	202a      	movs	r0, #42	; 0x2a
 8003292:	f000 f89b 	bl	80033cc <lcdWriteCommand>
    lcdWriteData((x >> 8) & 0xFF);
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	b29b      	uxth	r3, r3
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f8a5 	bl	80033ec <lcdWriteData>
    lcdWriteData(x & 0xFF);
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f89f 	bl	80033ec <lcdWriteData>

    lcdWriteCommand(ILI9341_PAGEADDRSET);
 80032ae:	202b      	movs	r0, #43	; 0x2b
 80032b0:	f000 f88c 	bl	80033cc <lcdWriteCommand>
    lcdWriteData((y >> 8) & 0xFF);
 80032b4:	88bb      	ldrh	r3, [r7, #4]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f896 	bl	80033ec <lcdWriteData>
    lcdWriteData(y & 0xFF);
 80032c0:	88bb      	ldrh	r3, [r7, #4]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f890 	bl	80033ec <lcdWriteData>

    lcdWriteCommand(ILI9341_MEMORYREAD);
 80032cc:	202e      	movs	r0, #46	; 0x2e
 80032ce:	f000 f87d 	bl	80033cc <lcdWriteCommand>

    temp[0] = lcdReadData(); // dummy read
 80032d2:	f000 f89b 	bl	800340c <lcdReadData>
 80032d6:	4603      	mov	r3, r0
 80032d8:	813b      	strh	r3, [r7, #8]
    temp[1] = lcdReadData();
 80032da:	f000 f897 	bl	800340c <lcdReadData>
 80032de:	4603      	mov	r3, r0
 80032e0:	817b      	strh	r3, [r7, #10]
    temp[2] = lcdReadData();
 80032e2:	f000 f893 	bl	800340c <lcdReadData>
 80032e6:	4603      	mov	r3, r0
 80032e8:	81bb      	strh	r3, [r7, #12]

    return lcdColor565((temp[1] >> 8) & 0xFF, temp[1] & 0xFF, (temp[2] >> 8) & 0xFF);
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	b2d8      	uxtb	r0, r3
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	b2d9      	uxtb	r1, r3
 80032f6:	89bb      	ldrh	r3, [r7, #12]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	f000 f808 	bl	8003314 <lcdColor565>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000030 	.word	0x20000030

08003314 <lcdColor565>:

uint16_t lcdColor565(uint8_t r, uint8_t g, uint8_t b)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
 800331e:	460b      	mov	r3, r1
 8003320:	71bb      	strb	r3, [r7, #6]
 8003322:	4613      	mov	r3, r2
 8003324:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	b21b      	sxth	r3, r3
 800332c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003330:	f023 0307 	bic.w	r3, r3, #7
 8003334:	b21a      	sxth	r2, r3
 8003336:	79bb      	ldrb	r3, [r7, #6]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	b21b      	sxth	r3, r3
 800333c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003340:	b21b      	sxth	r3, r3
 8003342:	4313      	orrs	r3, r2
 8003344:	b21a      	sxth	r2, r3
 8003346:	797b      	ldrb	r3, [r7, #5]
 8003348:	08db      	lsrs	r3, r3, #3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	b21b      	sxth	r3, r3
 800334e:	4313      	orrs	r3, r2
 8003350:	b21b      	sxth	r3, r3
 8003352:	b29b      	uxth	r3, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
	...

08003360 <lcdDrawPixels>:

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60ba      	str	r2, [r7, #8]
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	4603      	mov	r3, r0
 800336c:	81fb      	strh	r3, [r7, #14]
 800336e:	460b      	mov	r3, r1
 8003370:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <lcdDrawPixels+0x54>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <lcdDrawPixels+0x54>)
 8003380:	885b      	ldrh	r3, [r3, #2]
 8003382:	3b01      	subs	r3, #1
 8003384:	b29b      	uxth	r3, r3
 8003386:	89b9      	ldrh	r1, [r7, #12]
 8003388:	89f8      	ldrh	r0, [r7, #14]
 800338a:	f7ff feed 	bl	8003168 <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	617a      	str	r2, [r7, #20]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f825 	bl	80033ec <lcdWriteData>
  }
  while (i < dataLength);
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d3f1      	bcc.n	800338e <lcdDrawPixels+0x2e>
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000030 	.word	0x20000030

080033b8 <lcdReset>:

static void lcdReset(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80033bc:	2001      	movs	r0, #1
 80033be:	f000 f805 	bl	80033cc <lcdWriteCommand>
	HAL_Delay(50);
 80033c2:	2032      	movs	r0, #50	; 0x32
 80033c4:	f000 fe88 	bl	80040d8 <HAL_Delay>
}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}

080033cc <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 80033d6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80033da:	79fa      	ldrb	r2, [r7, #7]
 80033dc:	b292      	uxth	r2, r2
 80033de:	801a      	strh	r2, [r3, #0]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
	...

080033ec <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 80033f6:	4a04      	ldr	r2, [pc, #16]	; (8003408 <lcdWriteData+0x1c>)
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	8013      	strh	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	60020000 	.word	0x60020000

0800340c <lcdReadData>:

static unsigned short lcdReadData(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
	return LCD_DataRead();
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <lcdReadData+0x14>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	60020000 	.word	0x60020000

08003424 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8003424:	b490      	push	{r4, r7}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	4604      	mov	r4, r0
 800342c:	4608      	mov	r0, r1
 800342e:	4611      	mov	r1, r2
 8003430:	461a      	mov	r2, r3
 8003432:	4623      	mov	r3, r4
 8003434:	71fb      	strb	r3, [r7, #7]
 8003436:	4603      	mov	r3, r0
 8003438:	71bb      	strb	r3, [r7, #6]
 800343a:	460b      	mov	r3, r1
 800343c:	717b      	strb	r3, [r7, #5]
 800343e:	4613      	mov	r3, r2
 8003440:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8003446:	7f3b      	ldrb	r3, [r7, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <lcdBuildMemoryAccessControlConfig+0x30>
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8003454:	7e3b      	ldrb	r3, [r7, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <lcdBuildMemoryAccessControlConfig+0x3e>
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8003462:	793b      	ldrb	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <lcdBuildMemoryAccessControlConfig+0x4c>
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	f043 0310 	orr.w	r3, r3, #16
 800346e:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8003470:	797b      	ldrb	r3, [r7, #5]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <lcdBuildMemoryAccessControlConfig+0x5a>
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	f043 0320 	orr.w	r3, r3, #32
 800347c:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 800347e:	79bb      	ldrb	r3, [r7, #6]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <lcdBuildMemoryAccessControlConfig+0x68>
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800348a:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <lcdBuildMemoryAccessControlConfig+0x76>
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003498:	73fb      	strb	r3, [r7, #15]
  return value;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc90      	pop	{r4, r7}
 80034a4:	4770      	bx	lr
	...

080034a8 <ledInit>:




bool ledInit(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
	bool ret = true;
 80034ae:	2301      	movs	r3, #1
 80034b0:	74fb      	strb	r3, [r7, #19]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b2:	463b      	mov	r3, r7
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034be:	2301      	movs	r3, #1
 80034c0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c6:	2302      	movs	r3, #2
 80034c8:	60fb      	str	r3, [r7, #12]


	  for (int i =0; i<LED_MAX_CH; i++)
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e016      	b.n	80034fe <ledInit+0x56>
	  {

		  GPIO_InitStruct.Pin = led_tbl[i].pin;
 80034d0:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <ledInit+0x68>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4413      	add	r3, r2
 80034d8:	889b      	ldrh	r3, [r3, #4]
 80034da:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80034dc:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <ledInit+0x68>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034e4:	463a      	mov	r2, r7
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 ff27 	bl	800433c <HAL_GPIO_Init>

		  ledOff(i);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f80e 	bl	8003514 <ledOff>
	  for (int i =0; i<LED_MAX_CH; i++)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3301      	adds	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b01      	cmp	r3, #1
 8003502:	dde5      	ble.n	80034d0 <ledInit+0x28>

	  }
	return ret;
 8003504:	7cfb      	ldrb	r3, [r7, #19]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000048 	.word	0x20000048

08003514 <ledOff>:
}



void ledOff(uint8_t ch)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d811      	bhi.n	8003548 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <ledOff+0x3c>)
 8003528:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <ledOff+0x3c>)
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	8899      	ldrh	r1, [r3, #4]
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	4a05      	ldr	r2, [pc, #20]	; (8003550 <ledOff+0x3c>)
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	79db      	ldrb	r3, [r3, #7]
 8003540:	461a      	mov	r2, r3
 8003542:	f001 f8a6 	bl	8004692 <HAL_GPIO_WritePin>
 8003546:	e000      	b.n	800354a <ledOff+0x36>
	if (ch >= LED_MAX_CH) return;
 8003548:	bf00      	nop

}
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000048 	.word	0x20000048

08003554 <hideMenu>:




void hideMenu()
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af02      	add	r7, sp, #8
#ifdef LCD_TOUCH_MENU_TEST
//	            x  y      w         h     color
	lcdFillRect(0, 0,lcdGetWidth(), 25, COLOR_BLACK);
 800355a:	f7ff fe5d 	bl	8003218 <lcdGetWidth>
 800355e:	4603      	mov	r3, r0
 8003560:	b21a      	sxth	r2, r3
 8003562:	2300      	movs	r3, #0
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2319      	movs	r3, #25
 8003568:	2100      	movs	r1, #0
 800356a:	2000      	movs	r0, #0
 800356c:	f7ff f9b8 	bl	80028e0 <lcdFillRect>
#endif /* LCD_TOUCH_MENU_TEST */

#ifdef LCD_TOUCH_BOARD_LED_TEST
	;
#endif /* LCD_TOUCH_BOARD_LED_TEST */
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <showMenu>:


void showMenu(uint8_t selectedIndex)
{
 8003578:	b5b0      	push	{r4, r5, r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af02      	add	r7, sp, #8
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
#ifdef LCD_TOUCH_MENU_TEST
	lcdSetTextFont(&Font12);
 8003582:	4876      	ldr	r0, [pc, #472]	; (800375c <showMenu+0x1e4>)
 8003584:	f7ff fd44 	bl	8003010 <lcdSetTextFont>
#ifdef LCD_TOUCH_BOARD_LED_TEST
	lcdSetTextFont(&Font20);
#endif /* LCD_TOUCH_BOARD_LED_TEST */


	if (selectedIndex > 0 && selectedIndex <= MENU_ITEMS)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8093 	beq.w	80036b6 <showMenu+0x13e>
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	2b06      	cmp	r3, #6
 8003594:	f200 808f 	bhi.w	80036b6 <showMenu+0x13e>
	{
		if (activedMenuItem > 0 && activedMenuItem <= MENU_ITEMS)
 8003598:	4b71      	ldr	r3, [pc, #452]	; (8003760 <showMenu+0x1e8>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d047      	beq.n	8003630 <showMenu+0xb8>
 80035a0:	4b6f      	ldr	r3, [pc, #444]	; (8003760 <showMenu+0x1e8>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b06      	cmp	r3, #6
 80035a6:	d843      	bhi.n	8003630 <showMenu+0xb8>
		{
			int ti=activedMenuItem-1;
 80035a8:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <showMenu+0x1e8>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
			lcdSetTextColor(COLOR_WHITE, menuBGColor[ti]);
 80035b0:	4a6c      	ldr	r2, [pc, #432]	; (8003764 <showMenu+0x1ec>)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035b8:	4619      	mov	r1, r3
 80035ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80035be:	f7ff fd35 	bl	800302c <lcdSetTextColor>
			lcdFillRect(menuColordinate[ti][0], menuColordinate[ti][1], menuColordinate[ti][2], menuColordinate[ti][3], menuBGColor[ti]);
 80035c2:	4a69      	ldr	r2, [pc, #420]	; (8003768 <showMenu+0x1f0>)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80035ca:	b218      	sxth	r0, r3
 80035cc:	4a66      	ldr	r2, [pc, #408]	; (8003768 <showMenu+0x1f0>)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	885b      	ldrh	r3, [r3, #2]
 80035d6:	b219      	sxth	r1, r3
 80035d8:	4a63      	ldr	r2, [pc, #396]	; (8003768 <showMenu+0x1f0>)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	889b      	ldrh	r3, [r3, #4]
 80035e2:	b21a      	sxth	r2, r3
 80035e4:	4c60      	ldr	r4, [pc, #384]	; (8003768 <showMenu+0x1f0>)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4423      	add	r3, r4
 80035ec:	88db      	ldrh	r3, [r3, #6]
 80035ee:	b21c      	sxth	r4, r3
 80035f0:	4d5c      	ldr	r5, [pc, #368]	; (8003764 <showMenu+0x1ec>)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	4623      	mov	r3, r4
 80035fc:	f7ff f970 	bl	80028e0 <lcdFillRect>

#ifdef LCD_TOUCH_MENU_TEST
			lcdSetCursor(menuColordinate[ti][0]+6, menuColordinate[ti][1]+4); //텍스트 위치 커서 조정
 8003600:	4a59      	ldr	r2, [pc, #356]	; (8003768 <showMenu+0x1f0>)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8003608:	3306      	adds	r3, #6
 800360a:	b29a      	uxth	r2, r3
 800360c:	4956      	ldr	r1, [pc, #344]	; (8003768 <showMenu+0x1f0>)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	440b      	add	r3, r1
 8003614:	885b      	ldrh	r3, [r3, #2]
 8003616:	3304      	adds	r3, #4
 8003618:	b29b      	uxth	r3, r3
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f7ff fd89 	bl	8003134 <lcdSetCursor>

#ifdef LCD_TOUCH_BOARD_LED_TEST
			lcdSetCursor(menuColordinate[ti][0]+13, menuColordinate[ti][1]+40); //텍스트 위치 커서 조정
#endif /* LCD_TOUCH_BOARD_LED_TEST */

			lcdPrintf(menuText[ti]);
 8003622:	4a52      	ldr	r2, [pc, #328]	; (800376c <showMenu+0x1f4>)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fc64 	bl	8002ef8 <lcdPrintf>
		}

		activedMenuItem=selectedIndex;
 8003630:	4a4b      	ldr	r2, [pc, #300]	; (8003760 <showMenu+0x1e8>)
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	7013      	strb	r3, [r2, #0]
		selectedIndex--;
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	3b01      	subs	r3, #1
 800363a:	71fb      	strb	r3, [r7, #7]
		lcdSetTextColor(COLOR_WHITE, selmenuBGColor);
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <showMenu+0x1f8>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003646:	f7ff fcf1 	bl	800302c <lcdSetTextColor>
		lcdFillRect(menuColordinate[selectedIndex][0], menuColordinate[selectedIndex][1], menuColordinate[selectedIndex][2], menuColordinate[selectedIndex][3], selmenuBGColor);
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	4a46      	ldr	r2, [pc, #280]	; (8003768 <showMenu+0x1f0>)
 800364e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8003652:	b218      	sxth	r0, r3
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	4a44      	ldr	r2, [pc, #272]	; (8003768 <showMenu+0x1f0>)
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	885b      	ldrh	r3, [r3, #2]
 800365e:	b219      	sxth	r1, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	4a41      	ldr	r2, [pc, #260]	; (8003768 <showMenu+0x1f0>)
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	889b      	ldrh	r3, [r3, #4]
 800366a:	b21a      	sxth	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	4c3e      	ldr	r4, [pc, #248]	; (8003768 <showMenu+0x1f0>)
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4423      	add	r3, r4
 8003674:	88db      	ldrh	r3, [r3, #6]
 8003676:	b21c      	sxth	r4, r3
 8003678:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <showMenu+0x1f8>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	4623      	mov	r3, r4
 8003680:	f7ff f92e 	bl	80028e0 <lcdFillRect>

#ifdef LCD_TOUCH_MENU_TEST
		lcdSetCursor(menuColordinate[selectedIndex][0]+6, menuColordinate[selectedIndex][1]+4); //텍스트 위치 커서 조정
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	4a38      	ldr	r2, [pc, #224]	; (8003768 <showMenu+0x1f0>)
 8003688:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800368c:	3306      	adds	r3, #6
 800368e:	b29a      	uxth	r2, r3
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	4935      	ldr	r1, [pc, #212]	; (8003768 <showMenu+0x1f0>)
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	440b      	add	r3, r1
 8003698:	885b      	ldrh	r3, [r3, #2]
 800369a:	3304      	adds	r3, #4
 800369c:	b29b      	uxth	r3, r3
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f7ff fd47 	bl	8003134 <lcdSetCursor>

#ifdef LCD_TOUCH_BOARD_LED_TEST
		lcdSetCursor(menuColordinate[selectedIndex][0]+13, menuColordinate[selectedIndex][1]+40); //텍스트 위치 커서 조정
#endif /* LCD_TOUCH_BOARD_LED_TEST */

		lcdPrintf(menuText[selectedIndex]);
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	4a30      	ldr	r2, [pc, #192]	; (800376c <showMenu+0x1f4>)
 80036aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fc22 	bl	8002ef8 <lcdPrintf>
 80036b4:	e04e      	b.n	8003754 <showMenu+0x1dc>
	}
	else
	{
#ifdef LCD_TOUCH_MENU_TEST
		hideMenu();
 80036b6:	f7ff ff4d 	bl	8003554 <hideMenu>
#endif /* LCD_TOUCH_MENU_TEST */

		activedMenuItem=0;
 80036ba:	4b29      	ldr	r3, [pc, #164]	; (8003760 <showMenu+0x1e8>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<MENU_ITEMS;i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e042      	b.n	800374c <showMenu+0x1d4>
		{
			lcdSetTextColor(COLOR_WHITE, menuBGColor[i]);
 80036c6:	4a27      	ldr	r2, [pc, #156]	; (8003764 <showMenu+0x1ec>)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036ce:	4619      	mov	r1, r3
 80036d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80036d4:	f7ff fcaa 	bl	800302c <lcdSetTextColor>
			lcdFillRect(menuColordinate[i][0], menuColordinate[i][1], menuColordinate[i][2], menuColordinate[i][3], menuBGColor[i]);
 80036d8:	4a23      	ldr	r2, [pc, #140]	; (8003768 <showMenu+0x1f0>)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80036e0:	b218      	sxth	r0, r3
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <showMenu+0x1f0>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	885b      	ldrh	r3, [r3, #2]
 80036ec:	b219      	sxth	r1, r3
 80036ee:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <showMenu+0x1f0>)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	889b      	ldrh	r3, [r3, #4]
 80036f8:	b21a      	sxth	r2, r3
 80036fa:	4c1b      	ldr	r4, [pc, #108]	; (8003768 <showMenu+0x1f0>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4423      	add	r3, r4
 8003702:	88db      	ldrh	r3, [r3, #6]
 8003704:	b21c      	sxth	r4, r3
 8003706:	4d17      	ldr	r5, [pc, #92]	; (8003764 <showMenu+0x1ec>)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4623      	mov	r3, r4
 8003712:	f7ff f8e5 	bl	80028e0 <lcdFillRect>

#ifdef LCD_TOUCH_MENU_TEST
			lcdSetCursor(menuColordinate[i][0]+6, menuColordinate[i][1]+4); //텍스트 위치 커서 조정
 8003716:	4a14      	ldr	r2, [pc, #80]	; (8003768 <showMenu+0x1f0>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800371e:	3306      	adds	r3, #6
 8003720:	b29a      	uxth	r2, r3
 8003722:	4911      	ldr	r1, [pc, #68]	; (8003768 <showMenu+0x1f0>)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	885b      	ldrh	r3, [r3, #2]
 800372c:	3304      	adds	r3, #4
 800372e:	b29b      	uxth	r3, r3
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f7ff fcfe 	bl	8003134 <lcdSetCursor>

#ifdef LCD_TOUCH_BOARD_LED_TEST
			lcdSetCursor(menuColordinate[i][0]+13, menuColordinate[i][1]+40); //텍스트 위치 커서 조정
#endif /* LCD_TOUCH_BOARD_LED_TEST */

			lcdPrintf(menuText[i]);
 8003738:	4a0c      	ldr	r2, [pc, #48]	; (800376c <showMenu+0x1f4>)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fbd9 	bl	8002ef8 <lcdPrintf>
		for (int i=0;i<MENU_ITEMS;i++)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3301      	adds	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b05      	cmp	r3, #5
 8003750:	ddb9      	ble.n	80036c6 <showMenu+0x14e>
		}
	}
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bdb0      	pop	{r4, r5, r7, pc}
 800375c:	20000008 	.word	0x20000008
 8003760:	200002b9 	.word	0x200002b9
 8003764:	200000a0 	.word	0x200000a0
 8003768:	20000058 	.word	0x20000058
 800376c:	20000088 	.word	0x20000088
 8003770:	200000ac 	.word	0x200000ac

08003774 <getTouchMenItem>:


uint8_t getTouchMenItem(uint16_t x, uint16_t y)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	460a      	mov	r2, r1
 800377e:	80fb      	strh	r3, [r7, #6]
 8003780:	4613      	mov	r3, r2
 8003782:	80bb      	strh	r3, [r7, #4]
	uint8_t ret = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<MENU_ITEMS;i++)
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	e033      	b.n	80037f6 <getTouchMenItem+0x82>
	{     //                       x                            x                     w
		if (x > menuColordinate[i][0] && x < menuColordinate[i][0] + menuColordinate[i][2] &&
 800378e:	4a1e      	ldr	r2, [pc, #120]	; (8003808 <getTouchMenItem+0x94>)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	429a      	cmp	r2, r3
 800379a:	d929      	bls.n	80037f0 <getTouchMenItem+0x7c>
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	491a      	ldr	r1, [pc, #104]	; (8003808 <getTouchMenItem+0x94>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80037a6:	4618      	mov	r0, r3
 80037a8:	4917      	ldr	r1, [pc, #92]	; (8003808 <getTouchMenItem+0x94>)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	440b      	add	r3, r1
 80037b0:	889b      	ldrh	r3, [r3, #4]
 80037b2:	4403      	add	r3, r0
 80037b4:	429a      	cmp	r2, r3
 80037b6:	da1b      	bge.n	80037f0 <getTouchMenItem+0x7c>
				y > menuColordinate[i][1] && y < menuColordinate[i][1] + menuColordinate[i][3])
 80037b8:	4a13      	ldr	r2, [pc, #76]	; (8003808 <getTouchMenItem+0x94>)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	885b      	ldrh	r3, [r3, #2]
		if (x > menuColordinate[i][0] && x < menuColordinate[i][0] + menuColordinate[i][2] &&
 80037c2:	88ba      	ldrh	r2, [r7, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d913      	bls.n	80037f0 <getTouchMenItem+0x7c>
				y > menuColordinate[i][1] && y < menuColordinate[i][1] + menuColordinate[i][3])
 80037c8:	88ba      	ldrh	r2, [r7, #4]
 80037ca:	490f      	ldr	r1, [pc, #60]	; (8003808 <getTouchMenItem+0x94>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	885b      	ldrh	r3, [r3, #2]
 80037d4:	4618      	mov	r0, r3
 80037d6:	490c      	ldr	r1, [pc, #48]	; (8003808 <getTouchMenItem+0x94>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	440b      	add	r3, r1
 80037de:	88db      	ldrh	r3, [r3, #6]
 80037e0:	4403      	add	r3, r0
 80037e2:	429a      	cmp	r2, r3
 80037e4:	da04      	bge.n	80037f0 <getTouchMenItem+0x7c>
		 //                            y                            y                     h
		{
			ret = i+1;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
			break;
 80037ee:	e005      	b.n	80037fc <getTouchMenItem+0x88>
	for (int i=0;i<MENU_ITEMS;i++)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	ddc8      	ble.n	800378e <getTouchMenItem+0x1a>
		}
	}
	return ret;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	20000058 	.word	0x20000058

0800380c <showMessage>:
#include "showmessage.h"
#include "ili9341_lcd.h"


void showMessage(char* msg, uint8_t sec)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b08f      	sub	sp, #60	; 0x3c
 8003810:	af02      	add	r7, sp, #8
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
	unsigned int px,py;
	unsigned int x,y;
	uint8_t fw,fh;
	uint16_t *msgBuff;

	px = (lcdGetWidth()-210)/2;
 8003818:	f7ff fcfe 	bl	8003218 <lcdGetWidth>
 800381c:	4603      	mov	r3, r0
 800381e:	3bd2      	subs	r3, #210	; 0xd2
 8003820:	0fda      	lsrs	r2, r3, #31
 8003822:	4413      	add	r3, r2
 8003824:	105b      	asrs	r3, r3, #1
 8003826:	61bb      	str	r3, [r7, #24]
	py = (lcdGetHeight()-110)/2;
 8003828:	f7ff fd00 	bl	800322c <lcdGetHeight>
 800382c:	4603      	mov	r3, r0
 800382e:	3b6e      	subs	r3, #110	; 0x6e
 8003830:	0fda      	lsrs	r2, r3, #31
 8003832:	4413      	add	r3, r2
 8003834:	105b      	asrs	r3, r3, #1
 8003836:	617b      	str	r3, [r7, #20]
	msgBuff = malloc(sizeof(uint16_t)*(210*110));
 8003838:	f24b 4078 	movw	r0, #46200	; 0xb478
 800383c:	f002 f8a4 	bl	8005988 <malloc>
 8003840:	4603      	mov	r3, r0
 8003842:	613b      	str	r3, [r7, #16]
	lcdSetWindow(0, 0, lcdGetWidth(), lcdGetHeight());
 8003844:	f7ff fce8 	bl	8003218 <lcdGetWidth>
 8003848:	4603      	mov	r3, r0
 800384a:	461c      	mov	r4, r3
 800384c:	f7ff fcee 	bl	800322c <lcdGetHeight>
 8003850:	4603      	mov	r3, r0
 8003852:	4622      	mov	r2, r4
 8003854:	2100      	movs	r1, #0
 8003856:	2000      	movs	r0, #0
 8003858:	f7ff fc86 	bl	8003168 <lcdSetWindow>
	for (x=px; x < 210+px; x++)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003860:	e022      	b.n	80038a8 <showMessage+0x9c>
	{
		for (y=py; y < 110+py;y++)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
 8003866:	e017      	b.n	8003898 <showMessage+0x8c>
		{
		 msgBuff[(x-px)*110+y-py] = lcdReadPixel(x, y);
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	b298      	uxth	r0, r3
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	b299      	uxth	r1, r3
 8003870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	226e      	movs	r2, #110	; 0x6e
 8003878:	fb02 f203 	mul.w	r2, r2, r3
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	441a      	add	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	18d4      	adds	r4, r2, r3
 800388a:	f7ff fced 	bl	8003268 <lcdReadPixel>
 800388e:	4603      	mov	r3, r0
 8003890:	8023      	strh	r3, [r4, #0]
		for (y=py; y < 110+py;y++)
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	3301      	adds	r3, #1
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	336e      	adds	r3, #110	; 0x6e
 800389c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3e2      	bcc.n	8003868 <showMessage+0x5c>
	for (x=px; x < 210+px; x++)
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	3301      	adds	r3, #1
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	33d2      	adds	r3, #210	; 0xd2
 80038ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d3d7      	bcc.n	8003862 <showMessage+0x56>
		}
	}
	lcdFillRect(px, py, 209, 109, COLOR_BLUE);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	b218      	sxth	r0, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	b219      	sxth	r1, r3
 80038ba:	231f      	movs	r3, #31
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	236d      	movs	r3, #109	; 0x6d
 80038c0:	22d1      	movs	r2, #209	; 0xd1
 80038c2:	f7ff f80d 	bl	80028e0 <lcdFillRect>
	lcdFillRect(px+5, py+5, 199, 99, COLOR_WHITE);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3305      	adds	r3, #5
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	b218      	sxth	r0, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3305      	adds	r3, #5
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	b219      	sxth	r1, r3
 80038da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2363      	movs	r3, #99	; 0x63
 80038e2:	22c7      	movs	r2, #199	; 0xc7
 80038e4:	f7fe fffc 	bl	80028e0 <lcdFillRect>
	lcdSetTextColor(COLOR_BLUE, COLOR_WHITE);
 80038e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038ec:	201f      	movs	r0, #31
 80038ee:	f7ff fb9d 	bl	800302c <lcdSetTextColor>
	lcdSetTextFont(&Font16);
 80038f2:	4855      	ldr	r0, [pc, #340]	; (8003a48 <showMessage+0x23c>)
 80038f4:	f7ff fb8c 	bl	8003010 <lcdSetTextFont>
	fw=Font16.Width;
 80038f8:	4b53      	ldr	r3, [pc, #332]	; (8003a48 <showMessage+0x23c>)
 80038fa:	889b      	ldrh	r3, [r3, #4]
 80038fc:	73fb      	strb	r3, [r7, #15]
	fh = Font16.Height;
 80038fe:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <showMessage+0x23c>)
 8003900:	88db      	ldrh	r3, [r3, #6]
 8003902:	73bb      	strb	r3, [r7, #14]
	for (int posx=0, posy=0, i=0; i < strlen(msg);i++,posx++)
 8003904:	2300      	movs	r3, #0
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	2300      	movs	r3, #0
 800390a:	623b      	str	r3, [r7, #32]
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	e04a      	b.n	80039a8 <showMessage+0x19c>
	{
		if (msg[i] == '\n' || (posx+1)*(fw) > 200-fw)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b0a      	cmp	r3, #10
 800391c:	d009      	beq.n	8003932 <showMessage+0x126>
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	3301      	adds	r3, #1
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	fb02 f203 	mul.w	r2, r2, r3
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800392e:	429a      	cmp	r2, r3
 8003930:	dd04      	ble.n	800393c <showMessage+0x130>
		{
			posy++;
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	3301      	adds	r3, #1
 8003936:	623b      	str	r3, [r7, #32]
			posx=0;
 8003938:	2300      	movs	r3, #0
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (msg[i] == '\n') i++;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d102      	bne.n	800394e <showMessage+0x142>
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	3301      	adds	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
		lcdDrawChar(px+12+posx*fw, py+12+posy*(fh+2), msg[i], COLOR_BLUE, COLOR_WHITE);
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	b29b      	uxth	r3, r3
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	b292      	uxth	r2, r2
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	b29a      	uxth	r2, r3
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	b29b      	uxth	r3, r3
 8003960:	4413      	add	r3, r2
 8003962:	b29b      	uxth	r3, r3
 8003964:	330c      	adds	r3, #12
 8003966:	b29b      	uxth	r3, r3
 8003968:	b218      	sxth	r0, r3
 800396a:	7bbb      	ldrb	r3, [r7, #14]
 800396c:	3302      	adds	r3, #2
 800396e:	b29b      	uxth	r3, r3
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	b292      	uxth	r2, r2
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	b29a      	uxth	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	b29b      	uxth	r3, r3
 800397e:	4413      	add	r3, r2
 8003980:	b29b      	uxth	r3, r3
 8003982:	330c      	adds	r3, #12
 8003984:	b29b      	uxth	r3, r3
 8003986:	b219      	sxth	r1, r3
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	781a      	ldrb	r2, [r3, #0]
 8003990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	231f      	movs	r3, #31
 8003998:	f7ff fa04 	bl	8002da4 <lcdDrawChar>
	for (int posx=0, posy=0, i=0; i < strlen(msg);i++,posx++)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	3301      	adds	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	3301      	adds	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fc fc3b 	bl	8000224 <strlen>
 80039ae:	4602      	mov	r2, r0
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d8ad      	bhi.n	8003912 <showMessage+0x106>
	}

	HAL_Delay(sec*1000);
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fb89 	bl	80040d8 <HAL_Delay>

	lcdSetWindow(0, 0, lcdGetWidth(), lcdGetHeight());
 80039c6:	f7ff fc27 	bl	8003218 <lcdGetWidth>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461c      	mov	r4, r3
 80039ce:	f7ff fc2d 	bl	800322c <lcdGetHeight>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4622      	mov	r2, r4
 80039d6:	2100      	movs	r1, #0
 80039d8:	2000      	movs	r0, #0
 80039da:	f7ff fbc5 	bl	8003168 <lcdSetWindow>
	for (x=px; x < 210+px; x++)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e2:	e022      	b.n	8003a2a <showMessage+0x21e>
	{
		for (y=py; y < 110+py; y++)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e8:	e017      	b.n	8003a1a <showMessage+0x20e>
		{
		 lcdDrawPixel(x, y, msgBuff[(x-px)*110+y-py]);
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	b298      	uxth	r0, r3
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	b299      	uxth	r1, r3
 80039f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	226e      	movs	r2, #110	; 0x6e
 80039fa:	fb02 f203 	mul.w	r2, r2, r3
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	441a      	add	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f7fe fa6a 	bl	8001ee8 <lcdDrawPixel>
		for (y=py; y < 110+py; y++)
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	3301      	adds	r3, #1
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	336e      	adds	r3, #110	; 0x6e
 8003a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d3e2      	bcc.n	80039ea <showMessage+0x1de>
	for (x=px; x < 210+px; x++)
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	3301      	adds	r3, #1
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	33d2      	adds	r3, #210	; 0xd2
 8003a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d3d7      	bcc.n	80039e4 <showMessage+0x1d8>
		}
	}
	free(msgBuff);
 8003a34:	6938      	ldr	r0, [r7, #16]
 8003a36:	f001 ffaf 	bl	8005998 <free>
	HAL_Delay(10);
 8003a3a:	200a      	movs	r0, #10
 8003a3c:	f000 fb4c 	bl	80040d8 <HAL_Delay>
}
 8003a40:	bf00      	nop
 8003a42:	3734      	adds	r7, #52	; 0x34
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd90      	pop	{r4, r7, pc}
 8003a48:	20000010 	.word	0x20000010

08003a4c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a52:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <MX_SPI2_Init+0x68>)
 8003a54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a56:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a64:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a80:	2228      	movs	r2, #40	; 0x28
 8003a82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a98:	220a      	movs	r2, #10
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a9c:	4804      	ldr	r0, [pc, #16]	; (8003ab0 <MX_SPI2_Init+0x64>)
 8003a9e:	f001 fa11 	bl	8004ec4 <HAL_SPI_Init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003aa8:	f7fd fe59 	bl	800175e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000260 	.word	0x20000260
 8003ab4:	40003800 	.word	0x40003800

08003ab8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f107 0310 	add.w	r3, r7, #16
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_SPI_MspInit+0x8c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d131      	bne.n	8003b3c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_SPI_MspInit+0x90>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_SPI_MspInit+0x90>)
 8003ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae2:	61d3      	str	r3, [r2, #28]
 8003ae4:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_SPI_MspInit+0x90>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_SPI_MspInit+0x90>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <HAL_SPI_MspInit+0x90>)
 8003af6:	f043 0308 	orr.w	r3, r3, #8
 8003afa:	6193      	str	r3, [r2, #24]
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_SPI_MspInit+0x90>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003b08:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b12:	2303      	movs	r3, #3
 8003b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b16:	f107 0310 	add.w	r3, r7, #16
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	480b      	ldr	r0, [pc, #44]	; (8003b4c <HAL_SPI_MspInit+0x94>)
 8003b1e:	f000 fc0d 	bl	800433c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003b22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b30:	f107 0310 	add.w	r3, r7, #16
 8003b34:	4619      	mov	r1, r3
 8003b36:	4805      	ldr	r0, [pc, #20]	; (8003b4c <HAL_SPI_MspInit+0x94>)
 8003b38:	f000 fc00 	bl	800433c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40003800 	.word	0x40003800
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40010c00 	.word	0x40010c00

08003b50 <XPT2046_TouchSelect>:
uint16_t cRawY_min = XPT2046_MIN_RAW_Y;
uint16_t cRawY_max = XPT2046_MAX_RAW_Y;


static void XPT2046_TouchSelect()
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8003b54:	2200      	movs	r2, #0
 8003b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b5a:	4802      	ldr	r0, [pc, #8]	; (8003b64 <XPT2046_TouchSelect+0x14>)
 8003b5c:	f000 fd99 	bl	8004692 <HAL_GPIO_WritePin>
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40010c00 	.word	0x40010c00

08003b68 <XPT2046_TouchUnselect>:

void XPT2046_TouchUnselect()
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b72:	4802      	ldr	r0, [pc, #8]	; (8003b7c <XPT2046_TouchUnselect+0x14>)
 8003b74:	f000 fd8d 	bl	8004692 <HAL_GPIO_WritePin>
}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40010c00 	.word	0x40010c00

08003b80 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed()
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 8003b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b88:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <XPT2046_TouchPressed+0x20>)
 8003b8a:	f000 fd6b 	bl	8004664 <HAL_GPIO_ReadPin>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40010800 	.word	0x40010800

08003ba4 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
	MX_SPI2_Init();
 8003ba8:	f7ff ff50 	bl	8003a4c <MX_SPI2_Init>
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	; 0x30
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };


    XPT2046_TouchSelect();
 8003bba:	f7ff ffc9 	bl	8003b50 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	77bb      	strb	r3, [r7, #30]
 8003bce:	e03f      	b.n	8003c50 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8003bd0:	f7ff ffd6 	bl	8003b80 <XPT2046_TouchPressed>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f083 0301 	eor.w	r3, r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d13b      	bne.n	8003c58 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8003be0:	7ffb      	ldrb	r3, [r7, #31]
 8003be2:	3301      	adds	r3, #1
 8003be4:	77fb      	strb	r3, [r7, #31]

        uint8_t y_raw[2];
        uint8_t x_raw[2];


        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	2201      	movs	r2, #1
 8003bec:	4943      	ldr	r1, [pc, #268]	; (8003cfc <XPT2046_TouchGetCoordinates+0x14c>)
 8003bee:	4844      	ldr	r0, [pc, #272]	; (8003d00 <XPT2046_TouchGetCoordinates+0x150>)
 8003bf0:	f001 f9ec 	bl	8004fcc <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8003bf4:	f107 0210 	add.w	r2, r7, #16
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2302      	movs	r3, #2
 8003c00:	4940      	ldr	r1, [pc, #256]	; (8003d04 <XPT2046_TouchGetCoordinates+0x154>)
 8003c02:	483f      	ldr	r0, [pc, #252]	; (8003d00 <XPT2046_TouchGetCoordinates+0x150>)
 8003c04:	f001 fb1e 	bl	8005244 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	493e      	ldr	r1, [pc, #248]	; (8003d08 <XPT2046_TouchGetCoordinates+0x158>)
 8003c10:	483b      	ldr	r0, [pc, #236]	; (8003d00 <XPT2046_TouchGetCoordinates+0x150>)
 8003c12:	f001 f9db 	bl	8004fcc <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8003c16:	f107 020c 	add.w	r2, r7, #12
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2302      	movs	r3, #2
 8003c22:	4938      	ldr	r1, [pc, #224]	; (8003d04 <XPT2046_TouchGetCoordinates+0x154>)
 8003c24:	4836      	ldr	r0, [pc, #216]	; (8003d00 <XPT2046_TouchGetCoordinates+0x150>)
 8003c26:	f001 fb0d 	bl	8005244 <HAL_SPI_TransmitReceive>


        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8003c2a:	7b3b      	ldrb	r3, [r7, #12]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	7b7a      	ldrb	r2, [r7, #13]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	461a      	mov	r2, r3
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	4413      	add	r3, r2
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8003c3a:	7c3b      	ldrb	r3, [r7, #16]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	7c7a      	ldrb	r2, [r7, #17]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	461a      	mov	r2, r3
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	4413      	add	r3, r2
 8003c48:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 8003c4a:	7fbb      	ldrb	r3, [r7, #30]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	77bb      	strb	r3, [r7, #30]
 8003c50:	7fbb      	ldrb	r3, [r7, #30]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	d9bc      	bls.n	8003bd0 <XPT2046_TouchGetCoordinates+0x20>
 8003c56:	e000      	b.n	8003c5a <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8003c58:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 8003c5a:	f7ff ff85 	bl	8003b68 <XPT2046_TouchUnselect>

    if(nsamples < 16)
 8003c5e:	7ffb      	ldrb	r3, [r7, #31]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d801      	bhi.n	8003c68 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e045      	b.n	8003cf4 <XPT2046_TouchGetCoordinates+0x144>

    uint32_t raw_x = (avg_x / 16);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c74:	d202      	bcs.n	8003c7c <XPT2046_TouchGetCoordinates+0xcc>
 8003c76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c7a:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f247 5230 	movw	r2, #30000	; 0x7530
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d902      	bls.n	8003c8c <XPT2046_TouchGetCoordinates+0xdc>
 8003c86:	f247 5330 	movw	r3, #30000	; 0x7530
 8003c8a:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f240 52db 	movw	r2, #1499	; 0x5db
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d802      	bhi.n	8003ca2 <XPT2046_TouchGetCoordinates+0xf2>
 8003c9c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003ca0:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f247 1248 	movw	r2, #29000	; 0x7148
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d902      	bls.n	8003cb2 <XPT2046_TouchGetCoordinates+0x102>
 8003cac:	f247 1348 	movw	r3, #29000	; 0x7148
 8003cb0:	617b      	str	r3, [r7, #20]

    // Uncomment this line to calibrate touchscreen:
    //printf("raw_x = %d, raw_y = %d\r\n", (int) raw_x, (int) raw_y);

    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	f5a3 23ea 	sub.w	r3, r3, #479232	; 0x75000
 8003cc0:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8003cc4:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <XPT2046_TouchGetCoordinates+0x15c>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0b9b      	lsrs	r3, r3, #14
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	801a      	strh	r2, [r3, #0]
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	019b      	lsls	r3, r3, #6
 8003cdc:	f5a3 23ea 	sub.w	r3, r3, #479232	; 0x75000
 8003ce0:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <XPT2046_TouchGetCoordinates+0x160>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0b9b      	lsrs	r3, r3, #14
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	801a      	strh	r2, [r3, #0]

    return true;
 8003cf2:	2301      	movs	r3, #1
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3728      	adds	r7, #40	; 0x28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	080262e4 	.word	0x080262e4
 8003d00:	20000260 	.word	0x20000260
 8003d04:	080262e8 	.word	0x080262e8
 8003d08:	080262ec 	.word	0x080262ec
 8003d0c:	95cbec1b 	.word	0x95cbec1b
 8003d10:	98852841 	.word	0x98852841

08003d14 <XPT2046_TouchCalibration>:



bool XPT2046_TouchCalibration(void)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af02      	add	r7, sp, #8
	uint16_t x0=0,y0=0,x1=0,y1=0,x2=0,y2=0,x3=0,y3=0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	82bb      	strh	r3, [r7, #20]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	827b      	strh	r3, [r7, #18]
 8003d22:	2300      	movs	r3, #0
 8003d24:	823b      	strh	r3, [r7, #16]
 8003d26:	2300      	movs	r3, #0
 8003d28:	81fb      	strh	r3, [r7, #14]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	81bb      	strh	r3, [r7, #12]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	817b      	strh	r3, [r7, #10]
 8003d32:	2300      	movs	r3, #0
 8003d34:	813b      	strh	r3, [r7, #8]
 8003d36:	2300      	movs	r3, #0
 8003d38:	80fb      	strh	r3, [r7, #6]
	bool correct=true;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
	lcdOrientationTypeDef lot = lcdGetOrientation();
 8003d3e:	f7ff fa7f 	bl	8003240 <lcdGetOrientation>
 8003d42:	4603      	mov	r3, r0
 8003d44:	75bb      	strb	r3, [r7, #22]
	lcdSetOrientation(LCD_ORIENTATION_PORTRAIT);
 8003d46:	2000      	movs	r0, #0
 8003d48:	f7ff f986 	bl	8003058 <lcdSetOrientation>

	lcdFillRGB(COLOR_BLACK);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7fe f8a1 	bl	8001e94 <lcdFillRGB>
	lcdDrawRect(0, 0, 6, 6, COLOR_YELLOW);
 8003d52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2306      	movs	r3, #6
 8003d5a:	2206      	movs	r2, #6
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f7fe fa1a 	bl	8002198 <lcdDrawRect>
	//lcdSetCursor(20, 100);
	while(!XPT2046_TouchPressed()) ;
 8003d64:	bf00      	nop
 8003d66:	f7ff ff0b 	bl	8003b80 <XPT2046_TouchPressed>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f083 0301 	eor.w	r3, r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f7      	bne.n	8003d66 <XPT2046_TouchCalibration+0x52>
	if (!XPT2046_TouchGetCoordinates(&x0, &y0))
 8003d76:	f107 0212 	add.w	r2, r7, #18
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff15 	bl	8003bb0 <XPT2046_TouchGetCoordinates>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f083 0301 	eor.w	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <XPT2046_TouchCalibration+0x8a>
	{
		//lcdPrintf("Calibration Error!");
		lcdSetOrientation(lot);
 8003d92:	7dbb      	ldrb	r3, [r7, #22]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff f95f 	bl	8003058 <lcdSetOrientation>
		return false;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e122      	b.n	8003fe4 <XPT2046_TouchCalibration+0x2d0>
	}
	//lcdPrintf("Release Pen");
	lcdFillRGB(COLOR_BLACK);
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f7fe f878 	bl	8001e94 <lcdFillRGB>
	lcdDrawRect(0, lcdGetHeight()-6, 6, 6, COLOR_YELLOW);
 8003da4:	f7ff fa42 	bl	800322c <lcdGetHeight>
 8003da8:	4603      	mov	r3, r0
 8003daa:	3b06      	subs	r3, #6
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	b219      	sxth	r1, r3
 8003db0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2306      	movs	r3, #6
 8003db8:	2206      	movs	r2, #6
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f7fe f9ec 	bl	8002198 <lcdDrawRect>
	while(XPT2046_TouchPressed());
 8003dc0:	bf00      	nop
 8003dc2:	f7ff fedd 	bl	8003b80 <XPT2046_TouchPressed>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1fa      	bne.n	8003dc2 <XPT2046_TouchCalibration+0xae>
	HAL_Delay(1);
 8003dcc:	2001      	movs	r0, #1
 8003dce:	f000 f983 	bl	80040d8 <HAL_Delay>

	//lcdSetCursor(20, 100);
	while(!XPT2046_TouchPressed());
 8003dd2:	bf00      	nop
 8003dd4:	f7ff fed4 	bl	8003b80 <XPT2046_TouchPressed>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f083 0301 	eor.w	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f7      	bne.n	8003dd4 <XPT2046_TouchCalibration+0xc0>
	if(!XPT2046_TouchGetCoordinates(&x1, &y1))
 8003de4:	f107 020e 	add.w	r2, r7, #14
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fede 	bl	8003bb0 <XPT2046_TouchGetCoordinates>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f083 0301 	eor.w	r3, r3, #1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <XPT2046_TouchCalibration+0xf8>
	{
		//lcdPrintf("Calibration Error!");
		lcdSetOrientation(lot);
 8003e00:	7dbb      	ldrb	r3, [r7, #22]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff f928 	bl	8003058 <lcdSetOrientation>
		return false;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e0eb      	b.n	8003fe4 <XPT2046_TouchCalibration+0x2d0>
	}
	//lcdPrintf("Release Pen");
	lcdFillRGB(COLOR_BLACK);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f7fe f841 	bl	8001e94 <lcdFillRGB>
	lcdDrawRect(lcdGetWidth()-6, lcdGetHeight()-6, 6, 6, COLOR_YELLOW);
 8003e12:	f7ff fa01 	bl	8003218 <lcdGetWidth>
 8003e16:	4603      	mov	r3, r0
 8003e18:	3b06      	subs	r3, #6
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	b21c      	sxth	r4, r3
 8003e1e:	f7ff fa05 	bl	800322c <lcdGetHeight>
 8003e22:	4603      	mov	r3, r0
 8003e24:	3b06      	subs	r3, #6
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	b219      	sxth	r1, r3
 8003e2a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	2306      	movs	r3, #6
 8003e32:	2206      	movs	r2, #6
 8003e34:	4620      	mov	r0, r4
 8003e36:	f7fe f9af 	bl	8002198 <lcdDrawRect>
	while(XPT2046_TouchPressed());
 8003e3a:	bf00      	nop
 8003e3c:	f7ff fea0 	bl	8003b80 <XPT2046_TouchPressed>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1fa      	bne.n	8003e3c <XPT2046_TouchCalibration+0x128>
	HAL_Delay(1);
 8003e46:	2001      	movs	r0, #1
 8003e48:	f000 f946 	bl	80040d8 <HAL_Delay>


	//lcdSetCursor(20, 100);
	while(!XPT2046_TouchPressed());
 8003e4c:	bf00      	nop
 8003e4e:	f7ff fe97 	bl	8003b80 <XPT2046_TouchPressed>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f083 0301 	eor.w	r3, r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f7      	bne.n	8003e4e <XPT2046_TouchCalibration+0x13a>
	if (!XPT2046_TouchGetCoordinates(&x2, &y2))
 8003e5e:	f107 020a 	add.w	r2, r7, #10
 8003e62:	f107 030c 	add.w	r3, r7, #12
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fea1 	bl	8003bb0 <XPT2046_TouchGetCoordinates>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f083 0301 	eor.w	r3, r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <XPT2046_TouchCalibration+0x172>
	{
		//lcdPrintf("Calibration Error!");
		lcdSetOrientation(lot);
 8003e7a:	7dbb      	ldrb	r3, [r7, #22]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff f8eb 	bl	8003058 <lcdSetOrientation>
		return false;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e0ae      	b.n	8003fe4 <XPT2046_TouchCalibration+0x2d0>
	}
	//lcdPrintf("Release Pen");
	lcdFillRGB(COLOR_BLACK);
 8003e86:	2000      	movs	r0, #0
 8003e88:	f7fe f804 	bl	8001e94 <lcdFillRGB>
	lcdDrawRect(lcdGetWidth()-6, 0, 6, 6, COLOR_YELLOW);
 8003e8c:	f7ff f9c4 	bl	8003218 <lcdGetWidth>
 8003e90:	4603      	mov	r3, r0
 8003e92:	3b06      	subs	r3, #6
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	b218      	sxth	r0, r3
 8003e98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2306      	movs	r3, #6
 8003ea0:	2206      	movs	r2, #6
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f7fe f978 	bl	8002198 <lcdDrawRect>
	while(XPT2046_TouchPressed());
 8003ea8:	bf00      	nop
 8003eaa:	f7ff fe69 	bl	8003b80 <XPT2046_TouchPressed>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1fa      	bne.n	8003eaa <XPT2046_TouchCalibration+0x196>
	HAL_Delay(1);
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f000 f90f 	bl	80040d8 <HAL_Delay>

	//lcdSetCursor(20, 100);
	while(!XPT2046_TouchPressed());
 8003eba:	bf00      	nop
 8003ebc:	f7ff fe60 	bl	8003b80 <XPT2046_TouchPressed>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f083 0301 	eor.w	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f7      	bne.n	8003ebc <XPT2046_TouchCalibration+0x1a8>
	if (!XPT2046_TouchGetCoordinates(&x3, &y3))
 8003ecc:	1dba      	adds	r2, r7, #6
 8003ece:	f107 0308 	add.w	r3, r7, #8
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fe6b 	bl	8003bb0 <XPT2046_TouchGetCoordinates>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f083 0301 	eor.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <XPT2046_TouchCalibration+0x1de>
	{
		//lcdPrintf("Calibration Error!");
		lcdSetOrientation(lot);
 8003ee6:	7dbb      	ldrb	r3, [r7, #22]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff f8b5 	bl	8003058 <lcdSetOrientation>
		return false;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e078      	b.n	8003fe4 <XPT2046_TouchCalibration+0x2d0>
	}
	//lcdPrintf("Release Pen");
	while(XPT2046_TouchPressed());
 8003ef2:	bf00      	nop
 8003ef4:	f7ff fe44 	bl	8003b80 <XPT2046_TouchPressed>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1fa      	bne.n	8003ef4 <XPT2046_TouchCalibration+0x1e0>

	if ( (int)(x0-x1) < -1*XTP2046_CALI_DIFF  || (int)(x0-x1) > XTP2046_CALI_DIFF) correct=false;
 8003efe:	8abb      	ldrh	r3, [r7, #20]
 8003f00:	461a      	mov	r2, r3
 8003f02:	8a3b      	ldrh	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8003f0a:	db06      	blt.n	8003f1a <XPT2046_TouchCalibration+0x206>
 8003f0c:	8abb      	ldrh	r3, [r7, #20]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	8a3b      	ldrh	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f18:	dd01      	ble.n	8003f1e <XPT2046_TouchCalibration+0x20a>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
	if ( (int)(y1-y2) < -1*XTP2046_CALI_DIFF  || (int)(y1-y2) > XTP2046_CALI_DIFF) correct=false;
 8003f1e:	89fb      	ldrh	r3, [r7, #14]
 8003f20:	461a      	mov	r2, r3
 8003f22:	897b      	ldrh	r3, [r7, #10]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8003f2a:	db06      	blt.n	8003f3a <XPT2046_TouchCalibration+0x226>
 8003f2c:	89fb      	ldrh	r3, [r7, #14]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	897b      	ldrh	r3, [r7, #10]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f38:	dd01      	ble.n	8003f3e <XPT2046_TouchCalibration+0x22a>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]
	if ( (int)(x2-x3) < -1*XTP2046_CALI_DIFF  || (int)(x2-x3) > XTP2046_CALI_DIFF) correct=false;
 8003f3e:	89bb      	ldrh	r3, [r7, #12]
 8003f40:	461a      	mov	r2, r3
 8003f42:	893b      	ldrh	r3, [r7, #8]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8003f4a:	db06      	blt.n	8003f5a <XPT2046_TouchCalibration+0x246>
 8003f4c:	89bb      	ldrh	r3, [r7, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	893b      	ldrh	r3, [r7, #8]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f58:	dd01      	ble.n	8003f5e <XPT2046_TouchCalibration+0x24a>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75fb      	strb	r3, [r7, #23]
	if ( (int)(y0-y3) < -1*XTP2046_CALI_DIFF  || (int)(y0-y3) > XTP2046_CALI_DIFF) correct=false;
 8003f5e:	8a7b      	ldrh	r3, [r7, #18]
 8003f60:	461a      	mov	r2, r3
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8003f6a:	db06      	blt.n	8003f7a <XPT2046_TouchCalibration+0x266>
 8003f6c:	8a7b      	ldrh	r3, [r7, #18]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f78:	dd01      	ble.n	8003f7e <XPT2046_TouchCalibration+0x26a>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]

	if (correct) {
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d027      	beq.n	8003fd4 <XPT2046_TouchCalibration+0x2c0>
		cRawX_min = (x0+x1)/2;
 8003f84:	8abb      	ldrh	r3, [r7, #20]
 8003f86:	461a      	mov	r2, r3
 8003f88:	8a3b      	ldrh	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	0fda      	lsrs	r2, r3, #31
 8003f8e:	4413      	add	r3, r2
 8003f90:	105b      	asrs	r3, r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	4b15      	ldr	r3, [pc, #84]	; (8003fec <XPT2046_TouchCalibration+0x2d8>)
 8003f96:	801a      	strh	r2, [r3, #0]
		cRawX_max = (x2+x3)/2;
 8003f98:	89bb      	ldrh	r3, [r7, #12]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	893b      	ldrh	r3, [r7, #8]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	0fda      	lsrs	r2, r3, #31
 8003fa2:	4413      	add	r3, r2
 8003fa4:	105b      	asrs	r3, r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <XPT2046_TouchCalibration+0x2dc>)
 8003faa:	801a      	strh	r2, [r3, #0]
		cRawY_min = (y0+y3)/2;
 8003fac:	8a7b      	ldrh	r3, [r7, #18]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	0fda      	lsrs	r2, r3, #31
 8003fb6:	4413      	add	r3, r2
 8003fb8:	105b      	asrs	r3, r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <XPT2046_TouchCalibration+0x2e0>)
 8003fbe:	801a      	strh	r2, [r3, #0]
		cRawY_max = (y1+y2)/2;
 8003fc0:	89fb      	ldrh	r3, [r7, #14]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	897b      	ldrh	r3, [r7, #10]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	0fda      	lsrs	r2, r3, #31
 8003fca:	4413      	add	r3, r2
 8003fcc:	105b      	asrs	r3, r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <XPT2046_TouchCalibration+0x2e4>)
 8003fd2:	801a      	strh	r2, [r3, #0]
	}


	lcdFillRGB(COLOR_BLACK);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f7fd ff5d 	bl	8001e94 <lcdFillRGB>
	//lcdSetCursor(20, 100);
	//lcdPrintf("Calibration OK:\r\nx_min=%04x,\r\ny_min=%04x,\r\nx_max=%04x,\r\ny_max=%04x",cRawX_min,cRawY_min,cRawX_max,cRawY_max);
	lcdSetOrientation(lot);
 8003fda:	7dbb      	ldrb	r3, [r7, #22]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff f83b 	bl	8003058 <lcdSetOrientation>
	return correct;
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}
 8003fec:	200000ae 	.word	0x200000ae
 8003ff0:	200000b0 	.word	0x200000b0
 8003ff4:	200000b2 	.word	0x200000b2
 8003ff8:	200000b4 	.word	0x200000b4

08003ffc <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
	bspInit();
 8004000:	f7fd faee 	bl	80015e0 <bspInit>

	//TODO: HW 초기화 설정 (3)
//	MX_FSMC_Init();
//	MX_SPI2_Init();
	lcdInit();
 8004004:	f7fd fd26 	bl	8001a54 <lcdInit>
	XPT2046_Init();
 8004008:	f7ff fdcc 	bl	8003ba4 <XPT2046_Init>
	ledInit();
 800400c:	f7ff fa4c 	bl	80034a8 <ledInit>

}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <HAL_Init+0x28>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a07      	ldr	r2, [pc, #28]	; (800403c <HAL_Init+0x28>)
 800401e:	f043 0310 	orr.w	r3, r3, #16
 8004022:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004024:	2003      	movs	r0, #3
 8004026:	f000 f947 	bl	80042b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800402a:	2000      	movs	r0, #0
 800402c:	f000 f808 	bl	8004040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004030:	f7fd fb9a 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40022000 	.word	0x40022000

08004040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004048:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_InitTick+0x54>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_InitTick+0x58>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	4619      	mov	r1, r3
 8004052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004056:	fbb3 f3f1 	udiv	r3, r3, r1
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f95f 	bl	8004322 <HAL_SYSTICK_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e00e      	b.n	800408c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b0f      	cmp	r3, #15
 8004072:	d80a      	bhi.n	800408a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004074:	2200      	movs	r2, #0
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	f000 f927 	bl	80042ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004080:	4a06      	ldr	r2, [pc, #24]	; (800409c <HAL_InitTick+0x5c>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e000      	b.n	800408c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000004 	.word	0x20000004
 8004098:	200000bc 	.word	0x200000bc
 800409c:	200000b8 	.word	0x200000b8

080040a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_IncTick+0x1c>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_IncTick+0x20>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4413      	add	r3, r2
 80040b0:	4a03      	ldr	r2, [pc, #12]	; (80040c0 <HAL_IncTick+0x20>)
 80040b2:	6013      	str	r3, [r2, #0]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	200000bc 	.word	0x200000bc
 80040c0:	20000304 	.word	0x20000304

080040c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return uwTick;
 80040c8:	4b02      	ldr	r3, [pc, #8]	; (80040d4 <HAL_GetTick+0x10>)
 80040ca:	681b      	ldr	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	20000304 	.word	0x20000304

080040d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7ff fff0 	bl	80040c4 <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d005      	beq.n	80040fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_Delay+0x44>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040fe:	bf00      	nop
 8004100:	f7ff ffe0 	bl	80040c4 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	429a      	cmp	r2, r3
 800410e:	d8f7      	bhi.n	8004100 <HAL_Delay+0x28>
  {
  }
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	200000bc 	.word	0x200000bc

08004120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <__NVIC_SetPriorityGrouping+0x44>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800413c:	4013      	ands	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800414c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004152:	4a04      	ldr	r2, [pc, #16]	; (8004164 <__NVIC_SetPriorityGrouping+0x44>)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	60d3      	str	r3, [r2, #12]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <__NVIC_GetPriorityGrouping+0x18>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	f003 0307 	and.w	r3, r3, #7
}
 8004176:	4618      	mov	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	2b00      	cmp	r3, #0
 8004194:	db0b      	blt.n	80041ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	f003 021f 	and.w	r2, r3, #31
 800419c:	4906      	ldr	r1, [pc, #24]	; (80041b8 <__NVIC_EnableIRQ+0x34>)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2001      	movs	r0, #1
 80041a6:	fa00 f202 	lsl.w	r2, r0, r2
 80041aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	e000e100 	.word	0xe000e100

080041bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db0a      	blt.n	80041e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	490c      	ldr	r1, [pc, #48]	; (8004208 <__NVIC_SetPriority+0x4c>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	440b      	add	r3, r1
 80041e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e4:	e00a      	b.n	80041fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4908      	ldr	r1, [pc, #32]	; (800420c <__NVIC_SetPriority+0x50>)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3b04      	subs	r3, #4
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	440b      	add	r3, r1
 80041fa:	761a      	strb	r2, [r3, #24]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	e000e100 	.word	0xe000e100
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f1c3 0307 	rsb	r3, r3, #7
 800422a:	2b04      	cmp	r3, #4
 800422c:	bf28      	it	cs
 800422e:	2304      	movcs	r3, #4
 8004230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3304      	adds	r3, #4
 8004236:	2b06      	cmp	r3, #6
 8004238:	d902      	bls.n	8004240 <NVIC_EncodePriority+0x30>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3b03      	subs	r3, #3
 800423e:	e000      	b.n	8004242 <NVIC_EncodePriority+0x32>
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	f04f 32ff 	mov.w	r2, #4294967295
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	401a      	ands	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004258:	f04f 31ff 	mov.w	r1, #4294967295
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	43d9      	mvns	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004268:	4313      	orrs	r3, r2
         );
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3b01      	subs	r3, #1
 8004280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004284:	d301      	bcc.n	800428a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004286:	2301      	movs	r3, #1
 8004288:	e00f      	b.n	80042aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800428a:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <SysTick_Config+0x40>)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004292:	210f      	movs	r1, #15
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	f7ff ff90 	bl	80041bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <SysTick_Config+0x40>)
 800429e:	2200      	movs	r2, #0
 80042a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a2:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <SysTick_Config+0x40>)
 80042a4:	2207      	movs	r2, #7
 80042a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	e000e010 	.word	0xe000e010

080042b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff2d 	bl	8004120 <__NVIC_SetPriorityGrouping>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	4603      	mov	r3, r0
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e0:	f7ff ff42 	bl	8004168 <__NVIC_GetPriorityGrouping>
 80042e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	6978      	ldr	r0, [r7, #20]
 80042ec:	f7ff ff90 	bl	8004210 <NVIC_EncodePriority>
 80042f0:	4602      	mov	r2, r0
 80042f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff5f 	bl	80041bc <__NVIC_SetPriority>
}
 80042fe:	bf00      	nop
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	4603      	mov	r3, r0
 800430e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff35 	bl	8004184 <__NVIC_EnableIRQ>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff ffa2 	bl	8004274 <SysTick_Config>
 8004330:	4603      	mov	r3, r0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b08b      	sub	sp, #44	; 0x2c
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004346:	2300      	movs	r3, #0
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800434a:	2300      	movs	r3, #0
 800434c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800434e:	e179      	b.n	8004644 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004350:	2201      	movs	r2, #1
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	429a      	cmp	r2, r3
 800436a:	f040 8168 	bne.w	800463e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4aa0      	ldr	r2, [pc, #640]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d05e      	beq.n	8004436 <HAL_GPIO_Init+0xfa>
 8004378:	4a9e      	ldr	r2, [pc, #632]	; (80045f4 <HAL_GPIO_Init+0x2b8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d875      	bhi.n	800446a <HAL_GPIO_Init+0x12e>
 800437e:	4a9e      	ldr	r2, [pc, #632]	; (80045f8 <HAL_GPIO_Init+0x2bc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d058      	beq.n	8004436 <HAL_GPIO_Init+0xfa>
 8004384:	4a9c      	ldr	r2, [pc, #624]	; (80045f8 <HAL_GPIO_Init+0x2bc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d86f      	bhi.n	800446a <HAL_GPIO_Init+0x12e>
 800438a:	4a9c      	ldr	r2, [pc, #624]	; (80045fc <HAL_GPIO_Init+0x2c0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d052      	beq.n	8004436 <HAL_GPIO_Init+0xfa>
 8004390:	4a9a      	ldr	r2, [pc, #616]	; (80045fc <HAL_GPIO_Init+0x2c0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d869      	bhi.n	800446a <HAL_GPIO_Init+0x12e>
 8004396:	4a9a      	ldr	r2, [pc, #616]	; (8004600 <HAL_GPIO_Init+0x2c4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d04c      	beq.n	8004436 <HAL_GPIO_Init+0xfa>
 800439c:	4a98      	ldr	r2, [pc, #608]	; (8004600 <HAL_GPIO_Init+0x2c4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d863      	bhi.n	800446a <HAL_GPIO_Init+0x12e>
 80043a2:	4a98      	ldr	r2, [pc, #608]	; (8004604 <HAL_GPIO_Init+0x2c8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d046      	beq.n	8004436 <HAL_GPIO_Init+0xfa>
 80043a8:	4a96      	ldr	r2, [pc, #600]	; (8004604 <HAL_GPIO_Init+0x2c8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d85d      	bhi.n	800446a <HAL_GPIO_Init+0x12e>
 80043ae:	2b12      	cmp	r3, #18
 80043b0:	d82a      	bhi.n	8004408 <HAL_GPIO_Init+0xcc>
 80043b2:	2b12      	cmp	r3, #18
 80043b4:	d859      	bhi.n	800446a <HAL_GPIO_Init+0x12e>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <HAL_GPIO_Init+0x80>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	08004437 	.word	0x08004437
 80043c0:	08004411 	.word	0x08004411
 80043c4:	08004423 	.word	0x08004423
 80043c8:	08004465 	.word	0x08004465
 80043cc:	0800446b 	.word	0x0800446b
 80043d0:	0800446b 	.word	0x0800446b
 80043d4:	0800446b 	.word	0x0800446b
 80043d8:	0800446b 	.word	0x0800446b
 80043dc:	0800446b 	.word	0x0800446b
 80043e0:	0800446b 	.word	0x0800446b
 80043e4:	0800446b 	.word	0x0800446b
 80043e8:	0800446b 	.word	0x0800446b
 80043ec:	0800446b 	.word	0x0800446b
 80043f0:	0800446b 	.word	0x0800446b
 80043f4:	0800446b 	.word	0x0800446b
 80043f8:	0800446b 	.word	0x0800446b
 80043fc:	0800446b 	.word	0x0800446b
 8004400:	08004419 	.word	0x08004419
 8004404:	0800442d 	.word	0x0800442d
 8004408:	4a7f      	ldr	r2, [pc, #508]	; (8004608 <HAL_GPIO_Init+0x2cc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800440e:	e02c      	b.n	800446a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	623b      	str	r3, [r7, #32]
          break;
 8004416:	e029      	b.n	800446c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	3304      	adds	r3, #4
 800441e:	623b      	str	r3, [r7, #32]
          break;
 8004420:	e024      	b.n	800446c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	3308      	adds	r3, #8
 8004428:	623b      	str	r3, [r7, #32]
          break;
 800442a:	e01f      	b.n	800446c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	330c      	adds	r3, #12
 8004432:	623b      	str	r3, [r7, #32]
          break;
 8004434:	e01a      	b.n	800446c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800443e:	2304      	movs	r3, #4
 8004440:	623b      	str	r3, [r7, #32]
          break;
 8004442:	e013      	b.n	800446c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800444c:	2308      	movs	r3, #8
 800444e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	611a      	str	r2, [r3, #16]
          break;
 8004456:	e009      	b.n	800446c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004458:	2308      	movs	r3, #8
 800445a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	615a      	str	r2, [r3, #20]
          break;
 8004462:	e003      	b.n	800446c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004464:	2300      	movs	r3, #0
 8004466:	623b      	str	r3, [r7, #32]
          break;
 8004468:	e000      	b.n	800446c <HAL_GPIO_Init+0x130>
          break;
 800446a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2bff      	cmp	r3, #255	; 0xff
 8004470:	d801      	bhi.n	8004476 <HAL_GPIO_Init+0x13a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	e001      	b.n	800447a <HAL_GPIO_Init+0x13e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2bff      	cmp	r3, #255	; 0xff
 8004480:	d802      	bhi.n	8004488 <HAL_GPIO_Init+0x14c>
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	e002      	b.n	800448e <HAL_GPIO_Init+0x152>
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	3b08      	subs	r3, #8
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	210f      	movs	r1, #15
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	401a      	ands	r2, r3
 80044a0:	6a39      	ldr	r1, [r7, #32]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	431a      	orrs	r2, r3
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80c1 	beq.w	800463e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044bc:	4b53      	ldr	r3, [pc, #332]	; (800460c <HAL_GPIO_Init+0x2d0>)
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	4a52      	ldr	r2, [pc, #328]	; (800460c <HAL_GPIO_Init+0x2d0>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6193      	str	r3, [r2, #24]
 80044c8:	4b50      	ldr	r3, [pc, #320]	; (800460c <HAL_GPIO_Init+0x2d0>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044d4:	4a4e      	ldr	r2, [pc, #312]	; (8004610 <HAL_GPIO_Init+0x2d4>)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	089b      	lsrs	r3, r3, #2
 80044da:	3302      	adds	r3, #2
 80044dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	220f      	movs	r2, #15
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a46      	ldr	r2, [pc, #280]	; (8004614 <HAL_GPIO_Init+0x2d8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d01f      	beq.n	8004540 <HAL_GPIO_Init+0x204>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a45      	ldr	r2, [pc, #276]	; (8004618 <HAL_GPIO_Init+0x2dc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d019      	beq.n	800453c <HAL_GPIO_Init+0x200>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a44      	ldr	r2, [pc, #272]	; (800461c <HAL_GPIO_Init+0x2e0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <HAL_GPIO_Init+0x1fc>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a43      	ldr	r2, [pc, #268]	; (8004620 <HAL_GPIO_Init+0x2e4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00d      	beq.n	8004534 <HAL_GPIO_Init+0x1f8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a42      	ldr	r2, [pc, #264]	; (8004624 <HAL_GPIO_Init+0x2e8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d007      	beq.n	8004530 <HAL_GPIO_Init+0x1f4>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a41      	ldr	r2, [pc, #260]	; (8004628 <HAL_GPIO_Init+0x2ec>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d101      	bne.n	800452c <HAL_GPIO_Init+0x1f0>
 8004528:	2305      	movs	r3, #5
 800452a:	e00a      	b.n	8004542 <HAL_GPIO_Init+0x206>
 800452c:	2306      	movs	r3, #6
 800452e:	e008      	b.n	8004542 <HAL_GPIO_Init+0x206>
 8004530:	2304      	movs	r3, #4
 8004532:	e006      	b.n	8004542 <HAL_GPIO_Init+0x206>
 8004534:	2303      	movs	r3, #3
 8004536:	e004      	b.n	8004542 <HAL_GPIO_Init+0x206>
 8004538:	2302      	movs	r3, #2
 800453a:	e002      	b.n	8004542 <HAL_GPIO_Init+0x206>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <HAL_GPIO_Init+0x206>
 8004540:	2300      	movs	r3, #0
 8004542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004544:	f002 0203 	and.w	r2, r2, #3
 8004548:	0092      	lsls	r2, r2, #2
 800454a:	4093      	lsls	r3, r2
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004552:	492f      	ldr	r1, [pc, #188]	; (8004610 <HAL_GPIO_Init+0x2d4>)
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	089b      	lsrs	r3, r3, #2
 8004558:	3302      	adds	r3, #2
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d006      	beq.n	800457a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800456c:	4b2f      	ldr	r3, [pc, #188]	; (800462c <HAL_GPIO_Init+0x2f0>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	492e      	ldr	r1, [pc, #184]	; (800462c <HAL_GPIO_Init+0x2f0>)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	4313      	orrs	r3, r2
 8004576:	600b      	str	r3, [r1, #0]
 8004578:	e006      	b.n	8004588 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800457a:	4b2c      	ldr	r3, [pc, #176]	; (800462c <HAL_GPIO_Init+0x2f0>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	43db      	mvns	r3, r3
 8004582:	492a      	ldr	r1, [pc, #168]	; (800462c <HAL_GPIO_Init+0x2f0>)
 8004584:	4013      	ands	r3, r2
 8004586:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d006      	beq.n	80045a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004594:	4b25      	ldr	r3, [pc, #148]	; (800462c <HAL_GPIO_Init+0x2f0>)
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	4924      	ldr	r1, [pc, #144]	; (800462c <HAL_GPIO_Init+0x2f0>)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
 80045a0:	e006      	b.n	80045b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045a2:	4b22      	ldr	r3, [pc, #136]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	4920      	ldr	r1, [pc, #128]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d006      	beq.n	80045ca <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	491a      	ldr	r1, [pc, #104]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]
 80045c8:	e006      	b.n	80045d8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045ca:	4b18      	ldr	r3, [pc, #96]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	4916      	ldr	r1, [pc, #88]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d025      	beq.n	8004630 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	4910      	ldr	r1, [pc, #64]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60cb      	str	r3, [r1, #12]
 80045f0:	e025      	b.n	800463e <HAL_GPIO_Init+0x302>
 80045f2:	bf00      	nop
 80045f4:	10320000 	.word	0x10320000
 80045f8:	10310000 	.word	0x10310000
 80045fc:	10220000 	.word	0x10220000
 8004600:	10210000 	.word	0x10210000
 8004604:	10120000 	.word	0x10120000
 8004608:	10110000 	.word	0x10110000
 800460c:	40021000 	.word	0x40021000
 8004610:	40010000 	.word	0x40010000
 8004614:	40010800 	.word	0x40010800
 8004618:	40010c00 	.word	0x40010c00
 800461c:	40011000 	.word	0x40011000
 8004620:	40011400 	.word	0x40011400
 8004624:	40011800 	.word	0x40011800
 8004628:	40011c00 	.word	0x40011c00
 800462c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_GPIO_Init+0x324>)
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	43db      	mvns	r3, r3
 8004638:	4909      	ldr	r1, [pc, #36]	; (8004660 <HAL_GPIO_Init+0x324>)
 800463a:	4013      	ands	r3, r2
 800463c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	3301      	adds	r3, #1
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	f47f ae7e 	bne.w	8004350 <HAL_GPIO_Init+0x14>
  }
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	372c      	adds	r7, #44	; 0x2c
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	40010400 	.word	0x40010400

08004664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	e001      	b.n	8004686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	807b      	strh	r3, [r7, #2]
 800469e:	4613      	mov	r3, r2
 80046a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046a2:	787b      	ldrb	r3, [r7, #1]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a8:	887a      	ldrh	r2, [r7, #2]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046ae:	e003      	b.n	80046b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046b0:	887b      	ldrh	r3, [r7, #2]
 80046b2:	041a      	lsls	r2, r3, #16
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	611a      	str	r2, [r3, #16]
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d006      	beq.n	80046e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb fdac 	bl	8000240 <HAL_GPIO_EXTI_Callback>
  }
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40010400 	.word	0x40010400

080046f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e26c      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8087 	beq.w	8004822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004714:	4b92      	ldr	r3, [pc, #584]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b04      	cmp	r3, #4
 800471e:	d00c      	beq.n	800473a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004720:	4b8f      	ldr	r3, [pc, #572]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b08      	cmp	r3, #8
 800472a:	d112      	bne.n	8004752 <HAL_RCC_OscConfig+0x5e>
 800472c:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d10b      	bne.n	8004752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473a:	4b89      	ldr	r3, [pc, #548]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d06c      	beq.n	8004820 <HAL_RCC_OscConfig+0x12c>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d168      	bne.n	8004820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e246      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x76>
 800475c:	4b80      	ldr	r3, [pc, #512]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7f      	ldr	r2, [pc, #508]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e02e      	b.n	80047c8 <HAL_RCC_OscConfig+0xd4>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x98>
 8004772:	4b7b      	ldr	r3, [pc, #492]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a7a      	ldr	r2, [pc, #488]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b78      	ldr	r3, [pc, #480]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a77      	ldr	r2, [pc, #476]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e01d      	b.n	80047c8 <HAL_RCC_OscConfig+0xd4>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0xbc>
 8004796:	4b72      	ldr	r3, [pc, #456]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a71      	ldr	r2, [pc, #452]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800479c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6e      	ldr	r2, [pc, #440]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0xd4>
 80047b0:	4b6b      	ldr	r3, [pc, #428]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a6a      	ldr	r2, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4b68      	ldr	r3, [pc, #416]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a67      	ldr	r2, [pc, #412]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7ff fc78 	bl	80040c4 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d8:	f7ff fc74 	bl	80040c4 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e1fa      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b5d      	ldr	r3, [pc, #372]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0xe4>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7ff fc64 	bl	80040c4 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004800:	f7ff fc60 	bl	80040c4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e1e6      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x10c>
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d063      	beq.n	80048f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800482e:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800483a:	4b49      	ldr	r3, [pc, #292]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b08      	cmp	r3, #8
 8004844:	d11c      	bne.n	8004880 <HAL_RCC_OscConfig+0x18c>
 8004846:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d116      	bne.n	8004880 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	4b43      	ldr	r3, [pc, #268]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_RCC_OscConfig+0x176>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e1ba      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4939      	ldr	r1, [pc, #228]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487e:	e03a      	b.n	80048f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004888:	4b36      	ldr	r3, [pc, #216]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7ff fc19 	bl	80040c4 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004896:	f7ff fc15 	bl	80040c4 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e19b      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b4:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4927      	ldr	r1, [pc, #156]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]
 80048c8:	e015      	b.n	80048f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ca:	4b26      	ldr	r3, [pc, #152]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7ff fbf8 	bl	80040c4 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d8:	f7ff fbf4 	bl	80040c4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e17a      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d03a      	beq.n	8004978 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d019      	beq.n	800493e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490a:	4b17      	ldr	r3, [pc, #92]	; (8004968 <HAL_RCC_OscConfig+0x274>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004910:	f7ff fbd8 	bl	80040c4 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004918:	f7ff fbd4 	bl	80040c4 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e15a      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004936:	2001      	movs	r0, #1
 8004938:	f000 faa6 	bl	8004e88 <RCC_Delay>
 800493c:	e01c      	b.n	8004978 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_RCC_OscConfig+0x274>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004944:	f7ff fbbe 	bl	80040c4 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494a:	e00f      	b.n	800496c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494c:	f7ff fbba 	bl	80040c4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d908      	bls.n	800496c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e140      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	42420000 	.word	0x42420000
 8004968:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496c:	4b9e      	ldr	r3, [pc, #632]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e9      	bne.n	800494c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80a6 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800498a:	4b97      	ldr	r3, [pc, #604]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004996:	4b94      	ldr	r3, [pc, #592]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	4a93      	ldr	r2, [pc, #588]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a0:	61d3      	str	r3, [r2, #28]
 80049a2:	4b91      	ldr	r3, [pc, #580]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b8e      	ldr	r3, [pc, #568]	; (8004bec <HAL_RCC_OscConfig+0x4f8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d118      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b8b      	ldr	r3, [pc, #556]	; (8004bec <HAL_RCC_OscConfig+0x4f8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a8a      	ldr	r2, [pc, #552]	; (8004bec <HAL_RCC_OscConfig+0x4f8>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7ff fb7b 	bl	80040c4 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d2:	f7ff fb77 	bl	80040c4 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b64      	cmp	r3, #100	; 0x64
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e0fd      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	4b81      	ldr	r3, [pc, #516]	; (8004bec <HAL_RCC_OscConfig+0x4f8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x312>
 80049f8:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	4a7a      	ldr	r2, [pc, #488]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6213      	str	r3, [r2, #32]
 8004a04:	e02d      	b.n	8004a62 <HAL_RCC_OscConfig+0x36e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x334>
 8004a0e:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4a75      	ldr	r2, [pc, #468]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	6213      	str	r3, [r2, #32]
 8004a1a:	4b73      	ldr	r3, [pc, #460]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	4a72      	ldr	r2, [pc, #456]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	6213      	str	r3, [r2, #32]
 8004a26:	e01c      	b.n	8004a62 <HAL_RCC_OscConfig+0x36e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b05      	cmp	r3, #5
 8004a2e:	d10c      	bne.n	8004a4a <HAL_RCC_OscConfig+0x356>
 8004a30:	4b6d      	ldr	r3, [pc, #436]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4a6c      	ldr	r2, [pc, #432]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a36:	f043 0304 	orr.w	r3, r3, #4
 8004a3a:	6213      	str	r3, [r2, #32]
 8004a3c:	4b6a      	ldr	r3, [pc, #424]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4a69      	ldr	r2, [pc, #420]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6213      	str	r3, [r2, #32]
 8004a48:	e00b      	b.n	8004a62 <HAL_RCC_OscConfig+0x36e>
 8004a4a:	4b67      	ldr	r3, [pc, #412]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a66      	ldr	r2, [pc, #408]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	6213      	str	r3, [r2, #32]
 8004a56:	4b64      	ldr	r3, [pc, #400]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4a63      	ldr	r2, [pc, #396]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d015      	beq.n	8004a96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6a:	f7ff fb2b 	bl	80040c4 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a72:	f7ff fb27 	bl	80040c4 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e0ab      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a88:	4b57      	ldr	r3, [pc, #348]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0ee      	beq.n	8004a72 <HAL_RCC_OscConfig+0x37e>
 8004a94:	e014      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a96:	f7ff fb15 	bl	80040c4 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9e:	f7ff fb11 	bl	80040c4 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e095      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab4:	4b4c      	ldr	r3, [pc, #304]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ee      	bne.n	8004a9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac6:	4b48      	ldr	r3, [pc, #288]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4a47      	ldr	r2, [pc, #284]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8081 	beq.w	8004bde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004adc:	4b42      	ldr	r3, [pc, #264]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d061      	beq.n	8004bac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d146      	bne.n	8004b7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af0:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <HAL_RCC_OscConfig+0x4fc>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7ff fae5 	bl	80040c4 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afe:	f7ff fae1 	bl	80040c4 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e067      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b10:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b24:	d108      	bne.n	8004b38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b26:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	492d      	ldr	r1, [pc, #180]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b38:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a19      	ldr	r1, [r3, #32]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	4927      	ldr	r1, [pc, #156]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b50:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <HAL_RCC_OscConfig+0x4fc>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7ff fab5 	bl	80040c4 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5e:	f7ff fab1 	bl	80040c4 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e037      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x46a>
 8004b7c:	e02f      	b.n	8004bde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7e:	4b1c      	ldr	r3, [pc, #112]	; (8004bf0 <HAL_RCC_OscConfig+0x4fc>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7ff fa9e 	bl	80040c4 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7ff fa9a 	bl	80040c4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e020      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x498>
 8004baa:	e018      	b.n	8004bde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e013      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d001      	beq.n	8004bde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	42420060 	.word	0x42420060

08004bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0d0      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c08:	4b6a      	ldr	r3, [pc, #424]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d910      	bls.n	8004c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b67      	ldr	r3, [pc, #412]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 0207 	bic.w	r2, r3, #7
 8004c1e:	4965      	ldr	r1, [pc, #404]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c26:	4b63      	ldr	r3, [pc, #396]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0b8      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c50:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a58      	ldr	r2, [pc, #352]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c68:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4a52      	ldr	r2, [pc, #328]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c74:	4b50      	ldr	r3, [pc, #320]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	494d      	ldr	r1, [pc, #308]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d040      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d115      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e07f      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb2:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e073      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc2:	4b3d      	ldr	r3, [pc, #244]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06b      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd2:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f023 0203 	bic.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4936      	ldr	r1, [pc, #216]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce4:	f7ff f9ee 	bl	80040c4 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7ff f9ea 	bl	80040c4 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e053      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 020c 	and.w	r2, r3, #12
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d1eb      	bne.n	8004cec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d14:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d210      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 0207 	bic.w	r2, r3, #7
 8004d2a:	4922      	ldr	r1, [pc, #136]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e032      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4916      	ldr	r1, [pc, #88]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d6e:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	490e      	ldr	r1, [pc, #56]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d82:	f000 f821 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8004d86:	4602      	mov	r2, r0
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	490a      	ldr	r1, [pc, #40]	; (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	5ccb      	ldrb	r3, [r1, r3]
 8004d96:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9a:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff f94c 	bl	8004040 <HAL_InitTick>

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40022000 	.word	0x40022000
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	080063ec 	.word	0x080063ec
 8004dc0:	20000004 	.word	0x20000004
 8004dc4:	200000b8 	.word	0x200000b8

08004dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc8:	b490      	push	{r4, r7}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004dce:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004dd0:	1d3c      	adds	r4, r7, #4
 8004dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004dd8:	f240 2301 	movw	r3, #513	; 0x201
 8004ddc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	2300      	movs	r3, #0
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004df2:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d002      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x40>
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d003      	beq.n	8004e0e <HAL_RCC_GetSysClockFreq+0x46>
 8004e06:	e02d      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0a:	623b      	str	r3, [r7, #32]
      break;
 8004e0c:	e02d      	b.n	8004e6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	0c9b      	lsrs	r3, r3, #18
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d013      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	0c5b      	lsrs	r3, r3, #17
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e46:	fb02 f203 	mul.w	r2, r2, r3
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
 8004e52:	e004      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	4a0b      	ldr	r2, [pc, #44]	; (8004e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	623b      	str	r3, [r7, #32]
      break;
 8004e62:	e002      	b.n	8004e6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e66:	623b      	str	r3, [r7, #32]
      break;
 8004e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3728      	adds	r7, #40	; 0x28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc90      	pop	{r4, r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	080063dc 	.word	0x080063dc
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	007a1200 	.word	0x007a1200
 8004e84:	003d0900 	.word	0x003d0900

08004e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <RCC_Delay+0x34>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <RCC_Delay+0x38>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	0a5b      	lsrs	r3, r3, #9
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ea4:	bf00      	nop
  }
  while (Delay --);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	60fa      	str	r2, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f9      	bne.n	8004ea4 <RCC_Delay+0x1c>
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	20000004 	.word	0x20000004
 8004ec0:	10624dd3 	.word	0x10624dd3

08004ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e076      	b.n	8004fc4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee6:	d009      	beq.n	8004efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
 8004eee:	e005      	b.n	8004efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fe fdce 	bl	8003ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f80:	ea42 0103 	orr.w	r1, r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	0c1a      	lsrs	r2, r3, #16
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f002 0204 	and.w	r2, r2, #4
 8004fa2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69da      	ldr	r2, [r3, #28]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_SPI_Transmit+0x22>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e126      	b.n	800523c <HAL_SPI_Transmit+0x270>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff6:	f7ff f865 	bl	80040c4 <HAL_GetTick>
 8004ffa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	d002      	beq.n	8005012 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800500c:	2302      	movs	r3, #2
 800500e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005010:	e10b      	b.n	800522a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_SPI_Transmit+0x52>
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005022:	e102      	b.n	800522a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2203      	movs	r2, #3
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	88fa      	ldrh	r2, [r7, #6]
 800503c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	88fa      	ldrh	r2, [r7, #6]
 8005042:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506a:	d10f      	bne.n	800508c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800508a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d007      	beq.n	80050aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b2:	d14b      	bne.n	800514c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_SPI_Transmit+0xf6>
 80050bc:	8afb      	ldrh	r3, [r7, #22]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d13e      	bne.n	8005140 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	881a      	ldrh	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	1c9a      	adds	r2, r3, #2
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050e6:	e02b      	b.n	8005140 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d112      	bne.n	800511c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	881a      	ldrh	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	1c9a      	adds	r2, r3, #2
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	86da      	strh	r2, [r3, #54]	; 0x36
 800511a:	e011      	b.n	8005140 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800511c:	f7fe ffd2 	bl	80040c4 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d803      	bhi.n	8005134 <HAL_SPI_Transmit+0x168>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d102      	bne.n	800513a <HAL_SPI_Transmit+0x16e>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d102      	bne.n	8005140 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800513e:	e074      	b.n	800522a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1ce      	bne.n	80050e8 <HAL_SPI_Transmit+0x11c>
 800514a:	e04c      	b.n	80051e6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_SPI_Transmit+0x18e>
 8005154:	8afb      	ldrh	r3, [r7, #22]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d140      	bne.n	80051dc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005180:	e02c      	b.n	80051dc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b02      	cmp	r3, #2
 800518e:	d113      	bne.n	80051b8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	7812      	ldrb	r2, [r2, #0]
 800519c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80051b6:	e011      	b.n	80051dc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051b8:	f7fe ff84 	bl	80040c4 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d803      	bhi.n	80051d0 <HAL_SPI_Transmit+0x204>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ce:	d102      	bne.n	80051d6 <HAL_SPI_Transmit+0x20a>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d102      	bne.n	80051dc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051da:	e026      	b.n	800522a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1cd      	bne.n	8005182 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fa54 	bl	8005698 <SPI_EndRxTxTransaction>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e000      	b.n	800522a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005228:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800523a:	7ffb      	ldrb	r3, [r7, #31]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08c      	sub	sp, #48	; 0x30
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005252:	2301      	movs	r3, #1
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_SPI_TransmitReceive+0x26>
 8005266:	2302      	movs	r3, #2
 8005268:	e18a      	b.n	8005580 <HAL_SPI_TransmitReceive+0x33c>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005272:	f7fe ff27 	bl	80040c4 <HAL_GetTick>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800528c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005290:	2b01      	cmp	r3, #1
 8005292:	d00f      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x70>
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529a:	d107      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x68>
 80052a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d003      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052b2:	e15b      	b.n	800556c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x82>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x82>
 80052c0:	887b      	ldrh	r3, [r7, #2]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052cc:	e14e      	b.n	800556c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d003      	beq.n	80052e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2205      	movs	r2, #5
 80052de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	887a      	ldrh	r2, [r7, #2]
 80052f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	887a      	ldrh	r2, [r7, #2]
 80052f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	887a      	ldrh	r2, [r7, #2]
 8005304:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	887a      	ldrh	r2, [r7, #2]
 800530a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d007      	beq.n	8005336 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005334:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533e:	d178      	bne.n	8005432 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_SPI_TransmitReceive+0x10a>
 8005348:	8b7b      	ldrh	r3, [r7, #26]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d166      	bne.n	800541c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	881a      	ldrh	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005372:	e053      	b.n	800541c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b02      	cmp	r3, #2
 8005380:	d11b      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x176>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d016      	beq.n	80053ba <HAL_SPI_TransmitReceive+0x176>
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	2b01      	cmp	r3, #1
 8005390:	d113      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	1c9a      	adds	r2, r3, #2
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d119      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x1b8>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	b292      	uxth	r2, r2
 80053de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	1c9a      	adds	r2, r3, #2
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053f8:	2301      	movs	r3, #1
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053fc:	f7fe fe62 	bl	80040c4 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005408:	429a      	cmp	r2, r3
 800540a:	d807      	bhi.n	800541c <HAL_SPI_TransmitReceive+0x1d8>
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d003      	beq.n	800541c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800541a:	e0a7      	b.n	800556c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1a6      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x130>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1a1      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x130>
 8005430:	e07c      	b.n	800552c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x1fc>
 800543a:	8b7b      	ldrh	r3, [r7, #26]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d16b      	bne.n	8005518 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	330c      	adds	r3, #12
 800544a:	7812      	ldrb	r2, [r2, #0]
 800544c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005466:	e057      	b.n	8005518 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d11c      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x26c>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d017      	beq.n	80054b0 <HAL_SPI_TransmitReceive+0x26c>
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d114      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d119      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x2ae>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d014      	beq.n	80054f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054ee:	2301      	movs	r3, #1
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054f2:	f7fe fde7 	bl	80040c4 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054fe:	429a      	cmp	r2, r3
 8005500:	d803      	bhi.n	800550a <HAL_SPI_TransmitReceive+0x2c6>
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d102      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x2cc>
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005516:	e029      	b.n	800556c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1a2      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x224>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d19d      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f8b1 	bl	8005698 <SPI_EndRxTxTransaction>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005548:	e010      	b.n	800556c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10b      	bne.n	800556a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	e000      	b.n	800556c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800556a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800557c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005580:	4618      	mov	r0, r3
 8005582:	3730      	adds	r7, #48	; 0x30
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005598:	f7fe fd94 	bl	80040c4 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	4413      	add	r3, r2
 80055a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055a8:	f7fe fd8c 	bl	80040c4 <HAL_GetTick>
 80055ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055ae:	4b39      	ldr	r3, [pc, #228]	; (8005694 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	015b      	lsls	r3, r3, #5
 80055b4:	0d1b      	lsrs	r3, r3, #20
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055be:	e054      	b.n	800566a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d050      	beq.n	800566a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055c8:	f7fe fd7c 	bl	80040c4 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d902      	bls.n	80055de <SPI_WaitFlagStateUntilTimeout+0x56>
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d13d      	bne.n	800565a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f6:	d111      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0x94>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005600:	d004      	beq.n	800560c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560a:	d107      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005624:	d10f      	bne.n	8005646 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005644:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e017      	b.n	800568a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	3b01      	subs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4013      	ands	r3, r2
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	429a      	cmp	r2, r3
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	429a      	cmp	r2, r3
 8005686:	d19b      	bne.n	80055c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000004 	.word	0x20000004

08005698 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2200      	movs	r2, #0
 80056ac:	2180      	movs	r1, #128	; 0x80
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff ff6a 	bl	8005588 <SPI_WaitFlagStateUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e000      	b.n	80056cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <HAL_SRAM_Init+0x1c>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ee:	d101      	bne.n	80056f4 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e038      	b.n	8005766 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7fc f999 	bl	8001a40 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3308      	adds	r3, #8
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f000 f829 	bl	8005770 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	461a      	mov	r2, r3
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	f000 f88b 	bl	8005844 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6858      	ldr	r0, [r3, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	f000 f8b6 	bl	80058ac <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	6892      	ldr	r2, [r2, #8]
 8005748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	6892      	ldr	r2, [r2, #8]
 8005754:	f041 0101 	orr.w	r1, r1, #1
 8005758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	f023 0101 	bic.w	r1, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b08      	cmp	r3, #8
 8005798:	d102      	bne.n	80057a0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e001      	b.n	80057a4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80057b0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80057b6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80057bc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80057c2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80057c8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80057ce:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80057d4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80057da:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80057e0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80057fe:	4b10      	ldr	r3, [pc, #64]	; (8005840 <FSMC_NORSRAM_Init+0xd0>)
 8005800:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005808:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005810:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	43db      	mvns	r3, r3
 8005820:	ea02 0103 	and.w	r1, r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4319      	orrs	r1, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	0008fb7f 	.word	0x0008fb7f

08005844 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	431a      	orrs	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	431a      	orrs	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	431a      	orrs	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	3b01      	subs	r3, #1
 8005880:	051b      	lsls	r3, r3, #20
 8005882:	431a      	orrs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	3b02      	subs	r3, #2
 800588a:	061b      	lsls	r3, r3, #24
 800588c:	431a      	orrs	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	4313      	orrs	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	3201      	adds	r2, #1
 8005898:	4319      	orrs	r1, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c0:	d11d      	bne.n	80058fe <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058ca:	4b13      	ldr	r3, [pc, #76]	; (8005918 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	6811      	ldr	r1, [r2, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	6852      	ldr	r2, [r2, #4]
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	4311      	orrs	r1, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	6892      	ldr	r2, [r2, #8]
 80058de:	0212      	lsls	r2, r2, #8
 80058e0:	4311      	orrs	r1, r2
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	6992      	ldr	r2, [r2, #24]
 80058e6:	4311      	orrs	r1, r2
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	68d2      	ldr	r2, [r2, #12]
 80058ec:	0412      	lsls	r2, r2, #16
 80058ee:	430a      	orrs	r2, r1
 80058f0:	ea43 0102 	orr.w	r1, r3, r2
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80058fc:	e005      	b.n	800590a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	cff00000 	.word	0xcff00000

0800591c <main>:
#include "main.h"



int main(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
	hwInit();
 8005920:	f7fe fb6c 	bl	8003ffc <hwInit>
	apInit();
 8005924:	f7fa fc86 	bl	8000234 <apInit>
    apLcdTouchRotationTest();
#endif /* LCD_TOUCH_ROTATION_TEST */


#ifdef LCD_TOUCH_MENU_TEST
	apLcdTouchMenuTest();
 8005928:	f7fa fd52 	bl	80003d0 <apLcdTouchMenuTest>
#ifdef LCD_TOUCH_BOARD_LED_TEST
	apLcdTouchBoardLedTest();
#endif /* LCD_TOUCH_BOARD_LED_TEST */


	return 0;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <__errno>:
 8005934:	4b01      	ldr	r3, [pc, #4]	; (800593c <__errno+0x8>)
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	200000c0 	.word	0x200000c0

08005940 <__libc_init_array>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	2600      	movs	r6, #0
 8005944:	4d0c      	ldr	r5, [pc, #48]	; (8005978 <__libc_init_array+0x38>)
 8005946:	4c0d      	ldr	r4, [pc, #52]	; (800597c <__libc_init_array+0x3c>)
 8005948:	1b64      	subs	r4, r4, r5
 800594a:	10a4      	asrs	r4, r4, #2
 800594c:	42a6      	cmp	r6, r4
 800594e:	d109      	bne.n	8005964 <__libc_init_array+0x24>
 8005950:	f000 fc6c 	bl	800622c <_init>
 8005954:	2600      	movs	r6, #0
 8005956:	4d0a      	ldr	r5, [pc, #40]	; (8005980 <__libc_init_array+0x40>)
 8005958:	4c0a      	ldr	r4, [pc, #40]	; (8005984 <__libc_init_array+0x44>)
 800595a:	1b64      	subs	r4, r4, r5
 800595c:	10a4      	asrs	r4, r4, #2
 800595e:	42a6      	cmp	r6, r4
 8005960:	d105      	bne.n	800596e <__libc_init_array+0x2e>
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	f855 3b04 	ldr.w	r3, [r5], #4
 8005968:	4798      	blx	r3
 800596a:	3601      	adds	r6, #1
 800596c:	e7ee      	b.n	800594c <__libc_init_array+0xc>
 800596e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005972:	4798      	blx	r3
 8005974:	3601      	adds	r6, #1
 8005976:	e7f2      	b.n	800595e <__libc_init_array+0x1e>
 8005978:	08026320 	.word	0x08026320
 800597c:	08026320 	.word	0x08026320
 8005980:	08026320 	.word	0x08026320
 8005984:	08026324 	.word	0x08026324

08005988 <malloc>:
 8005988:	4b02      	ldr	r3, [pc, #8]	; (8005994 <malloc+0xc>)
 800598a:	4601      	mov	r1, r0
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	f000 b85f 	b.w	8005a50 <_malloc_r>
 8005992:	bf00      	nop
 8005994:	200000c0 	.word	0x200000c0

08005998 <free>:
 8005998:	4b02      	ldr	r3, [pc, #8]	; (80059a4 <free+0xc>)
 800599a:	4601      	mov	r1, r0
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	f000 b80b 	b.w	80059b8 <_free_r>
 80059a2:	bf00      	nop
 80059a4:	200000c0 	.word	0x200000c0

080059a8 <memset>:
 80059a8:	4603      	mov	r3, r0
 80059aa:	4402      	add	r2, r0
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d100      	bne.n	80059b2 <memset+0xa>
 80059b0:	4770      	bx	lr
 80059b2:	f803 1b01 	strb.w	r1, [r3], #1
 80059b6:	e7f9      	b.n	80059ac <memset+0x4>

080059b8 <_free_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4605      	mov	r5, r0
 80059bc:	2900      	cmp	r1, #0
 80059be:	d043      	beq.n	8005a48 <_free_r+0x90>
 80059c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c4:	1f0c      	subs	r4, r1, #4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfb8      	it	lt
 80059ca:	18e4      	addlt	r4, r4, r3
 80059cc:	f000 f8ca 	bl	8005b64 <__malloc_lock>
 80059d0:	4a1e      	ldr	r2, [pc, #120]	; (8005a4c <_free_r+0x94>)
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	4610      	mov	r0, r2
 80059d6:	b933      	cbnz	r3, 80059e6 <_free_r+0x2e>
 80059d8:	6063      	str	r3, [r4, #4]
 80059da:	6014      	str	r4, [r2, #0]
 80059dc:	4628      	mov	r0, r5
 80059de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e2:	f000 b8c5 	b.w	8005b70 <__malloc_unlock>
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	d90a      	bls.n	8005a00 <_free_r+0x48>
 80059ea:	6821      	ldr	r1, [r4, #0]
 80059ec:	1862      	adds	r2, r4, r1
 80059ee:	4293      	cmp	r3, r2
 80059f0:	bf01      	itttt	eq
 80059f2:	681a      	ldreq	r2, [r3, #0]
 80059f4:	685b      	ldreq	r3, [r3, #4]
 80059f6:	1852      	addeq	r2, r2, r1
 80059f8:	6022      	streq	r2, [r4, #0]
 80059fa:	6063      	str	r3, [r4, #4]
 80059fc:	6004      	str	r4, [r0, #0]
 80059fe:	e7ed      	b.n	80059dc <_free_r+0x24>
 8005a00:	461a      	mov	r2, r3
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	b10b      	cbz	r3, 8005a0a <_free_r+0x52>
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	d9fa      	bls.n	8005a00 <_free_r+0x48>
 8005a0a:	6811      	ldr	r1, [r2, #0]
 8005a0c:	1850      	adds	r0, r2, r1
 8005a0e:	42a0      	cmp	r0, r4
 8005a10:	d10b      	bne.n	8005a2a <_free_r+0x72>
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	4401      	add	r1, r0
 8005a16:	1850      	adds	r0, r2, r1
 8005a18:	4283      	cmp	r3, r0
 8005a1a:	6011      	str	r1, [r2, #0]
 8005a1c:	d1de      	bne.n	80059dc <_free_r+0x24>
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4401      	add	r1, r0
 8005a24:	6011      	str	r1, [r2, #0]
 8005a26:	6053      	str	r3, [r2, #4]
 8005a28:	e7d8      	b.n	80059dc <_free_r+0x24>
 8005a2a:	d902      	bls.n	8005a32 <_free_r+0x7a>
 8005a2c:	230c      	movs	r3, #12
 8005a2e:	602b      	str	r3, [r5, #0]
 8005a30:	e7d4      	b.n	80059dc <_free_r+0x24>
 8005a32:	6820      	ldr	r0, [r4, #0]
 8005a34:	1821      	adds	r1, r4, r0
 8005a36:	428b      	cmp	r3, r1
 8005a38:	bf01      	itttt	eq
 8005a3a:	6819      	ldreq	r1, [r3, #0]
 8005a3c:	685b      	ldreq	r3, [r3, #4]
 8005a3e:	1809      	addeq	r1, r1, r0
 8005a40:	6021      	streq	r1, [r4, #0]
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6054      	str	r4, [r2, #4]
 8005a46:	e7c9      	b.n	80059dc <_free_r+0x24>
 8005a48:	bd38      	pop	{r3, r4, r5, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000258 	.word	0x20000258

08005a50 <_malloc_r>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	1ccd      	adds	r5, r1, #3
 8005a54:	f025 0503 	bic.w	r5, r5, #3
 8005a58:	3508      	adds	r5, #8
 8005a5a:	2d0c      	cmp	r5, #12
 8005a5c:	bf38      	it	cc
 8005a5e:	250c      	movcc	r5, #12
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	4606      	mov	r6, r0
 8005a64:	db01      	blt.n	8005a6a <_malloc_r+0x1a>
 8005a66:	42a9      	cmp	r1, r5
 8005a68:	d903      	bls.n	8005a72 <_malloc_r+0x22>
 8005a6a:	230c      	movs	r3, #12
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	2000      	movs	r0, #0
 8005a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a72:	f000 f877 	bl	8005b64 <__malloc_lock>
 8005a76:	4921      	ldr	r1, [pc, #132]	; (8005afc <_malloc_r+0xac>)
 8005a78:	680a      	ldr	r2, [r1, #0]
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	b99c      	cbnz	r4, 8005aa6 <_malloc_r+0x56>
 8005a7e:	4f20      	ldr	r7, [pc, #128]	; (8005b00 <_malloc_r+0xb0>)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	b923      	cbnz	r3, 8005a8e <_malloc_r+0x3e>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4630      	mov	r0, r6
 8005a88:	f000 f83c 	bl	8005b04 <_sbrk_r>
 8005a8c:	6038      	str	r0, [r7, #0]
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4630      	mov	r0, r6
 8005a92:	f000 f837 	bl	8005b04 <_sbrk_r>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	d123      	bne.n	8005ae2 <_malloc_r+0x92>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	6033      	str	r3, [r6, #0]
 8005aa0:	f000 f866 	bl	8005b70 <__malloc_unlock>
 8005aa4:	e7e3      	b.n	8005a6e <_malloc_r+0x1e>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	1b5b      	subs	r3, r3, r5
 8005aaa:	d417      	bmi.n	8005adc <_malloc_r+0x8c>
 8005aac:	2b0b      	cmp	r3, #11
 8005aae:	d903      	bls.n	8005ab8 <_malloc_r+0x68>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	441c      	add	r4, r3
 8005ab4:	6025      	str	r5, [r4, #0]
 8005ab6:	e004      	b.n	8005ac2 <_malloc_r+0x72>
 8005ab8:	6863      	ldr	r3, [r4, #4]
 8005aba:	42a2      	cmp	r2, r4
 8005abc:	bf0c      	ite	eq
 8005abe:	600b      	streq	r3, [r1, #0]
 8005ac0:	6053      	strne	r3, [r2, #4]
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f000 f854 	bl	8005b70 <__malloc_unlock>
 8005ac8:	f104 000b 	add.w	r0, r4, #11
 8005acc:	1d23      	adds	r3, r4, #4
 8005ace:	f020 0007 	bic.w	r0, r0, #7
 8005ad2:	1ac2      	subs	r2, r0, r3
 8005ad4:	d0cc      	beq.n	8005a70 <_malloc_r+0x20>
 8005ad6:	1a1b      	subs	r3, r3, r0
 8005ad8:	50a3      	str	r3, [r4, r2]
 8005ada:	e7c9      	b.n	8005a70 <_malloc_r+0x20>
 8005adc:	4622      	mov	r2, r4
 8005ade:	6864      	ldr	r4, [r4, #4]
 8005ae0:	e7cc      	b.n	8005a7c <_malloc_r+0x2c>
 8005ae2:	1cc4      	adds	r4, r0, #3
 8005ae4:	f024 0403 	bic.w	r4, r4, #3
 8005ae8:	42a0      	cmp	r0, r4
 8005aea:	d0e3      	beq.n	8005ab4 <_malloc_r+0x64>
 8005aec:	1a21      	subs	r1, r4, r0
 8005aee:	4630      	mov	r0, r6
 8005af0:	f000 f808 	bl	8005b04 <_sbrk_r>
 8005af4:	3001      	adds	r0, #1
 8005af6:	d1dd      	bne.n	8005ab4 <_malloc_r+0x64>
 8005af8:	e7cf      	b.n	8005a9a <_malloc_r+0x4a>
 8005afa:	bf00      	nop
 8005afc:	20000258 	.word	0x20000258
 8005b00:	2000025c 	.word	0x2000025c

08005b04 <_sbrk_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	2300      	movs	r3, #0
 8005b08:	4d05      	ldr	r5, [pc, #20]	; (8005b20 <_sbrk_r+0x1c>)
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	602b      	str	r3, [r5, #0]
 8005b10:	f7fb fe8c 	bl	800182c <_sbrk>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_sbrk_r+0x1a>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_sbrk_r+0x1a>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20000308 	.word	0x20000308

08005b24 <_vsiprintf_r>:
 8005b24:	b500      	push	{lr}
 8005b26:	b09b      	sub	sp, #108	; 0x6c
 8005b28:	9100      	str	r1, [sp, #0]
 8005b2a:	9104      	str	r1, [sp, #16]
 8005b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b30:	9105      	str	r1, [sp, #20]
 8005b32:	9102      	str	r1, [sp, #8]
 8005b34:	4905      	ldr	r1, [pc, #20]	; (8005b4c <_vsiprintf_r+0x28>)
 8005b36:	9103      	str	r1, [sp, #12]
 8005b38:	4669      	mov	r1, sp
 8005b3a:	f000 f87b 	bl	8005c34 <_svfiprintf_r>
 8005b3e:	2200      	movs	r2, #0
 8005b40:	9b00      	ldr	r3, [sp, #0]
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	b01b      	add	sp, #108	; 0x6c
 8005b46:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b4a:	bf00      	nop
 8005b4c:	ffff0208 	.word	0xffff0208

08005b50 <vsiprintf>:
 8005b50:	4613      	mov	r3, r2
 8005b52:	460a      	mov	r2, r1
 8005b54:	4601      	mov	r1, r0
 8005b56:	4802      	ldr	r0, [pc, #8]	; (8005b60 <vsiprintf+0x10>)
 8005b58:	6800      	ldr	r0, [r0, #0]
 8005b5a:	f7ff bfe3 	b.w	8005b24 <_vsiprintf_r>
 8005b5e:	bf00      	nop
 8005b60:	200000c0 	.word	0x200000c0

08005b64 <__malloc_lock>:
 8005b64:	4801      	ldr	r0, [pc, #4]	; (8005b6c <__malloc_lock+0x8>)
 8005b66:	f000 bafb 	b.w	8006160 <__retarget_lock_acquire_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20000310 	.word	0x20000310

08005b70 <__malloc_unlock>:
 8005b70:	4801      	ldr	r0, [pc, #4]	; (8005b78 <__malloc_unlock+0x8>)
 8005b72:	f000 baf6 	b.w	8006162 <__retarget_lock_release_recursive>
 8005b76:	bf00      	nop
 8005b78:	20000310 	.word	0x20000310

08005b7c <__ssputs_r>:
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	688e      	ldr	r6, [r1, #8]
 8005b82:	4682      	mov	sl, r0
 8005b84:	429e      	cmp	r6, r3
 8005b86:	460c      	mov	r4, r1
 8005b88:	4690      	mov	r8, r2
 8005b8a:	461f      	mov	r7, r3
 8005b8c:	d838      	bhi.n	8005c00 <__ssputs_r+0x84>
 8005b8e:	898a      	ldrh	r2, [r1, #12]
 8005b90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b94:	d032      	beq.n	8005bfc <__ssputs_r+0x80>
 8005b96:	6825      	ldr	r5, [r4, #0]
 8005b98:	6909      	ldr	r1, [r1, #16]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	eba5 0901 	sub.w	r9, r5, r1
 8005ba0:	6965      	ldr	r5, [r4, #20]
 8005ba2:	444b      	add	r3, r9
 8005ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bac:	106d      	asrs	r5, r5, #1
 8005bae:	429d      	cmp	r5, r3
 8005bb0:	bf38      	it	cc
 8005bb2:	461d      	movcc	r5, r3
 8005bb4:	0553      	lsls	r3, r2, #21
 8005bb6:	d531      	bpl.n	8005c1c <__ssputs_r+0xa0>
 8005bb8:	4629      	mov	r1, r5
 8005bba:	f7ff ff49 	bl	8005a50 <_malloc_r>
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	b950      	cbnz	r0, 8005bd8 <__ssputs_r+0x5c>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	f8ca 3000 	str.w	r3, [sl]
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd8:	464a      	mov	r2, r9
 8005bda:	6921      	ldr	r1, [r4, #16]
 8005bdc:	f000 fad0 	bl	8006180 <memcpy>
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	6126      	str	r6, [r4, #16]
 8005bee:	444e      	add	r6, r9
 8005bf0:	6026      	str	r6, [r4, #0]
 8005bf2:	463e      	mov	r6, r7
 8005bf4:	6165      	str	r5, [r4, #20]
 8005bf6:	eba5 0509 	sub.w	r5, r5, r9
 8005bfa:	60a5      	str	r5, [r4, #8]
 8005bfc:	42be      	cmp	r6, r7
 8005bfe:	d900      	bls.n	8005c02 <__ssputs_r+0x86>
 8005c00:	463e      	mov	r6, r7
 8005c02:	4632      	mov	r2, r6
 8005c04:	4641      	mov	r1, r8
 8005c06:	6820      	ldr	r0, [r4, #0]
 8005c08:	f000 fac8 	bl	800619c <memmove>
 8005c0c:	68a3      	ldr	r3, [r4, #8]
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	1b9b      	subs	r3, r3, r6
 8005c12:	4432      	add	r2, r6
 8005c14:	2000      	movs	r0, #0
 8005c16:	60a3      	str	r3, [r4, #8]
 8005c18:	6022      	str	r2, [r4, #0]
 8005c1a:	e7db      	b.n	8005bd4 <__ssputs_r+0x58>
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	f000 fad7 	bl	80061d0 <_realloc_r>
 8005c22:	4606      	mov	r6, r0
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d1e1      	bne.n	8005bec <__ssputs_r+0x70>
 8005c28:	4650      	mov	r0, sl
 8005c2a:	6921      	ldr	r1, [r4, #16]
 8005c2c:	f7ff fec4 	bl	80059b8 <_free_r>
 8005c30:	e7c7      	b.n	8005bc2 <__ssputs_r+0x46>
	...

08005c34 <_svfiprintf_r>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	4698      	mov	r8, r3
 8005c3a:	898b      	ldrh	r3, [r1, #12]
 8005c3c:	4607      	mov	r7, r0
 8005c3e:	061b      	lsls	r3, r3, #24
 8005c40:	460d      	mov	r5, r1
 8005c42:	4614      	mov	r4, r2
 8005c44:	b09d      	sub	sp, #116	; 0x74
 8005c46:	d50e      	bpl.n	8005c66 <_svfiprintf_r+0x32>
 8005c48:	690b      	ldr	r3, [r1, #16]
 8005c4a:	b963      	cbnz	r3, 8005c66 <_svfiprintf_r+0x32>
 8005c4c:	2140      	movs	r1, #64	; 0x40
 8005c4e:	f7ff feff 	bl	8005a50 <_malloc_r>
 8005c52:	6028      	str	r0, [r5, #0]
 8005c54:	6128      	str	r0, [r5, #16]
 8005c56:	b920      	cbnz	r0, 8005c62 <_svfiprintf_r+0x2e>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	e0d1      	b.n	8005e06 <_svfiprintf_r+0x1d2>
 8005c62:	2340      	movs	r3, #64	; 0x40
 8005c64:	616b      	str	r3, [r5, #20]
 8005c66:	2300      	movs	r3, #0
 8005c68:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6a:	2320      	movs	r3, #32
 8005c6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c70:	2330      	movs	r3, #48	; 0x30
 8005c72:	f04f 0901 	mov.w	r9, #1
 8005c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005e20 <_svfiprintf_r+0x1ec>
 8005c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c82:	4623      	mov	r3, r4
 8005c84:	469a      	mov	sl, r3
 8005c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c8a:	b10a      	cbz	r2, 8005c90 <_svfiprintf_r+0x5c>
 8005c8c:	2a25      	cmp	r2, #37	; 0x25
 8005c8e:	d1f9      	bne.n	8005c84 <_svfiprintf_r+0x50>
 8005c90:	ebba 0b04 	subs.w	fp, sl, r4
 8005c94:	d00b      	beq.n	8005cae <_svfiprintf_r+0x7a>
 8005c96:	465b      	mov	r3, fp
 8005c98:	4622      	mov	r2, r4
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	f7ff ff6d 	bl	8005b7c <__ssputs_r>
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	f000 80aa 	beq.w	8005dfc <_svfiprintf_r+0x1c8>
 8005ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005caa:	445a      	add	r2, fp
 8005cac:	9209      	str	r2, [sp, #36]	; 0x24
 8005cae:	f89a 3000 	ldrb.w	r3, [sl]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 80a2 	beq.w	8005dfc <_svfiprintf_r+0x1c8>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cc2:	f10a 0a01 	add.w	sl, sl, #1
 8005cc6:	9304      	str	r3, [sp, #16]
 8005cc8:	9307      	str	r3, [sp, #28]
 8005cca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cce:	931a      	str	r3, [sp, #104]	; 0x68
 8005cd0:	4654      	mov	r4, sl
 8005cd2:	2205      	movs	r2, #5
 8005cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd8:	4851      	ldr	r0, [pc, #324]	; (8005e20 <_svfiprintf_r+0x1ec>)
 8005cda:	f000 fa43 	bl	8006164 <memchr>
 8005cde:	9a04      	ldr	r2, [sp, #16]
 8005ce0:	b9d8      	cbnz	r0, 8005d1a <_svfiprintf_r+0xe6>
 8005ce2:	06d0      	lsls	r0, r2, #27
 8005ce4:	bf44      	itt	mi
 8005ce6:	2320      	movmi	r3, #32
 8005ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cec:	0711      	lsls	r1, r2, #28
 8005cee:	bf44      	itt	mi
 8005cf0:	232b      	movmi	r3, #43	; 0x2b
 8005cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8005cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfc:	d015      	beq.n	8005d2a <_svfiprintf_r+0xf6>
 8005cfe:	4654      	mov	r4, sl
 8005d00:	2000      	movs	r0, #0
 8005d02:	f04f 0c0a 	mov.w	ip, #10
 8005d06:	9a07      	ldr	r2, [sp, #28]
 8005d08:	4621      	mov	r1, r4
 8005d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d0e:	3b30      	subs	r3, #48	; 0x30
 8005d10:	2b09      	cmp	r3, #9
 8005d12:	d94e      	bls.n	8005db2 <_svfiprintf_r+0x17e>
 8005d14:	b1b0      	cbz	r0, 8005d44 <_svfiprintf_r+0x110>
 8005d16:	9207      	str	r2, [sp, #28]
 8005d18:	e014      	b.n	8005d44 <_svfiprintf_r+0x110>
 8005d1a:	eba0 0308 	sub.w	r3, r0, r8
 8005d1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d22:	4313      	orrs	r3, r2
 8005d24:	46a2      	mov	sl, r4
 8005d26:	9304      	str	r3, [sp, #16]
 8005d28:	e7d2      	b.n	8005cd0 <_svfiprintf_r+0x9c>
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	1d19      	adds	r1, r3, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	9103      	str	r1, [sp, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bfbb      	ittet	lt
 8005d36:	425b      	neglt	r3, r3
 8005d38:	f042 0202 	orrlt.w	r2, r2, #2
 8005d3c:	9307      	strge	r3, [sp, #28]
 8005d3e:	9307      	strlt	r3, [sp, #28]
 8005d40:	bfb8      	it	lt
 8005d42:	9204      	strlt	r2, [sp, #16]
 8005d44:	7823      	ldrb	r3, [r4, #0]
 8005d46:	2b2e      	cmp	r3, #46	; 0x2e
 8005d48:	d10c      	bne.n	8005d64 <_svfiprintf_r+0x130>
 8005d4a:	7863      	ldrb	r3, [r4, #1]
 8005d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d4e:	d135      	bne.n	8005dbc <_svfiprintf_r+0x188>
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	3402      	adds	r4, #2
 8005d54:	1d1a      	adds	r2, r3, #4
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	9203      	str	r2, [sp, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	bfb8      	it	lt
 8005d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d62:	9305      	str	r3, [sp, #20]
 8005d64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e30 <_svfiprintf_r+0x1fc>
 8005d68:	2203      	movs	r2, #3
 8005d6a:	4650      	mov	r0, sl
 8005d6c:	7821      	ldrb	r1, [r4, #0]
 8005d6e:	f000 f9f9 	bl	8006164 <memchr>
 8005d72:	b140      	cbz	r0, 8005d86 <_svfiprintf_r+0x152>
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	eba0 000a 	sub.w	r0, r0, sl
 8005d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d7e:	9b04      	ldr	r3, [sp, #16]
 8005d80:	3401      	adds	r4, #1
 8005d82:	4303      	orrs	r3, r0
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8a:	2206      	movs	r2, #6
 8005d8c:	4825      	ldr	r0, [pc, #148]	; (8005e24 <_svfiprintf_r+0x1f0>)
 8005d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d92:	f000 f9e7 	bl	8006164 <memchr>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d038      	beq.n	8005e0c <_svfiprintf_r+0x1d8>
 8005d9a:	4b23      	ldr	r3, [pc, #140]	; (8005e28 <_svfiprintf_r+0x1f4>)
 8005d9c:	bb1b      	cbnz	r3, 8005de6 <_svfiprintf_r+0x1b2>
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	3307      	adds	r3, #7
 8005da2:	f023 0307 	bic.w	r3, r3, #7
 8005da6:	3308      	adds	r3, #8
 8005da8:	9303      	str	r3, [sp, #12]
 8005daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dac:	4433      	add	r3, r6
 8005dae:	9309      	str	r3, [sp, #36]	; 0x24
 8005db0:	e767      	b.n	8005c82 <_svfiprintf_r+0x4e>
 8005db2:	460c      	mov	r4, r1
 8005db4:	2001      	movs	r0, #1
 8005db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dba:	e7a5      	b.n	8005d08 <_svfiprintf_r+0xd4>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f04f 0c0a 	mov.w	ip, #10
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	3401      	adds	r4, #1
 8005dc6:	9305      	str	r3, [sp, #20]
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dce:	3a30      	subs	r2, #48	; 0x30
 8005dd0:	2a09      	cmp	r2, #9
 8005dd2:	d903      	bls.n	8005ddc <_svfiprintf_r+0x1a8>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0c5      	beq.n	8005d64 <_svfiprintf_r+0x130>
 8005dd8:	9105      	str	r1, [sp, #20]
 8005dda:	e7c3      	b.n	8005d64 <_svfiprintf_r+0x130>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	2301      	movs	r3, #1
 8005de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005de4:	e7f0      	b.n	8005dc8 <_svfiprintf_r+0x194>
 8005de6:	ab03      	add	r3, sp, #12
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	462a      	mov	r2, r5
 8005dec:	4638      	mov	r0, r7
 8005dee:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <_svfiprintf_r+0x1f8>)
 8005df0:	a904      	add	r1, sp, #16
 8005df2:	f3af 8000 	nop.w
 8005df6:	1c42      	adds	r2, r0, #1
 8005df8:	4606      	mov	r6, r0
 8005dfa:	d1d6      	bne.n	8005daa <_svfiprintf_r+0x176>
 8005dfc:	89ab      	ldrh	r3, [r5, #12]
 8005dfe:	065b      	lsls	r3, r3, #25
 8005e00:	f53f af2c 	bmi.w	8005c5c <_svfiprintf_r+0x28>
 8005e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e06:	b01d      	add	sp, #116	; 0x74
 8005e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0c:	ab03      	add	r3, sp, #12
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	462a      	mov	r2, r5
 8005e12:	4638      	mov	r0, r7
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <_svfiprintf_r+0x1f8>)
 8005e16:	a904      	add	r1, sp, #16
 8005e18:	f000 f87c 	bl	8005f14 <_printf_i>
 8005e1c:	e7eb      	b.n	8005df6 <_svfiprintf_r+0x1c2>
 8005e1e:	bf00      	nop
 8005e20:	080262ed 	.word	0x080262ed
 8005e24:	080262f7 	.word	0x080262f7
 8005e28:	00000000 	.word	0x00000000
 8005e2c:	08005b7d 	.word	0x08005b7d
 8005e30:	080262f3 	.word	0x080262f3

08005e34 <_printf_common>:
 8005e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e38:	4616      	mov	r6, r2
 8005e3a:	4699      	mov	r9, r3
 8005e3c:	688a      	ldr	r2, [r1, #8]
 8005e3e:	690b      	ldr	r3, [r1, #16]
 8005e40:	4607      	mov	r7, r0
 8005e42:	4293      	cmp	r3, r2
 8005e44:	bfb8      	it	lt
 8005e46:	4613      	movlt	r3, r2
 8005e48:	6033      	str	r3, [r6, #0]
 8005e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e4e:	460c      	mov	r4, r1
 8005e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e54:	b10a      	cbz	r2, 8005e5a <_printf_common+0x26>
 8005e56:	3301      	adds	r3, #1
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	0699      	lsls	r1, r3, #26
 8005e5e:	bf42      	ittt	mi
 8005e60:	6833      	ldrmi	r3, [r6, #0]
 8005e62:	3302      	addmi	r3, #2
 8005e64:	6033      	strmi	r3, [r6, #0]
 8005e66:	6825      	ldr	r5, [r4, #0]
 8005e68:	f015 0506 	ands.w	r5, r5, #6
 8005e6c:	d106      	bne.n	8005e7c <_printf_common+0x48>
 8005e6e:	f104 0a19 	add.w	sl, r4, #25
 8005e72:	68e3      	ldr	r3, [r4, #12]
 8005e74:	6832      	ldr	r2, [r6, #0]
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	dc28      	bgt.n	8005ece <_printf_common+0x9a>
 8005e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e80:	1e13      	subs	r3, r2, #0
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	bf18      	it	ne
 8005e86:	2301      	movne	r3, #1
 8005e88:	0692      	lsls	r2, r2, #26
 8005e8a:	d42d      	bmi.n	8005ee8 <_printf_common+0xb4>
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	4638      	mov	r0, r7
 8005e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e94:	47c0      	blx	r8
 8005e96:	3001      	adds	r0, #1
 8005e98:	d020      	beq.n	8005edc <_printf_common+0xa8>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	68e5      	ldr	r5, [r4, #12]
 8005e9e:	f003 0306 	and.w	r3, r3, #6
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	bf18      	it	ne
 8005ea6:	2500      	movne	r5, #0
 8005ea8:	6832      	ldr	r2, [r6, #0]
 8005eaa:	f04f 0600 	mov.w	r6, #0
 8005eae:	68a3      	ldr	r3, [r4, #8]
 8005eb0:	bf08      	it	eq
 8005eb2:	1aad      	subeq	r5, r5, r2
 8005eb4:	6922      	ldr	r2, [r4, #16]
 8005eb6:	bf08      	it	eq
 8005eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	bfc4      	itt	gt
 8005ec0:	1a9b      	subgt	r3, r3, r2
 8005ec2:	18ed      	addgt	r5, r5, r3
 8005ec4:	341a      	adds	r4, #26
 8005ec6:	42b5      	cmp	r5, r6
 8005ec8:	d11a      	bne.n	8005f00 <_printf_common+0xcc>
 8005eca:	2000      	movs	r0, #0
 8005ecc:	e008      	b.n	8005ee0 <_printf_common+0xac>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	4652      	mov	r2, sl
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	47c0      	blx	r8
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d103      	bne.n	8005ee4 <_printf_common+0xb0>
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	e7c4      	b.n	8005e72 <_printf_common+0x3e>
 8005ee8:	2030      	movs	r0, #48	; 0x30
 8005eea:	18e1      	adds	r1, r4, r3
 8005eec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ef6:	4422      	add	r2, r4
 8005ef8:	3302      	adds	r3, #2
 8005efa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005efe:	e7c5      	b.n	8005e8c <_printf_common+0x58>
 8005f00:	2301      	movs	r3, #1
 8005f02:	4622      	mov	r2, r4
 8005f04:	4649      	mov	r1, r9
 8005f06:	4638      	mov	r0, r7
 8005f08:	47c0      	blx	r8
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d0e6      	beq.n	8005edc <_printf_common+0xa8>
 8005f0e:	3601      	adds	r6, #1
 8005f10:	e7d9      	b.n	8005ec6 <_printf_common+0x92>
	...

08005f14 <_printf_i>:
 8005f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f18:	460c      	mov	r4, r1
 8005f1a:	7e27      	ldrb	r7, [r4, #24]
 8005f1c:	4691      	mov	r9, r2
 8005f1e:	2f78      	cmp	r7, #120	; 0x78
 8005f20:	4680      	mov	r8, r0
 8005f22:	469a      	mov	sl, r3
 8005f24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f2a:	d807      	bhi.n	8005f3c <_printf_i+0x28>
 8005f2c:	2f62      	cmp	r7, #98	; 0x62
 8005f2e:	d80a      	bhi.n	8005f46 <_printf_i+0x32>
 8005f30:	2f00      	cmp	r7, #0
 8005f32:	f000 80d9 	beq.w	80060e8 <_printf_i+0x1d4>
 8005f36:	2f58      	cmp	r7, #88	; 0x58
 8005f38:	f000 80a4 	beq.w	8006084 <_printf_i+0x170>
 8005f3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f44:	e03a      	b.n	8005fbc <_printf_i+0xa8>
 8005f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f4a:	2b15      	cmp	r3, #21
 8005f4c:	d8f6      	bhi.n	8005f3c <_printf_i+0x28>
 8005f4e:	a001      	add	r0, pc, #4	; (adr r0, 8005f54 <_printf_i+0x40>)
 8005f50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f54:	08005fad 	.word	0x08005fad
 8005f58:	08005fc1 	.word	0x08005fc1
 8005f5c:	08005f3d 	.word	0x08005f3d
 8005f60:	08005f3d 	.word	0x08005f3d
 8005f64:	08005f3d 	.word	0x08005f3d
 8005f68:	08005f3d 	.word	0x08005f3d
 8005f6c:	08005fc1 	.word	0x08005fc1
 8005f70:	08005f3d 	.word	0x08005f3d
 8005f74:	08005f3d 	.word	0x08005f3d
 8005f78:	08005f3d 	.word	0x08005f3d
 8005f7c:	08005f3d 	.word	0x08005f3d
 8005f80:	080060cf 	.word	0x080060cf
 8005f84:	08005ff1 	.word	0x08005ff1
 8005f88:	080060b1 	.word	0x080060b1
 8005f8c:	08005f3d 	.word	0x08005f3d
 8005f90:	08005f3d 	.word	0x08005f3d
 8005f94:	080060f1 	.word	0x080060f1
 8005f98:	08005f3d 	.word	0x08005f3d
 8005f9c:	08005ff1 	.word	0x08005ff1
 8005fa0:	08005f3d 	.word	0x08005f3d
 8005fa4:	08005f3d 	.word	0x08005f3d
 8005fa8:	080060b9 	.word	0x080060b9
 8005fac:	680b      	ldr	r3, [r1, #0]
 8005fae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fb2:	1d1a      	adds	r2, r3, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	600a      	str	r2, [r1, #0]
 8005fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0a4      	b.n	800610a <_printf_i+0x1f6>
 8005fc0:	6825      	ldr	r5, [r4, #0]
 8005fc2:	6808      	ldr	r0, [r1, #0]
 8005fc4:	062e      	lsls	r6, r5, #24
 8005fc6:	f100 0304 	add.w	r3, r0, #4
 8005fca:	d50a      	bpl.n	8005fe2 <_printf_i+0xce>
 8005fcc:	6805      	ldr	r5, [r0, #0]
 8005fce:	600b      	str	r3, [r1, #0]
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	da03      	bge.n	8005fdc <_printf_i+0xc8>
 8005fd4:	232d      	movs	r3, #45	; 0x2d
 8005fd6:	426d      	negs	r5, r5
 8005fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fdc:	230a      	movs	r3, #10
 8005fde:	485e      	ldr	r0, [pc, #376]	; (8006158 <_printf_i+0x244>)
 8005fe0:	e019      	b.n	8006016 <_printf_i+0x102>
 8005fe2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fe6:	6805      	ldr	r5, [r0, #0]
 8005fe8:	600b      	str	r3, [r1, #0]
 8005fea:	bf18      	it	ne
 8005fec:	b22d      	sxthne	r5, r5
 8005fee:	e7ef      	b.n	8005fd0 <_printf_i+0xbc>
 8005ff0:	680b      	ldr	r3, [r1, #0]
 8005ff2:	6825      	ldr	r5, [r4, #0]
 8005ff4:	1d18      	adds	r0, r3, #4
 8005ff6:	6008      	str	r0, [r1, #0]
 8005ff8:	0628      	lsls	r0, r5, #24
 8005ffa:	d501      	bpl.n	8006000 <_printf_i+0xec>
 8005ffc:	681d      	ldr	r5, [r3, #0]
 8005ffe:	e002      	b.n	8006006 <_printf_i+0xf2>
 8006000:	0669      	lsls	r1, r5, #25
 8006002:	d5fb      	bpl.n	8005ffc <_printf_i+0xe8>
 8006004:	881d      	ldrh	r5, [r3, #0]
 8006006:	2f6f      	cmp	r7, #111	; 0x6f
 8006008:	bf0c      	ite	eq
 800600a:	2308      	moveq	r3, #8
 800600c:	230a      	movne	r3, #10
 800600e:	4852      	ldr	r0, [pc, #328]	; (8006158 <_printf_i+0x244>)
 8006010:	2100      	movs	r1, #0
 8006012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006016:	6866      	ldr	r6, [r4, #4]
 8006018:	2e00      	cmp	r6, #0
 800601a:	bfa8      	it	ge
 800601c:	6821      	ldrge	r1, [r4, #0]
 800601e:	60a6      	str	r6, [r4, #8]
 8006020:	bfa4      	itt	ge
 8006022:	f021 0104 	bicge.w	r1, r1, #4
 8006026:	6021      	strge	r1, [r4, #0]
 8006028:	b90d      	cbnz	r5, 800602e <_printf_i+0x11a>
 800602a:	2e00      	cmp	r6, #0
 800602c:	d04d      	beq.n	80060ca <_printf_i+0x1b6>
 800602e:	4616      	mov	r6, r2
 8006030:	fbb5 f1f3 	udiv	r1, r5, r3
 8006034:	fb03 5711 	mls	r7, r3, r1, r5
 8006038:	5dc7      	ldrb	r7, [r0, r7]
 800603a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800603e:	462f      	mov	r7, r5
 8006040:	42bb      	cmp	r3, r7
 8006042:	460d      	mov	r5, r1
 8006044:	d9f4      	bls.n	8006030 <_printf_i+0x11c>
 8006046:	2b08      	cmp	r3, #8
 8006048:	d10b      	bne.n	8006062 <_printf_i+0x14e>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	07df      	lsls	r7, r3, #31
 800604e:	d508      	bpl.n	8006062 <_printf_i+0x14e>
 8006050:	6923      	ldr	r3, [r4, #16]
 8006052:	6861      	ldr	r1, [r4, #4]
 8006054:	4299      	cmp	r1, r3
 8006056:	bfde      	ittt	le
 8006058:	2330      	movle	r3, #48	; 0x30
 800605a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800605e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006062:	1b92      	subs	r2, r2, r6
 8006064:	6122      	str	r2, [r4, #16]
 8006066:	464b      	mov	r3, r9
 8006068:	4621      	mov	r1, r4
 800606a:	4640      	mov	r0, r8
 800606c:	f8cd a000 	str.w	sl, [sp]
 8006070:	aa03      	add	r2, sp, #12
 8006072:	f7ff fedf 	bl	8005e34 <_printf_common>
 8006076:	3001      	adds	r0, #1
 8006078:	d14c      	bne.n	8006114 <_printf_i+0x200>
 800607a:	f04f 30ff 	mov.w	r0, #4294967295
 800607e:	b004      	add	sp, #16
 8006080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006084:	4834      	ldr	r0, [pc, #208]	; (8006158 <_printf_i+0x244>)
 8006086:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800608a:	680e      	ldr	r6, [r1, #0]
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006092:	061f      	lsls	r7, r3, #24
 8006094:	600e      	str	r6, [r1, #0]
 8006096:	d514      	bpl.n	80060c2 <_printf_i+0x1ae>
 8006098:	07d9      	lsls	r1, r3, #31
 800609a:	bf44      	itt	mi
 800609c:	f043 0320 	orrmi.w	r3, r3, #32
 80060a0:	6023      	strmi	r3, [r4, #0]
 80060a2:	b91d      	cbnz	r5, 80060ac <_printf_i+0x198>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	f023 0320 	bic.w	r3, r3, #32
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	2310      	movs	r3, #16
 80060ae:	e7af      	b.n	8006010 <_printf_i+0xfc>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	f043 0320 	orr.w	r3, r3, #32
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	2378      	movs	r3, #120	; 0x78
 80060ba:	4828      	ldr	r0, [pc, #160]	; (800615c <_printf_i+0x248>)
 80060bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060c0:	e7e3      	b.n	800608a <_printf_i+0x176>
 80060c2:	065e      	lsls	r6, r3, #25
 80060c4:	bf48      	it	mi
 80060c6:	b2ad      	uxthmi	r5, r5
 80060c8:	e7e6      	b.n	8006098 <_printf_i+0x184>
 80060ca:	4616      	mov	r6, r2
 80060cc:	e7bb      	b.n	8006046 <_printf_i+0x132>
 80060ce:	680b      	ldr	r3, [r1, #0]
 80060d0:	6826      	ldr	r6, [r4, #0]
 80060d2:	1d1d      	adds	r5, r3, #4
 80060d4:	6960      	ldr	r0, [r4, #20]
 80060d6:	600d      	str	r5, [r1, #0]
 80060d8:	0635      	lsls	r5, r6, #24
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	d501      	bpl.n	80060e2 <_printf_i+0x1ce>
 80060de:	6018      	str	r0, [r3, #0]
 80060e0:	e002      	b.n	80060e8 <_printf_i+0x1d4>
 80060e2:	0671      	lsls	r1, r6, #25
 80060e4:	d5fb      	bpl.n	80060de <_printf_i+0x1ca>
 80060e6:	8018      	strh	r0, [r3, #0]
 80060e8:	2300      	movs	r3, #0
 80060ea:	4616      	mov	r6, r2
 80060ec:	6123      	str	r3, [r4, #16]
 80060ee:	e7ba      	b.n	8006066 <_printf_i+0x152>
 80060f0:	680b      	ldr	r3, [r1, #0]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	600a      	str	r2, [r1, #0]
 80060f6:	681e      	ldr	r6, [r3, #0]
 80060f8:	2100      	movs	r1, #0
 80060fa:	4630      	mov	r0, r6
 80060fc:	6862      	ldr	r2, [r4, #4]
 80060fe:	f000 f831 	bl	8006164 <memchr>
 8006102:	b108      	cbz	r0, 8006108 <_printf_i+0x1f4>
 8006104:	1b80      	subs	r0, r0, r6
 8006106:	6060      	str	r0, [r4, #4]
 8006108:	6863      	ldr	r3, [r4, #4]
 800610a:	6123      	str	r3, [r4, #16]
 800610c:	2300      	movs	r3, #0
 800610e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006112:	e7a8      	b.n	8006066 <_printf_i+0x152>
 8006114:	4632      	mov	r2, r6
 8006116:	4649      	mov	r1, r9
 8006118:	4640      	mov	r0, r8
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	47d0      	blx	sl
 800611e:	3001      	adds	r0, #1
 8006120:	d0ab      	beq.n	800607a <_printf_i+0x166>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	079b      	lsls	r3, r3, #30
 8006126:	d413      	bmi.n	8006150 <_printf_i+0x23c>
 8006128:	68e0      	ldr	r0, [r4, #12]
 800612a:	9b03      	ldr	r3, [sp, #12]
 800612c:	4298      	cmp	r0, r3
 800612e:	bfb8      	it	lt
 8006130:	4618      	movlt	r0, r3
 8006132:	e7a4      	b.n	800607e <_printf_i+0x16a>
 8006134:	2301      	movs	r3, #1
 8006136:	4632      	mov	r2, r6
 8006138:	4649      	mov	r1, r9
 800613a:	4640      	mov	r0, r8
 800613c:	47d0      	blx	sl
 800613e:	3001      	adds	r0, #1
 8006140:	d09b      	beq.n	800607a <_printf_i+0x166>
 8006142:	3501      	adds	r5, #1
 8006144:	68e3      	ldr	r3, [r4, #12]
 8006146:	9903      	ldr	r1, [sp, #12]
 8006148:	1a5b      	subs	r3, r3, r1
 800614a:	42ab      	cmp	r3, r5
 800614c:	dcf2      	bgt.n	8006134 <_printf_i+0x220>
 800614e:	e7eb      	b.n	8006128 <_printf_i+0x214>
 8006150:	2500      	movs	r5, #0
 8006152:	f104 0619 	add.w	r6, r4, #25
 8006156:	e7f5      	b.n	8006144 <_printf_i+0x230>
 8006158:	080262fe 	.word	0x080262fe
 800615c:	0802630f 	.word	0x0802630f

08006160 <__retarget_lock_acquire_recursive>:
 8006160:	4770      	bx	lr

08006162 <__retarget_lock_release_recursive>:
 8006162:	4770      	bx	lr

08006164 <memchr>:
 8006164:	4603      	mov	r3, r0
 8006166:	b510      	push	{r4, lr}
 8006168:	b2c9      	uxtb	r1, r1
 800616a:	4402      	add	r2, r0
 800616c:	4293      	cmp	r3, r2
 800616e:	4618      	mov	r0, r3
 8006170:	d101      	bne.n	8006176 <memchr+0x12>
 8006172:	2000      	movs	r0, #0
 8006174:	e003      	b.n	800617e <memchr+0x1a>
 8006176:	7804      	ldrb	r4, [r0, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	428c      	cmp	r4, r1
 800617c:	d1f6      	bne.n	800616c <memchr+0x8>
 800617e:	bd10      	pop	{r4, pc}

08006180 <memcpy>:
 8006180:	440a      	add	r2, r1
 8006182:	4291      	cmp	r1, r2
 8006184:	f100 33ff 	add.w	r3, r0, #4294967295
 8006188:	d100      	bne.n	800618c <memcpy+0xc>
 800618a:	4770      	bx	lr
 800618c:	b510      	push	{r4, lr}
 800618e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006192:	4291      	cmp	r1, r2
 8006194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006198:	d1f9      	bne.n	800618e <memcpy+0xe>
 800619a:	bd10      	pop	{r4, pc}

0800619c <memmove>:
 800619c:	4288      	cmp	r0, r1
 800619e:	b510      	push	{r4, lr}
 80061a0:	eb01 0402 	add.w	r4, r1, r2
 80061a4:	d902      	bls.n	80061ac <memmove+0x10>
 80061a6:	4284      	cmp	r4, r0
 80061a8:	4623      	mov	r3, r4
 80061aa:	d807      	bhi.n	80061bc <memmove+0x20>
 80061ac:	1e43      	subs	r3, r0, #1
 80061ae:	42a1      	cmp	r1, r4
 80061b0:	d008      	beq.n	80061c4 <memmove+0x28>
 80061b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ba:	e7f8      	b.n	80061ae <memmove+0x12>
 80061bc:	4601      	mov	r1, r0
 80061be:	4402      	add	r2, r0
 80061c0:	428a      	cmp	r2, r1
 80061c2:	d100      	bne.n	80061c6 <memmove+0x2a>
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ce:	e7f7      	b.n	80061c0 <memmove+0x24>

080061d0 <_realloc_r>:
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	4607      	mov	r7, r0
 80061d4:	4614      	mov	r4, r2
 80061d6:	460e      	mov	r6, r1
 80061d8:	b921      	cbnz	r1, 80061e4 <_realloc_r+0x14>
 80061da:	4611      	mov	r1, r2
 80061dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061e0:	f7ff bc36 	b.w	8005a50 <_malloc_r>
 80061e4:	b922      	cbnz	r2, 80061f0 <_realloc_r+0x20>
 80061e6:	f7ff fbe7 	bl	80059b8 <_free_r>
 80061ea:	4625      	mov	r5, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f0:	f000 f814 	bl	800621c <_malloc_usable_size_r>
 80061f4:	42a0      	cmp	r0, r4
 80061f6:	d20f      	bcs.n	8006218 <_realloc_r+0x48>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4638      	mov	r0, r7
 80061fc:	f7ff fc28 	bl	8005a50 <_malloc_r>
 8006200:	4605      	mov	r5, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	d0f2      	beq.n	80061ec <_realloc_r+0x1c>
 8006206:	4631      	mov	r1, r6
 8006208:	4622      	mov	r2, r4
 800620a:	f7ff ffb9 	bl	8006180 <memcpy>
 800620e:	4631      	mov	r1, r6
 8006210:	4638      	mov	r0, r7
 8006212:	f7ff fbd1 	bl	80059b8 <_free_r>
 8006216:	e7e9      	b.n	80061ec <_realloc_r+0x1c>
 8006218:	4635      	mov	r5, r6
 800621a:	e7e7      	b.n	80061ec <_realloc_r+0x1c>

0800621c <_malloc_usable_size_r>:
 800621c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006220:	1f18      	subs	r0, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	bfbc      	itt	lt
 8006226:	580b      	ldrlt	r3, [r1, r0]
 8006228:	18c0      	addlt	r0, r0, r3
 800622a:	4770      	bx	lr

0800622c <_init>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr

08006238 <_fini>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr
